{
	"Name": "UCVISTimeline",
	"Target": "",
	"IsControlType": false,
	"Template": "<div style=\"display:none\">	{{startDate}}	{{endDate}}	{{item}}</div><br /><div id=\"visualization\" ></div><div id=\"key\" style=\"display:flex; margin-top: 10px\">	<div style=\"display:flex;\">		<div style=\"background: #dddddd; height:10px; width:10px; margin: 4px\"></div> <label>Pending</label>		<div style=\"background: #D5DDF6; height:10px; width:10px; margin: 4px\"></div> <label>Default</label>	</div></div>", 
	"Events": [
		{
			"Name": "Click",
			"On": "click",
			"Parameters": ""
		} ,
		{
			"Name": "click2",
			"On": "click2",
			"Parameters": ""
		} ,
		{
			"Name": "DateRangeChanged",
			"On": "daterangechanged",
			"Parameters": ""
		} 
	],
	"Properties": [
		{
			"Id": "events",
			"Name": "events",
			"Type": "string",
			"Default": ""
		} ,
		{
			"Id": "holidayEvents",
			"Name": "holidayEvents",
			"Type": "string",
			"Default": ""
		} ,
		{
			"Id": "groups",
			"Name": "groups",
			"Type": "string",
			"Default": ""
		} ,
		{
			"Id": "leavetypes",
			"Name": "leavetypes",
			"Type": "string",
			"Default": ""
		} ,
		{
			"Id": "item",
			"Name": "item",
			"Type": "numeric",
			"Default": ""
		} ,
		{
			"Id": "newStartDate",
			"Name": "newStartDate",
			"Type": "string",
			"Default": ""
		} ,
		{
			"Id": "newStopDate",
			"Name": "newStopDate",
			"Type": "string",
			"Default": ""
		} ,
		{
			"Id": "startDate",
			"Name": "startDate",
			"Type": "string",
			"Default": ""
		} ,
		{
			"Id": "stopDate",
			"Name": "stopDate",
			"Type": "string",
			"Default": ""
		} ,
		{
			"Id": "RangeChangedFromUC",
			"Name": "RangeChangedFromUC",
			"Type": "boolean",
			"Default": "false"
		} ,
		{
			"Id": "HolidayNameCollection",
			"Name": "HolidayNameCollection",
			"Type": "string",
			"Default": ""
		} ,
		{
			"Id": "HolidayValueCollection",
			"Name": "HolidayValueCollection",
			"Type": "string",
			"Default": ""
		} 
	],
	"Methods": {
		"Public": [
			{
				"Name": "SetItems",
				"Source": "		this.events = events		console.log(this.events)		var events = JSON.parse(this.events)		var items = new vis.DataSet();		for (var i = 0; i < events.length; i++) {			var event = events[i]			console.log(event)			items.add(event)		}	",
				"Return": "",
				"Parameters": [
					 {
						"Name": "events",
						"Type": "events"
					} 
				]
			} ,
			{
				"Name": "Refresh",
				"Source": "		this.events = events		this.groups = groups		this.show()	",
				"Return": "",
				"Parameters": [
					 {
						"Name": "events",
						"Type": "events"
					} ,
					 {
						"Name": "groups",
						"Type": "groups"
					} 
				]
			} 
		],
		"Private": [
		]
	},
	"Scripts": {
		"AfterShow": [
			{
				"Name": "Init2",
				"Source": "			try {						const style = document.createElement(\'style\');			// append holiday styling			var styleString = `				.vis-item.vis-background.holiday {					background-color: #faf2cc80;				}			`			style.innerHTML = styleString			document.head.appendChild(style);						function formatDate(date) {				const year = `${date.getFullYear()}`.slice(-2);				const month = (\'0\' + (date.getMonth() + 1)).slice(-2); 				const day = (\'0\' + date.getDate()).slice(-2);				return `${month}/${day}/${year}`			}						const UC = this;						var events = JSON.parse(this.events)			var holidayEvents = JSON.parse(this.holidayEvents)						var eventGroups = JSON.parse(this.groups)			var leavetypes = JSON.parse(this.leavetypes)			var now = moment().minutes(0).seconds(0).milliseconds(0);			var groupCount = 3;			var itemCount = 20;						// create a data set with groups			var groups = new vis.DataSet();			for (var i = 0; i < eventGroups.length; i++) {				var eventGroup = eventGroups[i]				groups.add(eventGroup)			}					events = events.concat(holidayEvents)				// create a dataset with items			var items = new vis.DataSet();			for (var i = 0; i < events.length; i++) {				var event = events[i]				items.add(event)				}						// create visualization			var container = document.getElementById(\'visualization\');			var options = {				groupOrder: \'content\',  // groupOrder can be a property name or a sorting function				orientation: {					axis: \'both\'				},				timeAxis: {					scale: \'day\',					step: 1				},				showWeekScale: true,				start: this.startDate,				end: this.stopDate,				zoomable:true,				verticalScroll: true,				horizontalScroll: true,				zoomKey: \'ctrlKey\',				format: {					minorLabels: {day: \'ddd DD\'},					//majorLabels: {day: \'w\'}	    		},				maxHeight: \'100%\',			};						var winHeight = $(window).height();			var timelineHeight = $(\'#visualization\').height()						console.log(winHeight + \' - \' + timelineHeight)						var timeline = new vis.Timeline(container);			timeline.setOptions(options);			timeline.setGroups(groups);			timeline.setItems(items);						timeline.on(\'rangechange\', function (properties) {				styleEvents()			});						timeline.on(\'click\', function (properties) {				console.log(properties.item);				console.log(timeline.itemSet.items)				UC.item = properties.item				UC.Click()				let scrollTop = window.scrollY;				console.log(scrollTop)			});						timeline.on(\'rangechanged\', function (properties) {				console.log(\'range changed\')				UC.newStartDate = formatDate(properties.start)				UC.newStopDate = formatDate(properties.end)				var newItems = new vis.DataSet();				//timeline.setItems(newItems)				UC.RangeChangedFromUC = true			});						function styleEventBG(className, color){				var elements = document.getElementsByClassName(className)				for (let i=0; i < elements.length; i++) {					var element = elements[i]					element.style.background = color				}			}			function styleEvents(){				for (var i = 0; i < events.length; i++) {					var event = events[i]					styleEventBG(`${event.id}`, event.color)					styleEventBG(event.className, event.color)				}			}						var keyDiv = document.getElementById(\'key\')						for (var i=0; i < leavetypes.length; i++) {				var type = leavetypes[i]				var element = document.createElement(\'div\')				element.innerHTML = `				<div style=\"display:flex;\">				<div style=\"background: ${type.LeaveTypeColorApproved}; height:10px; width:10px; margin: 4px; margin-left: 10px\"></div> <label>${type.LeaveTypeName}</label>				</div>				`				keyDiv.appendChild(element);			}									styleEvents();						var winHeight = $(window).height();						const visDiv = document.getElementById(\'visualization\');				        // Callback function to execute when the div\'s size changes	        function onResize(entries) {	            for (let entry of entries) {	                if (entry.contentRect.height > winHeight-250) {						$(\'#visualization\').css(\"height\", winHeight-250)						$(\'#visualization\').css(\"overflow\", \'auto\')					}						            }	        }				        // Create a new ResizeObserver instance	        const resizeObserver = new ResizeObserver(onResize);			resizeObserver.observe(visDiv);									function wrapHolidayText() {				const elements = document.querySelectorAll(\'.vis-item-content\');				elements.forEach(el => {					el.style.textWrap = \'auto\';				});			}					wrapHolidayText()					}catch(e){			console.error(e)		}	",
				"AngularLocation": ""
			} 
		],
		"BeforeShow": [
		]
	},
	"Dependencies": [
	],
	"Imports": [
	],
	"Styles": [
	]
}