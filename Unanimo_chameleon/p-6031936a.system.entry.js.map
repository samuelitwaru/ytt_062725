{"version":3,"names":["FIXED_SIZES_SUM_CUSTOM_VAR","DEFAULT_MIN_SIZE","findItemInParent","itemToFind","itemId","item","id","parentItem","items","findIndex","getMousePosition","event","direction","clientX","clientY","getDragBarPosition","dragBarRect","left","top","getFrValue","Number","size","replace","trim","getPxValue","type","value","minSize","hasAbsoluteValue","includes","hasMinSize","getItemMinMaxSizeInTemplate","itemUIModel","concat","actualSize","sizesToGridTemplate","itemsInfo","lastItemIndex","map","index","_b","dragBar","hidden","get","_d","_c","join","getItemFrSize","frValue","frString","fixedOffsetSize","getComponentSize","setPxSize","newValue","newValueString","updatePxSize","increment","setFrSize","updateFrSize","setOffsetSize","itemInfo","incrementOffsetSize","checkAndSetInitialValue","getItemSizeUsingReference","info","itemRef","container","querySelector","clientWidth","clientHeight","checkIfMousePointerIsInsideOfTheValidResizeArea","startItemAvailableIncrement","endItemAvailableIncrement","mouseEvent","undefined","status","getBoundingClientRect","dragBarPosition","mousePosition","mouseIsOutside","RTL","canResizeBothItems","startItemUIModel","endItemUIModel","startItemSizeType","endItemSizeType","incrementInPx","startItemMinSize","startItemSize","availableIncrement","endItemMinSize","endItemSize","fixAndUpdateLayoutModel","layout","fixAndUpdateSubModel","ROOT_VIEW","frSum","fixedSizesSum","length","forEach","adjustedFrValue","group","fixedSizesSum_1","set","sizeIncrementDictionary","remainingRelativeSizeInPixels","incrementInFr","addSizeIncrementInComponents","actualIncrement","resizeOperationStatus","Math","sign","updateComponentsAndDragBar","gridTemplateDirectionCustomVar","incrementInPxRTL","itemStartId","itemEndId","fixedSizesSumParent","fixedSizesSumRoot","layoutItems","containerSize","mustUpdateTheDOM","style","setProperty","ariaValueText","NO_FIXED_SIZES_TO_UPDATE","removeItem","itemToRemoveUIModel","reconnectedSubtree","fixedSizesSumDecrement","success","itemsToRemove","itemToRemoveIndex","parentItemItems","itemToAddSpaceIndex","itemToAddSpace","push","addSpaceToItemAndGetNewFixesSizes","parentItemUIModel","itemToAddSpaceUIModel","nodeToRemove","nodeToReconnect","subItem","Object","keys","key","delete","itemToRemove","removeElement","itemToSubtractUIModel","itemToAddUIModel","_itemToAddSpaceIsBefore","itemToSubtractInfo","itemToAddInfo","pxValue","itemToAddSpaceOffsetSize","newFrSize","addSiblingLeaf","parentGroup","siblingItem","placedInTheSibling","leafInfo","takeHalfTheSpaceOfTheSiblingItem","parentGroupUIModel","siblingItemUIModel","siblingIndex","leafIndex","parentGroupItems","insertIntoIndex","leafUIModel","siblingHasAbsoluteValue","siblingHalfSize","siblingFixedOffsetSize","fixedSizesSumIncrement","layoutSplitterCss","ChLayoutSplitterStyle0","GRID_TEMPLATE_DIRECTION_CUSTOM_VAR","DIRECTION_CLASS","TEMPLATE_STYLE","getAriaControls","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","ARROW_LEFT","ChLayoutSplitter","exports","_a","_dragRAF","this","_mouseDownInfo","_lastMousePosition","_newMousePosition","_fixedSizesSumRoot","_itemsInfo","Map","_handleBarDrag","preventDefault","__classPrivateFieldSet","_this","__classPrivateFieldGet","perform","_handleBarDragRAF","_removeMouseMoveHandler","document","removeEventListener","capture","_mouseUpHandler","cancel","call","resetCursorInDocument","resetPointerEventsInDocumentBody","_initializeDragBarValuesForResizeProcessing","target","dragBarContainer","parentElement","isRTL","_mouseDownHandler","SyncWithRAF","addCursorInDocument","removePointerEventsInDocumentBody","currentMousePosition","addEventListener","passive","_handleResize","code","positiveIncrement","incrementWithKeyboard","_renderItem","lastComponentIndex","h","class","part","_renderItems","name","role","dragBarDisabled","barAccessibleName","title","tabindex","onKeyDown","onMouseDown","_updateLayoutInfo","clear","class_1","prototype","modelChanged","newModel","refreshLayout","forceUpdate","result","connectedCallback","model","disconnectedCallback","render","layoutModel"],"sources":["src/components/layout-splitter/utils.ts","src/components/layout-splitter/remove-item.ts","src/components/layout-splitter/add-sibling-item.ts","src/components/layout-splitter/layout-splitter.scss?tag=ch-layout-splitter&encapsulation=shadow","src/components/layout-splitter/layout-splitter.tsx"],"sourcesContent":["import { ROOT_VIEW } from \"../../common/utils\";\r\nimport {\r\n  DragBarMouseDownEventInfo,\r\n  GroupExtended,\r\n  ItemExtended,\r\n  LayoutSplitterModel,\r\n  LayoutSplitterGroupModel,\r\n  LayoutSplitterItemModel,\r\n  LayoutSplitterSize\r\n} from \"./types\";\r\n\r\nexport const FIXED_SIZES_SUM_CUSTOM_VAR =\r\n  \"--ch-layout-splitter-fixed-sizes-sum\";\r\n\r\nconst DEFAULT_MIN_SIZE = 0;\r\n\r\nexport const findItemInParent = (itemToFind: ItemExtended): number => {\r\n  const itemId = itemToFind.item.id;\r\n  return itemToFind.parentItem.items.findIndex(item => item.id === itemId);\r\n};\r\n\r\nexport const getMousePosition = (\r\n  event: MouseEvent,\r\n  direction: \"columns\" | \"rows\"\r\n) => (direction === \"columns\" ? event.clientX : event.clientY);\r\n\r\nexport const getDragBarPosition = (\r\n  dragBarRect: DOMRect,\r\n  direction: \"columns\" | \"rows\"\r\n) => (direction === \"columns\" ? dragBarRect.left : dragBarRect.top);\r\n\r\nexport const getFrValue = (item: LayoutSplitterItemModel): number =>\r\n  Number(item.size.replace(\"fr\", \"\").trim());\r\n\r\nexport const getPxValue = (\r\n  item: LayoutSplitterItemModel,\r\n  type: \"size\" | \"min\" = \"size\"\r\n): number => {\r\n  const value = type === \"size\" ? item.size : item.minSize;\r\n  return Number(value.replace(\"px\", \"\").trim());\r\n};\r\n\r\nexport const hasAbsoluteValue = (item: LayoutSplitterItemModel) =>\r\n  item.size.includes(\"px\");\r\n\r\n/**\r\n * `true` if the item has a minimum size that is greater than 0px\r\n */\r\nexport const hasMinSize = (item: LayoutSplitterItemModel) =>\r\n  item.minSize && item.minSize !== \"0px\";\r\n\r\nconst getItemMinMaxSizeInTemplate = (itemUIModel: ItemExtended) =>\r\n  !hasAbsoluteValue(itemUIModel.item) && hasMinSize(itemUIModel.item)\r\n    ? `minmax(${itemUIModel.item.minSize},${itemUIModel.actualSize})`\r\n    : itemUIModel.actualSize;\r\n\r\nexport const sizesToGridTemplate = (\r\n  items: LayoutSplitterItemModel[],\r\n  itemsInfo: Map<string, ItemExtended>,\r\n  lastItemIndex: number\r\n) =>\r\n  items\r\n    .map(\r\n      (item, index) =>\r\n        item.dragBar?.hidden !== true && index !== lastItemIndex\r\n          ? `${getItemMinMaxSizeInTemplate(itemsInfo.get(item.id))} ${\r\n              item.dragBar?.size ?? 0\r\n            }px` // Add a column to place the drag bar\r\n          : getItemMinMaxSizeInTemplate(itemsInfo.get(item.id)) // Last item or not resizable\r\n    )\r\n    .join(\" \");\r\n\r\nconst getItemFrSize = (item: LayoutSplitterItemModel): string => {\r\n  // If the component has fr value, take into account the sum of fixed values\r\n  // to calculate the actual relative value\r\n  const frValue = getFrValue(item);\r\n  const frString = `${frValue * 100}%`;\r\n\r\n  return item.fixedOffsetSize\r\n    ? `calc(${frString} + var(${FIXED_SIZES_SUM_CUSTOM_VAR}) * ${-frValue} + ${\r\n        item.fixedOffsetSize\r\n      }px)`\r\n    : `calc(${frString} + var(${FIXED_SIZES_SUM_CUSTOM_VAR}) * ${-frValue})`;\r\n};\r\n\r\nconst getComponentSize = (item: LayoutSplitterItemModel): string =>\r\n  hasAbsoluteValue(item) // Pixel value\r\n    ? item.size\r\n    : getItemFrSize(item);\r\n\r\nexport const setPxSize = (itemUIModel: ItemExtended, newValue: number) => {\r\n  const newValueString: LayoutSplitterSize = `${newValue}px`;\r\n\r\n  itemUIModel.item.size = newValueString;\r\n  itemUIModel.actualSize = newValueString;\r\n};\r\n\r\nexport const updatePxSize = (itemUIModel: ItemExtended, increment: number) =>\r\n  setPxSize(itemUIModel, getPxValue(itemUIModel.item) + increment);\r\n\r\nexport const setFrSize = (itemUIModel: ItemExtended, newValue: number) => {\r\n  const newValueString: LayoutSplitterSize = `${newValue}fr`;\r\n\r\n  itemUIModel.item.size = newValueString;\r\n  itemUIModel.actualSize = getItemFrSize(itemUIModel.item);\r\n};\r\n\r\nexport const updateFrSize = (itemUIModel: ItemExtended, increment: number) =>\r\n  setFrSize(itemUIModel, getFrValue(itemUIModel.item) + increment);\r\n\r\nexport const setOffsetSize = (itemUIModel: ItemExtended, newValue: number) => {\r\n  const itemInfo = itemUIModel.item;\r\n\r\n  itemInfo.fixedOffsetSize = newValue;\r\n  itemUIModel.actualSize = getComponentSize(itemInfo);\r\n};\r\n\r\nexport const incrementOffsetSize = (\r\n  itemUIModel: ItemExtended,\r\n  increment: number\r\n) =>\r\n  setOffsetSize(\r\n    itemUIModel,\r\n    increment + (itemUIModel.item.fixedOffsetSize ?? 0)\r\n  );\r\n\r\n/**\r\n * If the item has `minSize` and its greater that the `size` value, it updates\r\n * the `size` to be equal to the `minSize`.\r\n */\r\nconst checkAndSetInitialValue = (item: LayoutSplitterItemModel) => {\r\n  if (hasMinSize(item) && getPxValue(item) < getPxValue(item, \"min\")) {\r\n    item.size = item.minSize;\r\n  }\r\n};\r\n\r\nconst getItemSizeUsingReference = (\r\n  info: DragBarMouseDownEventInfo,\r\n  itemUIModel: ItemExtended\r\n): number => {\r\n  const itemRef = info.container.querySelector(`[id=\"${itemUIModel.item.id}\"]`);\r\n  return info.direction === \"columns\"\r\n    ? itemRef.clientWidth\r\n    : itemRef.clientHeight;\r\n};\r\n\r\nconst checkIfMousePointerIsInsideOfTheValidResizeArea = (\r\n  startItemAvailableIncrement: number,\r\n  endItemAvailableIncrement: number,\r\n  info: DragBarMouseDownEventInfo\r\n): {\r\n  status: \"ok\" | \"deny\";\r\n} => {\r\n  // The resize operation was performed using the keyboard or the items does not\r\n  // have a minimum size. Nothing to check\r\n  if (info.mouseEvent === undefined) {\r\n    return { status: \"ok\" };\r\n  }\r\n\r\n  const dragBarRect = info.dragBar.getBoundingClientRect();\r\n  const dragBarPosition = getDragBarPosition(dragBarRect, info.direction);\r\n  const mousePosition = getMousePosition(info.mouseEvent, info.direction);\r\n\r\n  // If start item is its minimum position and the mouse is outside of the\r\n  // valid area\r\n  if (startItemAvailableIncrement === 0) {\r\n    const mouseIsOutside =\r\n      info.direction === \"columns\" && info.RTL\r\n        ? mousePosition > dragBarPosition\r\n        : mousePosition < dragBarPosition;\r\n\r\n    if (mouseIsOutside) {\r\n      return {\r\n        status: \"deny\"\r\n      };\r\n    }\r\n  }\r\n  // Check the same for the end item\r\n  if (endItemAvailableIncrement === 0) {\r\n    const mouseIsOutside =\r\n      info.direction === \"columns\" && info.RTL\r\n        ? mousePosition < dragBarPosition\r\n        : mousePosition > dragBarPosition;\r\n\r\n    if (mouseIsOutside) {\r\n      return {\r\n        status: \"deny\"\r\n      };\r\n    }\r\n  }\r\n\r\n  return { status: \"ok\" };\r\n};\r\n\r\n/**\r\n * Given the two items to resize and its increment (`incrementInPx`), return if\r\n * both items can be resized or the resize operation must be adjusted or\r\n * canceled.\r\n */\r\nconst canResizeBothItems = (\r\n  startItemUIModel: ItemExtended,\r\n  endItemUIModel: ItemExtended,\r\n  startItemSizeType: \"px\" | \"fr\",\r\n  endItemSizeType: \"px\" | \"fr\",\r\n  incrementInPx: number,\r\n  info: DragBarMouseDownEventInfo\r\n): {\r\n  status: \"ok\" | \"deny\" | \"not-enough-space\";\r\n  availableIncrement?: number;\r\n} => {\r\n  // - - - - - - - - - - - - - - - -\r\n  //           Start item\r\n  // - - - - - - - - - - - - - - - -\r\n  const startItemMinSize = hasMinSize(startItemUIModel.item)\r\n    ? getPxValue(startItemUIModel.item, \"min\")\r\n    : DEFAULT_MIN_SIZE;\r\n  const startItemSize =\r\n    startItemSizeType === \"px\"\r\n      ? getPxValue(startItemUIModel.item)\r\n      : getItemSizeUsingReference(info, startItemUIModel);\r\n\r\n  const startItemAvailableIncrement = startItemSize - startItemMinSize;\r\n\r\n  // It means the startItem must be shrunk, but it does not have enough space\r\n  if (startItemAvailableIncrement + incrementInPx <= 0) {\r\n    return {\r\n      status: startItemAvailableIncrement === 0 ? \"deny\" : \"not-enough-space\",\r\n      availableIncrement: startItemAvailableIncrement\r\n    };\r\n  }\r\n\r\n  // - - - - - - - - - - - - - - - -\r\n  //            End item\r\n  // - - - - - - - - - - - - - - - -\r\n  const endItemMinSize = hasMinSize(endItemUIModel.item)\r\n    ? getPxValue(endItemUIModel.item, \"min\")\r\n    : DEFAULT_MIN_SIZE;\r\n  const endItemSize =\r\n    endItemSizeType === \"px\"\r\n      ? getPxValue(endItemUIModel.item)\r\n      : getItemSizeUsingReference(info, endItemUIModel);\r\n\r\n  const endItemAvailableIncrement = endItemSize - endItemMinSize;\r\n\r\n  // It means the endItem must be shrunk, but it does not have enough space\r\n  if (endItemAvailableIncrement - incrementInPx <= 0) {\r\n    return {\r\n      status: endItemAvailableIncrement === 0 ? \"deny\" : \"not-enough-space\",\r\n      availableIncrement: endItemAvailableIncrement\r\n    };\r\n  }\r\n\r\n  // In this instance, the drag operation is not modified, but we still don't\r\n  // know the position of the mouse. If one of the items is in its minimum size\r\n  // and the operation will increase one of its sizes, the mouse pointer must\r\n  // not be out of the valid area\r\n  return checkIfMousePointerIsInsideOfTheValidResizeArea(\r\n    startItemAvailableIncrement,\r\n    endItemAvailableIncrement,\r\n    info\r\n  );\r\n};\r\n\r\nexport const fixAndUpdateLayoutModel = (\r\n  layout: LayoutSplitterModel,\r\n  itemsInfo: Map<string, ItemExtended>\r\n): number => fixAndUpdateSubModel(layout.items, itemsInfo, ROOT_VIEW);\r\n\r\nfunction fixAndUpdateSubModel(\r\n  items: LayoutSplitterItemModel[],\r\n  itemsInfo: Map<string, ItemExtended>,\r\n  parentItem: LayoutSplitterGroupModel\r\n): number {\r\n  let frSum = 0;\r\n  let fixedSizesSum = 0;\r\n\r\n  const lastItemIndex = items.length - 1;\r\n\r\n  // Get the sum of all fr values. Also, store the sum of fixed sizes\r\n  items.forEach((item, index) => {\r\n    if (hasAbsoluteValue(item)) {\r\n      checkAndSetInitialValue(item);\r\n\r\n      fixedSizesSum += getPxValue(item);\r\n    } else {\r\n      frSum += getFrValue(item);\r\n    }\r\n\r\n    // Take into account previous resizes (fixedOffsetSize values) and add drag\r\n    // bar sizes if this is not the last item\r\n    fixedSizesSum +=\r\n      (item.fixedOffsetSize ?? 0) +\r\n      (index !== lastItemIndex ? item.dragBar?.size ?? 0 : 0);\r\n  });\r\n\r\n  // If there are fr values, we must adjust the frs values to be relative to 1fr\r\n  if (frSum > 0) {\r\n    items.forEach(item => {\r\n      if (!hasAbsoluteValue(item)) {\r\n        const frValue = getFrValue(item);\r\n        const adjustedFrValue = frValue / frSum;\r\n\r\n        item.size = `${adjustedFrValue}fr`;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Update the actualSizes and fixedSizes maps\r\n  items.forEach(item => {\r\n    const itemUIModel: ItemExtended = {\r\n      item: item,\r\n      parentItem: parentItem,\r\n      actualSize: getComponentSize(item)\r\n    };\r\n\r\n    if ((item as LayoutSplitterGroupModel).items != null) {\r\n      const group = item as LayoutSplitterGroupModel;\r\n      const fixedSizesSum = fixAndUpdateSubModel(group.items, itemsInfo, group);\r\n\r\n      (itemUIModel as GroupExtended).fixedSizesSum = fixedSizesSum;\r\n    }\r\n\r\n    itemsInfo.set(item.id, itemUIModel);\r\n  });\r\n\r\n  return fixedSizesSum;\r\n}\r\n\r\nconst sizeIncrementDictionary: {\r\n  [key in \"px-px\" | \"px-fr\" | \"fr-px\" | \"fr-fr\"]: (\r\n    startItemUIModel: ItemExtended,\r\n    endItemUIModel: ItemExtended,\r\n    incrementInPx: number,\r\n    remainingRelativeSizeInPixels: number\r\n  ) => void;\r\n} = {\r\n  \"px-px\": (startItemUIModel, endItemUIModel, incrementInPx) => {\r\n    updatePxSize(startItemUIModel, incrementInPx);\r\n    updatePxSize(endItemUIModel, -incrementInPx);\r\n  },\r\n\r\n  \"px-fr\": (startItemUIModel, endItemUIModel, incrementInPx) => {\r\n    updatePxSize(startItemUIModel, incrementInPx);\r\n    incrementOffsetSize(endItemUIModel, -incrementInPx);\r\n  },\r\n\r\n  \"fr-px\": (startItemUIModel, endItemUIModel, incrementInPx) => {\r\n    incrementOffsetSize(startItemUIModel, incrementInPx);\r\n    updatePxSize(endItemUIModel, -incrementInPx);\r\n  },\r\n\r\n  \"fr-fr\": (\r\n    startItemUIModel,\r\n    endItemUIModel,\r\n    incrementInPx,\r\n    remainingRelativeSizeInPixels\r\n  ) => {\r\n    const incrementInFr = incrementInPx / remainingRelativeSizeInPixels;\r\n    updateFrSize(startItemUIModel, incrementInFr);\r\n    updateFrSize(endItemUIModel, -incrementInFr);\r\n  }\r\n};\r\n\r\nconst addSizeIncrementInComponents = (\r\n  startItemUIModel: ItemExtended,\r\n  endItemUIModel: ItemExtended,\r\n  incrementInPx: number,\r\n  remainingRelativeSizeInPixels: number,\r\n  info: DragBarMouseDownEventInfo\r\n): boolean => {\r\n  const startItemSizeType = hasAbsoluteValue(startItemUIModel.item)\r\n    ? \"px\"\r\n    : \"fr\";\r\n  const endItemSizeType = hasAbsoluteValue(endItemUIModel.item) ? \"px\" : \"fr\";\r\n  let actualIncrement = incrementInPx;\r\n\r\n  const resizeOperationStatus = canResizeBothItems(\r\n    startItemUIModel,\r\n    endItemUIModel,\r\n    startItemSizeType,\r\n    endItemSizeType,\r\n    incrementInPx,\r\n    info\r\n  );\r\n\r\n  if (resizeOperationStatus.status === \"deny\") {\r\n    return false;\r\n  }\r\n  if (resizeOperationStatus.status === \"not-enough-space\") {\r\n    actualIncrement =\r\n      resizeOperationStatus.availableIncrement * Math.sign(actualIncrement);\r\n  }\r\n\r\n  sizeIncrementDictionary[`${startItemSizeType}-${endItemSizeType}`](\r\n    startItemUIModel,\r\n    endItemUIModel,\r\n    actualIncrement,\r\n    remainingRelativeSizeInPixels\r\n  );\r\n\r\n  return true;\r\n};\r\n\r\nexport const updateComponentsAndDragBar = (\r\n  info: DragBarMouseDownEventInfo,\r\n  itemsInfo: Map<string, ItemExtended>,\r\n  incrementInPx: number,\r\n  gridTemplateDirectionCustomVar: string\r\n) => {\r\n  // - - - - - - - - - Increments - - - - - - - - -\r\n  // When the language is RTL, the increment is in the opposite direction\r\n  const incrementInPxRTL =\r\n    info.direction === \"columns\" && info.RTL ? -incrementInPx : incrementInPx;\r\n\r\n  // Components at each position of the drag bar\r\n  const startItemUIModel = itemsInfo.get(info.itemStartId);\r\n  const endItemUIModel = itemsInfo.get(info.itemEndId);\r\n\r\n  const fixedSizesSumParent =\r\n    startItemUIModel.parentItem === ROOT_VIEW\r\n      ? info.fixedSizesSumRoot\r\n      : (itemsInfo.get(startItemUIModel.parentItem.id) as GroupExtended)\r\n          .fixedSizesSum;\r\n\r\n  const layoutItems = info.layoutItems;\r\n\r\n  const remainingRelativeSizeInPixels =\r\n    info.containerSize - fixedSizesSumParent;\r\n\r\n  const mustUpdateTheDOM = addSizeIncrementInComponents(\r\n    startItemUIModel,\r\n    endItemUIModel,\r\n    incrementInPxRTL,\r\n    remainingRelativeSizeInPixels,\r\n    info\r\n  );\r\n\r\n  // No resizing can be done, so there is no need to update the DOM\r\n  if (!mustUpdateTheDOM) {\r\n    return;\r\n  }\r\n\r\n  // Update in the DOM the grid distribution\r\n  info.container.style.setProperty(\r\n    gridTemplateDirectionCustomVar,\r\n    sizesToGridTemplate(layoutItems, itemsInfo, layoutItems.length - 1)\r\n  );\r\n\r\n  // Update the current value in the drag bar\r\n  info.dragBar.ariaValueText = startItemUIModel.actualSize;\r\n};\r\n","import { removeElement } from \"../../common/array\";\r\nimport {\r\n  GroupExtended,\r\n  ItemExtended,\r\n  LayoutSplitterGroupModel,\r\n  LayoutSplitterItemModel,\r\n  LayoutSplitterItemRemoveResult,\r\n  LayoutSplitterReconnectedSubtree\r\n} from \"./types\";\r\nimport {\r\n  getFrValue,\r\n  getPxValue,\r\n  hasAbsoluteValue,\r\n  incrementOffsetSize,\r\n  updatePxSize,\r\n  findItemInParent,\r\n  setFrSize\r\n} from \"./utils\";\r\n\r\n/**\r\n * [parentArray, indexToRemove, idOfTheItem]\r\n */\r\ntype ItemToRemove = [LayoutSplitterItemModel[], number, string];\r\n\r\nexport const NO_FIXED_SIZES_TO_UPDATE = 0;\r\n\r\nexport const removeItem = (\r\n  itemId: string,\r\n  itemsInfo: Map<string, ItemExtended>\r\n): LayoutSplitterItemRemoveResult => {\r\n  const itemToRemoveUIModel = itemsInfo.get(itemId);\r\n  let reconnectedSubtree: LayoutSplitterReconnectedSubtree = undefined;\r\n  let fixedSizesSumDecrement: number = NO_FIXED_SIZES_TO_UPDATE;\r\n\r\n  if (!itemToRemoveUIModel) {\r\n    return {\r\n      success: false,\r\n      reconnectedSubtree: reconnectedSubtree,\r\n      fixedSizesSumDecrement: fixedSizesSumDecrement\r\n    };\r\n  }\r\n\r\n  // TODO: Valid whether the parent is the root node or not. If it is the root, update the fixedSizesSum\r\n\r\n  const itemsToRemove: ItemToRemove[] = [];\r\n\r\n  const itemToRemoveIndex = findItemInParent(itemToRemoveUIModel);\r\n  const parentItem = itemToRemoveUIModel.parentItem;\r\n  const parentItemItems = parentItem.items;\r\n\r\n  const itemToAddSpaceIndex =\r\n    itemToRemoveIndex === 0 ? 1 : itemToRemoveIndex - 1;\r\n  const itemToAddSpace = parentItemItems[itemToAddSpaceIndex];\r\n\r\n  // Queue to remove the item in a future iteration\r\n  itemsToRemove.push([parentItemItems, itemToRemoveIndex, itemId]);\r\n\r\n  // The space reserved for the item can be given to a sibling item\r\n  if (parentItemItems.length > 2) {\r\n    fixedSizesSumDecrement = addSpaceToItemAndGetNewFixesSizes(\r\n      itemToRemoveUIModel,\r\n      itemsInfo.get(itemToAddSpace.id),\r\n      itemToAddSpaceIndex < itemToRemoveIndex\r\n    );\r\n\r\n    // TODO: CHECK WHAT HAPPENS WITH THE DRAG BAR SIZE OF THE REMOVED ITEM IN THE fixedSizesSumDecrement <----------------\r\n  }\r\n\r\n  // The current group will have one child. Remove the group and and reconnect\r\n  // the child item with the parent of its group\r\n  else if (parentItemItems.length === 2) {\r\n    // - - - - - - - - - - - - - - - - - - - - - - - - -\r\n    // INPUT MODEL:\r\n    //                     secondParentItem\r\n    //                            / \\\r\n    //                         /       \\\r\n    //                      /             \\\r\n    //            (Id x) parentItem   Other items...\r\n    //                     / \\\r\n    //                  /       \\\r\n    //               /             \\\r\n    //  (Id y) itemToRemove   (Id z) itemToAddSpace\r\n    //                                    / \\\r\n    //                                 /       \\\r\n    //                                 groups...\r\n    //\r\n    //\r\n    // OUTPUT MODEL:\r\n    //                secondParentItem\r\n    //                       / \\\r\n    //                    /       \\\r\n    //                 /             \\\r\n    //     (Id x) parentItem    Other items...\r\n    //              / \\\r\n    //           /       \\\r\n    //           groups...\r\n    // - - - - - - - - - - - - - - - - - - - - - - - - -\r\n\r\n    // TODO: CHECK PARENT ROOT <-----------------------------------------------------\r\n    const parentItemUIModel = itemsInfo.get(parentItem.id) as GroupExtended;\r\n    const itemToAddSpaceUIModel = itemsInfo.get(\r\n      itemToAddSpace.id\r\n    ) as GroupExtended;\r\n\r\n    // Push the item rename\r\n    reconnectedSubtree = {\r\n      nodeToRemove: itemToAddSpace.id,\r\n      nodeToReconnect: parentItem.id\r\n    };\r\n\r\n    // Reconnect the parent for the \"itemToAddSpace\" items\r\n    if ((itemToAddSpace as LayoutSplitterGroupModel).items != null) {\r\n      (itemToAddSpace as LayoutSplitterGroupModel).items.forEach(subItem => {\r\n        itemsInfo.get(subItem.id).parentItem = parentItem;\r\n      });\r\n    }\r\n\r\n    // Update the fixedSizesSum even if it does not exists in the \"itemToAddSpace\"\r\n    parentItemUIModel.fixedSizesSum = itemToAddSpaceUIModel.fixedSizesSum;\r\n\r\n    // This property is no longer valid in the new parent\r\n    delete parentItem.items;\r\n\r\n    // Update all properties in the new parent, except for some specific properties\r\n    Object.keys(itemToAddSpace).forEach(\r\n      (key: keyof LayoutSplitterItemModel) => {\r\n        if (\r\n          key !== \"id\" &&\r\n          key !== \"size\" &&\r\n          key !== \"dragBar\" &&\r\n          key !== \"fixedOffsetSize\"\r\n        ) {\r\n          parentItem[key] = itemToAddSpace[key];\r\n        }\r\n      }\r\n    );\r\n\r\n    itemsInfo.delete(itemToAddSpace.id);\r\n  } else {\r\n    // Remove the item and its group parent\r\n  }\r\n\r\n  // Delete the item and all its descendants...\r\n  // TODO: Add recursive removal\r\n\r\n  itemsToRemove.forEach(itemToRemove => {\r\n    removeElement(itemToRemove[0], itemToRemove[1]);\r\n    itemsInfo.delete(itemToRemove[2]);\r\n  });\r\n\r\n  // TODO: Remove the dragBar parts that no longer apply???? <----------------------\r\n\r\n  return {\r\n    success: true,\r\n    reconnectedSubtree: reconnectedSubtree,\r\n    fixedSizesSumDecrement: fixedSizesSumDecrement\r\n  };\r\n};\r\n\r\nfunction addSpaceToItemAndGetNewFixesSizes(\r\n  itemToSubtractUIModel: ItemExtended,\r\n  itemToAddUIModel: ItemExtended,\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  _itemToAddSpaceIsBefore: boolean\r\n): number {\r\n  // TODO: Add implementation. Ensure the given space is relative to 100% (1fr)\r\n  // TODO: Remove drag bar Size from fixedSizesSum\r\n\r\n  const itemToSubtractInfo = itemToSubtractUIModel.item;\r\n  const itemToAddInfo = itemToAddUIModel.item;\r\n\r\n  // px / px\r\n  if (hasAbsoluteValue(itemToSubtractInfo) && hasAbsoluteValue(itemToAddInfo)) {\r\n    updatePxSize(itemToAddUIModel, getPxValue(itemToSubtractInfo));\r\n    return NO_FIXED_SIZES_TO_UPDATE;\r\n  }\r\n\r\n  // itemToSubtract ----> px / itemToAdd ---> fr\r\n  if (hasAbsoluteValue(itemToSubtractInfo)) {\r\n    const pxValue = getPxValue(itemToSubtractInfo);\r\n    let fixedSizesSumDecrement = pxValue;\r\n\r\n    const itemToAddSpaceOffsetSize = itemToAddInfo.fixedOffsetSize;\r\n\r\n    // It means we must reset the fixedOffsetSize value, since it could be set\r\n    // by any resize that has occurred\r\n    if (itemToAddSpaceOffsetSize != null) {\r\n      // Remove the space that the resize introduced\r\n      fixedSizesSumDecrement += itemToAddSpaceOffsetSize;\r\n\r\n      incrementOffsetSize(itemToAddUIModel, -itemToAddSpaceOffsetSize);\r\n    }\r\n\r\n    return fixedSizesSumDecrement;\r\n  }\r\n\r\n  // itemToSubtract ----> fr / itemToAdd ---> px\r\n  if (hasAbsoluteValue(itemToAddInfo)) {\r\n    // updateOffsetSize(startItemUIModel, incrementInPxRTL, fixedSizes);\r\n    // updateSize(endItemUIModel, -incrementInPxRTL, fixedSizes, \"px\");\r\n\r\n    // const pxValue = getPxValue(itemToSubtractInfo);\r\n    // let fixedSizesSumDecrement = pxValue;\r\n\r\n    // // It means we must reset the fixedOffsetSize value, since it could be set\r\n    // // by any resize that has occurred\r\n    // if (itemToAddSpaceIsBefore) {\r\n    //   fixedSizesSumDecrement -= itemToAddInfo.fixedOffsetSize ?? 0;\r\n\r\n    //   updateOffsetSize(itemToAddUIModel, 0);\r\n    // }\r\n\r\n    return NO_FIXED_SIZES_TO_UPDATE;\r\n  }\r\n  // fr / fr\r\n\r\n  // Update fixedOffsetSize if the removed item had\r\n  if (itemToSubtractInfo.fixedOffsetSize != null) {\r\n    incrementOffsetSize(\r\n      itemToSubtractUIModel,\r\n      itemToSubtractInfo.fixedOffsetSize\r\n    );\r\n  }\r\n\r\n  const newFrSize = getFrValue(itemToSubtractInfo) + getFrValue(itemToAddInfo);\r\n  setFrSize(itemToAddUIModel, newFrSize);\r\n\r\n  return NO_FIXED_SIZES_TO_UPDATE;\r\n}\r\n","import { insertIntoIndex } from \"../../common/array\";\r\nimport {\r\n  GroupExtended,\r\n  ItemExtended,\r\n  LayoutSplitterLeafModel,\r\n  LayoutSplitterItemAddResult,\r\n  LeafExtended\r\n} from \"./types\";\r\nimport {\r\n  findItemInParent,\r\n  getFrValue,\r\n  getPxValue,\r\n  hasAbsoluteValue,\r\n  setFrSize,\r\n  setOffsetSize,\r\n  setPxSize\r\n} from \"./utils\";\r\n\r\n/**\r\n *\r\n * @param parentGroup\r\n * @param siblingItem\r\n * @param placedInTheSibling\r\n * @param leafInfo\r\n * @param itemsInfo\r\n * @param takeHalfTheSpaceOfTheSiblingItem\r\n *   When `true` the `fixedOffsetSize` and size member of the leaf will be\r\n *   ignored. Those members will be deduced from the sibling item as the half\r\n *   value of each one.\r\n * @returns\r\n */\r\nexport const addSiblingLeaf = (\r\n  parentGroup: string,\r\n  siblingItem: string,\r\n  placedInTheSibling: \"before\" | \"after\",\r\n  leafInfo: LayoutSplitterLeafModel,\r\n  itemsInfo: Map<string, ItemExtended>,\r\n  takeHalfTheSpaceOfTheSiblingItem: boolean\r\n): LayoutSplitterItemAddResult => {\r\n  // TODO: Add support for adding in the root node <----------------------\r\n\r\n  const parentGroupUIModel = itemsInfo.get(parentGroup) as\r\n    | GroupExtended\r\n    | undefined;\r\n  if (!parentGroupUIModel) {\r\n    return { success: false };\r\n  }\r\n\r\n  const siblingItemUIModel = itemsInfo.get(siblingItem);\r\n  if (!siblingItemUIModel) {\r\n    return { success: false };\r\n  }\r\n\r\n  // Get the index of the leaf\r\n  const siblingIndex = findItemInParent(siblingItemUIModel);\r\n  const leafIndex =\r\n    placedInTheSibling === \"before\" ? siblingIndex : siblingIndex + 1;\r\n\r\n  const parentGroupItems = parentGroupUIModel.item.items;\r\n\r\n  // Set the leaf index. Last index case\r\n  if (leafIndex === parentGroupItems.length) {\r\n    parentGroupItems.push(leafInfo);\r\n  }\r\n  // 0 <= leafIndex < totalItems\r\n  else {\r\n    insertIntoIndex(parentGroupItems, leafInfo, leafIndex);\r\n  }\r\n\r\n  const leafUIModel: LeafExtended = {\r\n    item: leafInfo,\r\n    parentItem: parentGroupUIModel.item,\r\n    actualSize: undefined\r\n  };\r\n\r\n  // Update the size of the leaf and its sibling. Each one will have half of\r\n  // the sibling size\r\n  if (takeHalfTheSpaceOfTheSiblingItem) {\r\n    const siblingHasAbsoluteValue = hasAbsoluteValue(siblingItemUIModel.item);\r\n\r\n    const siblingHalfSize =\r\n      (siblingHasAbsoluteValue\r\n        ? getPxValue(siblingItemUIModel.item)\r\n        : getFrValue(siblingItemUIModel.item)) / 2;\r\n\r\n    // Absolute value. Update the size member\r\n    if (siblingHasAbsoluteValue) {\r\n      setPxSize(leafUIModel, siblingHalfSize);\r\n      setPxSize(siblingItemUIModel, siblingHalfSize);\r\n    }\r\n    // Relative value. Update the size and fixedOffsetSize members\r\n    else {\r\n      const siblingFixedOffsetSize = siblingItemUIModel.item.fixedOffsetSize;\r\n\r\n      // Set the fixedOffsetSize if the sibling has\r\n      if (siblingFixedOffsetSize) {\r\n        setOffsetSize(leafUIModel, siblingFixedOffsetSize / 2);\r\n        setOffsetSize(siblingItemUIModel, siblingFixedOffsetSize / 2);\r\n      }\r\n\r\n      setFrSize(leafUIModel, siblingHalfSize);\r\n      setFrSize(siblingItemUIModel, siblingHalfSize);\r\n    }\r\n  } else {\r\n    // TODO: Add implementation\r\n  }\r\n\r\n  // TODO: Emit the new dragBar parts <----------------------\r\n\r\n  // Add the leaf to the itemsInfo Map\r\n  itemsInfo.set(leafInfo.id, leafUIModel);\r\n\r\n  return { success: true, fixedSizesSumIncrement: leafInfo.dragBar?.size };\r\n};\r\n","@import \"../../common/base\";\r\n\r\n@include box-sizing();\r\n\r\n:host {\r\n  --ch-drag-bar__size: 5px;\r\n\r\n  display: grid;\r\n  position: relative;\r\n  block-size: 100%;\r\n  inline-size: 100%;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//               Bar\r\n// - - - - - - - - - - - - - - - -\r\n.bar {\r\n  --position-fix: calc((var(--size, 0px) - var(--ch-drag-bar__size)) / 2);\r\n  position: relative;\r\n  inline-size: 100%;\r\n  block-size: 100%;\r\n  background-color: currentColor;\r\n  z-index: 1;\r\n\r\n  &[aria-disabled] {\r\n    pointer-events: none;\r\n  }\r\n\r\n  // Remove default focus style\r\n  &:focus-visible {\r\n    outline: unset;\r\n  }\r\n\r\n  &::after {\r\n    content: \"\";\r\n    display: flex;\r\n    position: absolute;\r\n    background-color: currentColor;\r\n    opacity: 0;\r\n\r\n    transition: opacity 0s linear;\r\n  }\r\n\r\n  &:is(:active, :focus-visible, :hover)::after {\r\n    opacity: 1;\r\n  }\r\n\r\n  &:hover::after {\r\n    transition-delay: 250ms; // Hovering delays the display of the drag-bar\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//           Containers\r\n// - - - - - - - - - - - - - - - -\r\n.leaf {\r\n  // Leafs must always take space to calculate if their size is greater that\r\n  // zero, since all items have a minimum size of zero if the minSize is not set\r\n  display: grid;\r\n}\r\n\r\n.group {\r\n  display: grid;\r\n  position: relative;\r\n}\r\n\r\n.direction--columns {\r\n  grid-template-columns: var(--ch-layout-splitter__distribution);\r\n\r\n  & > .bar {\r\n    cursor: ew-resize;\r\n\r\n    &::after {\r\n      block-size: 100%;\r\n      inline-size: var(--ch-drag-bar__size);\r\n      margin-inline-start: var(--position-fix);\r\n    }\r\n  }\r\n}\r\n\r\n.direction--rows {\r\n  grid-template-rows: var(--ch-layout-splitter__distribution);\r\n\r\n  & > .bar {\r\n    cursor: ns-resize;\r\n\r\n    &::after {\r\n      block-size: var(--ch-drag-bar__size);\r\n      inline-size: 100%;\r\n      margin-block-start: var(--position-fix);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Method,\r\n  Prop,\r\n  Watch,\r\n  forceUpdate,\r\n  h\r\n} from \"@stencil/core\";\r\nimport { Component as ChComponent } from \"../../common/interfaces\";\r\nimport {\r\n  DragBarMouseDownEventInfo,\r\n  GroupExtended,\r\n  ItemExtended,\r\n  LayoutSplitterDirection,\r\n  LayoutSplitterModel,\r\n  LayoutSplitterGroupModel,\r\n  LayoutSplitterItemModel,\r\n  LayoutSplitterLeafModel,\r\n  LayoutSplitterItemAddResult,\r\n  LayoutSplitterItemRemoveResult\r\n} from \"./types\";\r\nimport {\r\n  FIXED_SIZES_SUM_CUSTOM_VAR,\r\n  fixAndUpdateLayoutModel,\r\n  getMousePosition,\r\n  sizesToGridTemplate,\r\n  updateComponentsAndDragBar\r\n} from \"./utils\";\r\nimport {\r\n  ROOT_VIEW,\r\n  addCursorInDocument,\r\n  isRTL,\r\n  removePointerEventsInDocumentBody,\r\n  resetCursorInDocument,\r\n  resetPointerEventsInDocumentBody\r\n} from \"../../common/utils\";\r\nimport { NO_FIXED_SIZES_TO_UPDATE, removeItem } from \"./remove-item\";\r\nimport { addSiblingLeaf } from \"./add-sibling-item\";\r\nimport { SyncWithRAF } from \"../../common/sync-with-frames\";\r\n\r\ntype Group = LayoutSplitterGroupModel;\r\ntype Item = LayoutSplitterItemModel;\r\n\r\nconst GRID_TEMPLATE_DIRECTION_CUSTOM_VAR = \"--ch-layout-splitter__distribution\";\r\n\r\nconst DIRECTION_CLASS = (direction: LayoutSplitterDirection) =>\r\n  `group direction--${direction}`;\r\n\r\nconst TEMPLATE_STYLE = (\r\n  items: Item[],\r\n  itemsInfo: Map<string, ItemExtended>,\r\n  fixedSizesSum: number\r\n) => ({\r\n  [GRID_TEMPLATE_DIRECTION_CUSTOM_VAR]: sizesToGridTemplate(\r\n    items,\r\n    itemsInfo,\r\n    items.length - 1\r\n  ),\r\n  [FIXED_SIZES_SUM_CUSTOM_VAR]: `${fixedSizesSum}px`\r\n});\r\n\r\nconst getAriaControls = (layoutItems: Item[], index: number) =>\r\n  `${layoutItems[index].id} ${layoutItems[index + 1].id}`;\r\n\r\n// Key codes\r\nconst ARROW_UP = \"ArrowUp\";\r\nconst ARROW_RIGHT = \"ArrowRight\";\r\nconst ARROW_DOWN = \"ArrowDown\";\r\nconst ARROW_LEFT = \"ArrowLeft\";\r\n\r\n/**\r\n * @part bar - The bar that divides two columns or two rows\r\n */\r\n@Component({\r\n  shadow: true,\r\n  styleUrl: \"layout-splitter.scss\",\r\n  tag: \"ch-layout-splitter\"\r\n})\r\nexport class ChLayoutSplitter implements ChComponent {\r\n  // Sync computations with frames\r\n  #dragRAF: SyncWithRAF; // Don't allocate memory until needed when dragging\r\n\r\n  #mouseDownInfo: DragBarMouseDownEventInfo;\r\n  #lastMousePosition: number;\r\n  #newMousePosition: number;\r\n\r\n  #fixedSizesSumRoot: number;\r\n\r\n  // Distribution of elements\r\n  #itemsInfo: Map<string, ItemExtended> = new Map();\r\n\r\n  @Element() el: HTMLChLayoutSplitterElement;\r\n\r\n  /**\r\n   * This attribute lets you specify the label for the drag bar.\r\n   * Important for accessibility.\r\n   */\r\n  @Prop() readonly barAccessibleName: string = \"Resize\";\r\n\r\n  /**\r\n   * This attribute lets you specify if the resize operation is disabled in all\r\n   * drag bars. If `true`, the drag bars are disabled.\r\n   */\r\n  @Prop() readonly dragBarDisabled: boolean = false;\r\n\r\n  /**\r\n   * Specifies the resizing increment (in pixel) that is applied when using the\r\n   * keyboard to resize a drag bar.\r\n   */\r\n  @Prop() readonly incrementWithKeyboard: number = 2;\r\n\r\n  /**\r\n   * Specifies the list of component that are displayed. Each component will be\r\n   * separated via a drag bar.\r\n   */\r\n  @Prop() readonly model: LayoutSplitterModel = {\r\n    id: \"root\",\r\n    direction: \"columns\",\r\n    items: []\r\n  };\r\n  @Watch(\"model\")\r\n  modelChanged(newModel: LayoutSplitterModel) {\r\n    this.#updateLayoutInfo(newModel);\r\n  }\r\n\r\n  /**\r\n   * Schedules a new render of the control even if no state changed.\r\n   */\r\n  @Method()\r\n  async refreshLayout() {\r\n    forceUpdate(this);\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  @Method()\r\n  async addSiblingLeaf(\r\n    parentGroup: string,\r\n    siblingItem: string,\r\n    placedInTheSibling: \"before\" | \"after\",\r\n    leafInfo: LayoutSplitterLeafModel,\r\n    takeHalfTheSpaceOfTheSiblingItem: boolean\r\n  ): Promise<LayoutSplitterItemAddResult> {\r\n    const result = addSiblingLeaf(\r\n      parentGroup,\r\n      siblingItem,\r\n      placedInTheSibling,\r\n      leafInfo,\r\n      this.#itemsInfo,\r\n      takeHalfTheSpaceOfTheSiblingItem\r\n    );\r\n\r\n    if (result.success) {\r\n      const fixedSizesSumIncrement = result.fixedSizesSumIncrement;\r\n\r\n      // The fixesSizesSum of the parent must be updated\r\n      if (fixedSizesSumIncrement) {\r\n        const parentItem = this.#itemsInfo.get(parentGroup).parentItem;\r\n\r\n        if (parentItem === ROOT_VIEW) {\r\n          this.#fixedSizesSumRoot += fixedSizesSumIncrement;\r\n        } else {\r\n          (this.#itemsInfo.get(parentItem.id) as GroupExtended).fixedSizesSum +=\r\n            fixedSizesSumIncrement;\r\n        }\r\n      }\r\n\r\n      // Queue re-renders\r\n      forceUpdate(this);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Removes the item that is identified by the given ID.\r\n   * The layout is rearranged depending on the state of the removed item.\r\n   */\r\n  @Method()\r\n  async removeItem(itemId: string): Promise<LayoutSplitterItemRemoveResult> {\r\n    const parentItem = this.#itemsInfo.get(itemId).parentItem;\r\n    const result = removeItem(itemId, this.#itemsInfo);\r\n\r\n    if (result.success) {\r\n      const fixedSizesSumDecrement = result.fixedSizesSumDecrement;\r\n\r\n      // The fixesSizesSum of the parent must be updated\r\n      if (fixedSizesSumDecrement !== NO_FIXED_SIZES_TO_UPDATE) {\r\n        if (parentItem === ROOT_VIEW) {\r\n          this.#fixedSizesSumRoot -= fixedSizesSumDecrement;\r\n        } else {\r\n          (this.#itemsInfo.get(parentItem.id) as GroupExtended).fixedSizesSum -=\r\n            fixedSizesSumDecrement;\r\n        }\r\n      }\r\n\r\n      // Queue re-renders\r\n      forceUpdate(this);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  #handleBarDrag = (event: MouseEvent) => {\r\n    event.preventDefault();\r\n    this.#newMousePosition = getMousePosition(\r\n      event,\r\n      this.#mouseDownInfo.direction\r\n    );\r\n\r\n    this.#mouseDownInfo.mouseEvent = event;\r\n\r\n    this.#dragRAF.perform(this.#handleBarDragRAF);\r\n  };\r\n\r\n  #handleBarDragRAF = (incrementInPx?: number) => {\r\n    updateComponentsAndDragBar(\r\n      this.#mouseDownInfo,\r\n      this.#itemsInfo,\r\n      incrementInPx ?? this.#newMousePosition - this.#lastMousePosition, // Increment in px\r\n      GRID_TEMPLATE_DIRECTION_CUSTOM_VAR\r\n    );\r\n\r\n    // Sync new position with last\r\n    this.#lastMousePosition = this.#newMousePosition;\r\n  };\r\n\r\n  // Handler to remove mouse down\r\n  #removeMouseMoveHandler = () => {\r\n    document.removeEventListener(\"mousemove\", this.#handleBarDrag, {\r\n      capture: true\r\n    });\r\n  };\r\n\r\n  // Remove mousemove and mouseup handlers when mouseup\r\n  #mouseUpHandler = () => {\r\n    // Cancel RAF to prevent access to undefined references\r\n    if (this.#dragRAF) {\r\n      this.#dragRAF.cancel();\r\n    }\r\n\r\n    // Remove handlers and state after finishing the resize\r\n    this.#removeMouseMoveHandler();\r\n    resetCursorInDocument();\r\n\r\n    // Add again pointer-events\r\n    resetPointerEventsInDocumentBody();\r\n\r\n    document.removeEventListener(\"mouseup\", this.#mouseUpHandler, {\r\n      capture: true\r\n    });\r\n  };\r\n\r\n  #initializeDragBarValuesForResizeProcessing = (\r\n    direction: LayoutSplitterDirection,\r\n    index: number,\r\n    layoutItems: Item[],\r\n    event: Event\r\n  ) => {\r\n    // Initialize the values needed for drag processing\r\n    const dragBar = event.target as HTMLElement;\r\n    const dragBarContainer = dragBar.parentElement;\r\n\r\n    this.#mouseDownInfo = {\r\n      container: dragBarContainer,\r\n      containerSize:\r\n        direction === \"columns\"\r\n          ? dragBarContainer.clientWidth\r\n          : dragBarContainer.clientHeight,\r\n      direction: direction,\r\n      dragBar: dragBar,\r\n      fixedSizesSumRoot: this.#fixedSizesSumRoot,\r\n      itemStartId: layoutItems[index].id,\r\n      itemEndId: layoutItems[index + 1].id,\r\n      layoutItems: layoutItems,\r\n      mouseEvent: undefined, // MouseEvent is initialized as undefined, since this object is used for the keyboard event\r\n      RTL: isRTL()\r\n    };\r\n  };\r\n\r\n  #mouseDownHandler =\r\n    (direction: LayoutSplitterDirection, index: number, layoutItems: Item[]) =>\r\n    (event: MouseEvent) => {\r\n      // Necessary to prevent selecting the inner image (or other elements) of\r\n      // the bar item when the mouse is down\r\n      event.preventDefault();\r\n\r\n      this.#dragRAF ??= new SyncWithRAF();\r\n\r\n      this.#initializeDragBarValuesForResizeProcessing(\r\n        direction,\r\n        index,\r\n        layoutItems,\r\n        event\r\n      );\r\n\r\n      // Set mouse cursor in the document\r\n      addCursorInDocument(direction === \"columns\" ? \"ew-resize\" : \"ns-resize\");\r\n\r\n      // Remove pointer-events during drag\r\n      removePointerEventsInDocumentBody();\r\n\r\n      // Mouse position\r\n      const currentMousePosition = getMousePosition(event, direction);\r\n      this.#lastMousePosition = currentMousePosition;\r\n      this.#newMousePosition = currentMousePosition; // Also updated in mouse move\r\n\r\n      // Add listeners\r\n      document.addEventListener(\"mousemove\", this.#handleBarDrag, {\r\n        capture: true\r\n      });\r\n      document.addEventListener(\"mouseup\", this.#mouseUpHandler, {\r\n        capture: true,\r\n        passive: true\r\n      });\r\n    };\r\n\r\n  #handleResize =\r\n    (direction: LayoutSplitterDirection, index: number, layoutItems: Item[]) =>\r\n    (event: KeyboardEvent) => {\r\n      if (\r\n        (direction === \"rows\" &&\r\n          event.code !== ARROW_UP &&\r\n          event.code !== ARROW_DOWN) ||\r\n        (direction === \"columns\" &&\r\n          event.code !== ARROW_LEFT &&\r\n          event.code !== ARROW_RIGHT)\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      // Prevent scroll\r\n      event.preventDefault();\r\n\r\n      this.#initializeDragBarValuesForResizeProcessing(\r\n        direction,\r\n        index,\r\n        layoutItems,\r\n        event\r\n      );\r\n\r\n      const positiveIncrement =\r\n        event.code === ARROW_RIGHT || event.code === ARROW_DOWN;\r\n\r\n      this.#handleBarDragRAF(\r\n        positiveIncrement\r\n          ? this.incrementWithKeyboard\r\n          : -this.incrementWithKeyboard\r\n      );\r\n    };\r\n\r\n  #renderItem = (\r\n    direction: LayoutSplitterDirection,\r\n    lastComponentIndex: number,\r\n    layoutItems: Item[],\r\n    item: Item,\r\n    index: number\r\n  ) => {\r\n    const itemUIModel = this.#itemsInfo.get(item.id);\r\n\r\n    return [\r\n      (item as Group).items ? (\r\n        <div\r\n          id={item.id}\r\n          class={DIRECTION_CLASS((item as Group).direction)}\r\n          part={item.id}\r\n          style={TEMPLATE_STYLE(\r\n            (item as Group).items,\r\n            this.#itemsInfo,\r\n            (itemUIModel as GroupExtended).fixedSizesSum\r\n          )}\r\n        >\r\n          {this.#renderItems(\r\n            (item as Group).direction,\r\n            (item as Group).items,\r\n            (item as Group).items.length - 1\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <div id={item.id} class=\"leaf\">\r\n          <slot key={item.id} name={item.id} />\r\n        </div>\r\n      ),\r\n\r\n      item.dragBar?.hidden !== true && index !== lastComponentIndex && (\r\n        <div\r\n          // - - - Accessibility - - -\r\n          role=\"separator\"\r\n          aria-controls={getAriaControls(layoutItems, index)}\r\n          aria-disabled={this.dragBarDisabled ? \"true\" : null}\r\n          aria-label={this.barAccessibleName}\r\n          aria-orientation={direction === \"columns\" ? \"vertical\" : \"horizontal\"}\r\n          aria-valuetext={itemUIModel.actualSize}\r\n          title={this.barAccessibleName}\r\n          tabindex=\"0\"\r\n          // - - - - - - - - - - - - -\r\n          class=\"bar\"\r\n          part={item.dragBar?.part ? `bar ${item.dragBar.part}` : \"bar\"}\r\n          style={\r\n            item.dragBar?.size ? { \"--size\": `${item.dragBar.size}px` } : null\r\n          }\r\n          onKeyDown={\r\n            !this.dragBarDisabled\r\n              ? this.#handleResize(direction, index, layoutItems)\r\n              : null\r\n          }\r\n          onMouseDown={\r\n            !this.dragBarDisabled\r\n              ? this.#mouseDownHandler(direction, index, layoutItems)\r\n              : null\r\n          }\r\n        ></div>\r\n      )\r\n    ];\r\n  };\r\n\r\n  #renderItems = (\r\n    direction: LayoutSplitterDirection,\r\n    layoutItems: Item[],\r\n    lastComponentIndex: number\r\n  ) =>\r\n    layoutItems.map((item, index) =>\r\n      this.#renderItem(direction, lastComponentIndex, layoutItems, item, index)\r\n    );\r\n\r\n  #updateLayoutInfo = (layout: LayoutSplitterModel) => {\r\n    // Clear old information\r\n    this.#itemsInfo.clear();\r\n\r\n    if (layout?.items?.length > 0) {\r\n      this.#fixedSizesSumRoot = fixAndUpdateLayoutModel(\r\n        layout,\r\n        this.#itemsInfo\r\n      );\r\n    }\r\n  };\r\n\r\n  connectedCallback() {\r\n    this.#updateLayoutInfo(this.model);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    // Defensive programming. Make sure all event listeners are removed correctly\r\n    this.#mouseUpHandler();\r\n  }\r\n\r\n  render() {\r\n    const layoutModel = this.model;\r\n\r\n    if (layoutModel?.items == null) {\r\n      return \"\";\r\n    }\r\n\r\n    return (\r\n      <div\r\n        class={DIRECTION_CLASS(layoutModel.direction)}\r\n        style={TEMPLATE_STYLE(\r\n          layoutModel.items,\r\n          this.#itemsInfo,\r\n          this.#fixedSizesSumRoot\r\n        )}\r\n      >\r\n        {this.#renderItems(\r\n          layoutModel.direction,\r\n          layoutModel.items,\r\n          layoutModel.items.length - 1\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}