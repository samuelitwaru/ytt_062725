{"version":3,"names":["paginationGoToFirstPage","grid","OnPaginationFirst","usePaging","changeGridPage","paginationGoToPreviousPage","OnPaginationPrevious","paginationGoToNextPage","OnPaginationNext","paginationGoToLastPage","OnPaginationLast","paginationGoToPage","page","eof","firstRecordOnPage","pageSize","toString","gridRefresh","ParentObject","refreshGrid","ControlName","gridSort","columnId","sortDirection","column","getColumnByHtmlName","setSort","index","GridChameleonManagerState","load","state","this","_a","_b","Columns","loadLocal","apply","setColumnSort","SortColumnName","SortDirection","setColumnHidden","hidden","getColumn","Hidden","saveLocal","setColumnSize","size","Size","setColumnFreeze","freeze","Freeze","setColumnOrder","order","Order","setColumnFilterEqual","value","getColumnFilter","Equal","updateIsFiltering","setColumnFilterLess","Less","setColumnFilterGreater","Greater","_this","sortColumn","toUpperCase","forEach","stateColumn","Name","SizeLength","filterEqual","Filter","filterLess","_d","_c","filterGreater","_f","_e","htmlName","columns","columnSettings","localStorage","getItem","concat","split","parseInt","setItem","join","name","find","localeCompare","push","isFiltering","gxGridChameleonCss","GxGridChameleonStyle0","GridChameleon","exports","class_1","prototype","controlStateHandler","loadState","componentWillLoad","componentWillRender","defineColumnRender","componentDidLoad","setCurrentRow","notifyResizePopup","selectionChangedHandler","eventInfo","rowIndex","getRowIndexByGxId","detail","rowsId","execC2VFunctions","selectRow","cellClickedHandler","rowId","cellIndex","cellId","executeEvent","navigateClickedHandler","type","refreshClickedHandler","columnHiddenChangedHandler","columnSizeChangedHandler","columnFreezeChangedHandler","columnSortChangedHandler","SortMode","gridTimestamp","Date","now","columnOrderChangedHandler","columnFilterChangedHandler","equal","less","greater","getColumnSize","SizeVariableName","SizeMinLength","SizeMaxLength","properties","i","render","length","visible","some","row","rows","findIndex","gxId","gx","popup","ispopup","fx","obs","notify","firstRow","fn","currentGridRowImpl","setCurrentGridRow","renderTitle","h","slot","header","renderActionbar","position","className","refresh","ActionRefreshPosition","settings","ActionSettingsPosition","class","renderActionRefresh","renderActionSettings","ActionRefreshClass","title","ActionRefreshTextPosition","getMessage","ActionSettingsClass","ActionSettingsTextPosition","renderColumns","ColumnsetClass","map","lang","gxBoolean","key","columnIconUrl","Icon","columnName","columnNamePosition","NamePosition","displayObserverClass","gxColumnClass","ColumnClass","HeaderClass","hideable","Hideable","resizable","Resizeable","sortable","Sortable","settingable","Filterable","renderColumnFilter","ColumnFilterClass","buttonResetText","FilterButtonResetText","buttonApplyText","FilterButtonApplyText","renderRows","rowEvenClasses","RowClass","RowEvenClass","rowOddClasses","RowOddClass","rowid","renderCells","gxProps","cellControlProperties","CellClass","cellid","innerHTML","renderControl","gxControl","control","props","setProperties","getHtml","renderPaginator","hasRecordCount","recordCount","hasNextPage","isLastPage","activePage","Math","ceil","totalPages","max","pagingBarClass","renderPaginatorNavigate","pagingButtonFirstClass","pagingButtonPreviousClass","PaginatorPagesShow","maxSize","PaginatorPagesMaxSize","pagingButtonNextClass","pagingButtonLastClass","text","textPosition","PaginatorNavigationButtonTextPosition","renderPaginationInfo","mask","PaginatorInfoEmptyTextMask","recordStart","recordEnd","PaginatorInfoTextMask","min","replacements","replace","_match","capture","PaginatorInfoClass","Host","Class","rowSelectionMode","gxAllowSelection","rowSelectedClass","RowSelectedClass","trim","rowHighlightedClass","RowHighlightedClass","ActionbarHeaderClass","ActionbarFooterClass","PaginatorShow","PaginatorInfoShow"],"sources":["src/components/gx-grid/gx-grid-chameleon-paginator.ts","src/components/gx-grid/gx-grid-chameleon-actions.ts","src/components/gx-grid/gx-grid-chameleon-state.ts","src/components/gx-grid/gx-grid-chameleon.scss?tag=gx-grid-chameleon","src/components/gx-grid/gx-grid-chameleon.tsx"],"sourcesContent":["import { GxGrid } from \"./genexus\";\r\n\r\nexport function paginationGoToFirstPage(grid: GxGrid) {\r\n  if (grid.OnPaginationFirst) {\r\n    grid.OnPaginationFirst();\r\n  } else if (grid.usePaging) {\r\n    grid.changeGridPage(\"FIRST\");\r\n  }\r\n}\r\n\r\nexport function paginationGoToPreviousPage(grid: GxGrid) {\r\n  if (grid.OnPaginationPrevious) {\r\n    grid.OnPaginationPrevious();\r\n  } else if (grid.usePaging) {\r\n    grid.changeGridPage(\"PREV\");\r\n  }\r\n}\r\n\r\nexport function paginationGoToNextPage(grid: GxGrid) {\r\n  if (grid.OnPaginationNext) {\r\n    grid.OnPaginationNext();\r\n  } else if (grid.usePaging) {\r\n    grid.changeGridPage(\"NEXT\");\r\n  }\r\n}\r\n\r\nexport function paginationGoToLastPage(grid: GxGrid) {\r\n  if (grid.OnPaginationLast) {\r\n    grid.OnPaginationLast();\r\n  } else if (grid.usePaging) {\r\n    grid.changeGridPage(\"LAST\");\r\n  }\r\n}\r\n\r\nexport function paginationGoToPage(grid: GxGrid, page: number) {\r\n  if (page === 1) {\r\n    grid.changeGridPage(\"FIRST\");\r\n  } else {\r\n    grid.eof = 0;\r\n    grid.firstRecordOnPage = (\r\n      grid.pageSize * (page - 1) -\r\n      grid.pageSize\r\n    ).toString();\r\n    grid.changeGridPage(\"NEXT\");\r\n  }\r\n}\r\n","import { ChGridColumnSortDirection } from \"../grid/grid-column/ch-grid-column-types\";\r\nimport { GxGrid } from \"./genexus\";\r\n\r\nexport function gridRefresh(grid: GxGrid) {\r\n  grid.ParentObject.refreshGrid(grid.ControlName);\r\n}\r\n\r\nexport function gridSort(\r\n  grid: GxGrid,\r\n  columnId: string,\r\n  sortDirection: ChGridColumnSortDirection\r\n) {\r\n  const column = grid.getColumnByHtmlName(columnId);\r\n\r\n  grid.setSort(column.index, sortDirection !== \"desc\");\r\n}\r\n","import {\r\n  ChGridColumnFreeze,\r\n  ChGridColumnSortDirection\r\n} from \"../grid/grid-column/ch-grid-column-types\";\r\nimport { GxGrid } from \"./genexus\";\r\n\r\nexport class GridChameleonManagerState {\r\n  private static grid: GxGrid;\r\n  private static state: GridChameleonState;\r\n\r\n  static load(grid: GxGrid, state: GridChameleonState) {\r\n    this.grid = grid;\r\n    this.state = state ?? {};\r\n    this.state.Columns ??= [];\r\n\r\n    this.loadLocal();\r\n    this.apply();\r\n  }\r\n\r\n  static setColumnSort(\r\n    columnId: string,\r\n    sortDirection: ChGridColumnSortDirection\r\n  ): void {\r\n    this.state.SortColumnName = columnId;\r\n    this.state.SortDirection = sortDirection;\r\n  }\r\n\r\n  static setColumnHidden(columnId: string, hidden: boolean): void {\r\n    this.getColumn(columnId).Hidden = hidden;\r\n    this.saveLocal();\r\n  }\r\n\r\n  static setColumnSize(columnId: string, size: string): void {\r\n    this.getColumn(columnId).Size = size;\r\n    this.saveLocal();\r\n  }\r\n\r\n  static setColumnFreeze(columnId: string, freeze: ChGridColumnFreeze): void {\r\n    this.getColumn(columnId).Freeze = freeze;\r\n    this.saveLocal();\r\n  }\r\n\r\n  static setColumnOrder(columnId: string, order: number): void {\r\n    this.getColumn(columnId).Order = order;\r\n    this.saveLocal();\r\n  }\r\n\r\n  static setColumnFilterEqual(columnId: string, value: string): void {\r\n    this.getColumnFilter(columnId).Equal = value;\r\n    this.updateIsFiltering(columnId);\r\n  }\r\n\r\n  static setColumnFilterLess(columnId: string, value: string): void {\r\n    this.getColumnFilter(columnId).Less = value;\r\n    this.updateIsFiltering(columnId);\r\n  }\r\n\r\n  static setColumnFilterGreater(columnId: string, value: string): void {\r\n    this.getColumnFilter(columnId).Greater = value;\r\n    this.updateIsFiltering(columnId);\r\n  }\r\n\r\n  private static apply() {\r\n    const sortColumn = this.grid.getColumnByHtmlName(\r\n      (this.state.SortColumnName ?? \"\").toUpperCase()\r\n    );\r\n\r\n    if (sortColumn) {\r\n      sortColumn.SortDirection = this.state.SortDirection;\r\n    }\r\n\r\n    this.state.Columns?.forEach(stateColumn => {\r\n      const column = this.grid.getColumnByHtmlName(\r\n        stateColumn.Name.toUpperCase()\r\n      );\r\n\r\n      if (column) {\r\n        if (typeof stateColumn.Hidden === \"boolean\") {\r\n          column.Hidden = stateColumn.Hidden ? -1 : 0;\r\n        }\r\n\r\n        if (stateColumn.Size) {\r\n          column.Size = \"length\";\r\n          column.SizeLength = stateColumn.Size;\r\n        }\r\n\r\n        if (stateColumn.Order) {\r\n          column.order = stateColumn.Order;\r\n        }\r\n\r\n        column.filterEqual =\r\n          (stateColumn.Filter ?? {}).Equal ?? column.filterEqual;\r\n        column.filterLess =\r\n          (stateColumn.Filter ?? {}).Less ?? column.filterLess;\r\n        column.filterGreater =\r\n          (stateColumn.Filter ?? {}).Greater ?? column.filterGreater;\r\n\r\n        this.updateIsFiltering(column.htmlName);\r\n      }\r\n    });\r\n  }\r\n\r\n  private static loadLocal() {\r\n    this.grid.columns.forEach(column => {\r\n      const columnSettings = localStorage\r\n        .getItem(`${this.grid.ControlName}-${column.htmlName}`)\r\n        ?.split(\"|\");\r\n\r\n      if (columnSettings) {\r\n        if (columnSettings[0] !== \"\") {\r\n          this.getColumn(column.htmlName).Hidden = columnSettings[0] === \"true\";\r\n        }\r\n        if (columnSettings[1] !== \"\") {\r\n          this.getColumn(column.htmlName).Size = columnSettings[1];\r\n        }\r\n        if (columnSettings[2] !== \"\") {\r\n          this.getColumn(column.htmlName).Order = parseInt(columnSettings[2]);\r\n        }\r\n        if (columnSettings[3] !== \"\") {\r\n          this.getColumn(column.htmlName).Freeze = columnSettings[3];\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private static saveLocal() {\r\n    this.state.Columns.forEach(column => {\r\n      localStorage.setItem(\r\n        `${this.grid.ControlName}-${column.Name}`,\r\n        [column.Hidden, column.Size, column.Order, column.Freeze].join(\"|\")\r\n      );\r\n    });\r\n  }\r\n\r\n  private static getColumn(name: string): GridChameleonStateColumn {\r\n    let column = this.state.Columns.find(\r\n      column => column.Name.localeCompare(name) === 0\r\n    );\r\n\r\n    if (!column) {\r\n      column = {\r\n        Name: name\r\n      };\r\n      this.state.Columns.push(column);\r\n    }\r\n\r\n    return column;\r\n  }\r\n\r\n  private static getColumnFilter(name: string): GridChameleonStateColumnFilter {\r\n    const column = this.getColumn(name);\r\n\r\n    column.Filter ||= {};\r\n\r\n    return column.Filter;\r\n  }\r\n\r\n  private static updateIsFiltering(columnId: string) {\r\n    const column = this.grid.getColumnByHtmlName(columnId);\r\n\r\n    column.isFiltering = !!(\r\n      column.filterEqual ||\r\n      column.filterGreater ||\r\n      column.filterGreater\r\n    );\r\n  }\r\n}\r\n\r\nexport interface GridChameleonState {\r\n  SortColumnName?: string;\r\n  SortDirection?: \"asc\" | \"desc\";\r\n  Columns?: GridChameleonStateColumn[];\r\n}\r\n\r\nexport interface GridChameleonStateColumn {\r\n  Name: string;\r\n  Hidden?: boolean;\r\n  Size?: string;\r\n  Freeze?: string;\r\n  Order?: number;\r\n  Filter?: GridChameleonStateColumnFilter;\r\n}\r\n\r\nexport interface GridChameleonStateColumnFilter {\r\n  Equal?: string;\r\n  Less?: string;\r\n  Greater?: string;\r\n}\r\n","gx-grid-chameleon {\r\n  display: contents;\r\n}\r\n","import {\r\n  ChGridRowClickedEvent,\r\n  ChGridSelectionChangedEvent\r\n} from \"../grid/ch-grid-types\";\r\nimport { Component, Host, Listen, Prop, h, Watch } from \"@stencil/core\";\r\nimport {\r\n  paginationGoToFirstPage,\r\n  paginationGoToLastPage,\r\n  paginationGoToNextPage,\r\n  paginationGoToPage,\r\n  paginationGoToPreviousPage\r\n} from \"./gx-grid-chameleon-paginator\";\r\nimport { ChPaginatorNavigateType } from \"../paginator/paginator-navigate/ch-paginator-navigate-types\";\r\nimport { gridRefresh, gridSort } from \"./gx-grid-chameleon-actions\";\r\nimport {\r\n  ChGridColumnFreezeChangedEvent,\r\n  ChGridColumnHiddenChangedEvent,\r\n  ChGridColumnOrderChangedEvent,\r\n  ChGridColumnSizeChangedEvent,\r\n  ChGridColumnSortChangedEvent\r\n} from \"../grid/grid-column/ch-grid-column-types\";\r\nimport {\r\n  GridChameleonManagerState,\r\n  GridChameleonState\r\n} from \"./gx-grid-chameleon-state\";\r\nimport { Gx, GxControl, GxGrid, GxGridColumn, GxGridRow } from \"./genexus\";\r\nimport { GridChameleonColumnFilterChanged } from \"./gx-grid-column-filter/gx-grid-chameleon-column-filter\";\r\nimport { ChPaginatorPageNavigationRequestedEvent } from \"../paginator/ch-paginator\";\r\n\r\ndeclare let gx: Gx;\r\n\r\n@Component({\r\n  shadow: false,\r\n  styleUrl: \"gx-grid-chameleon.scss\",\r\n  tag: \"gx-grid-chameleon\"\r\n})\r\n// eslint-disable-next-line @stencil-community/required-prefix\r\nexport class GridChameleon {\r\n  /**\r\n   * The GxGrid instance representing the data to be displayed in the grid.\r\n   */\r\n  @Prop() readonly grid!: GxGrid;\r\n\r\n  /**\r\n   * The timestamp indicating the time when the grid was last updated.\r\n   */\r\n  @Prop({ mutable: true }) gridTimestamp: number;\r\n\r\n  /**\r\n   * The UI state of the Grid.\r\n   */\r\n  @Prop() readonly state: GridChameleonState;\r\n\r\n  @Watch(\"state\")\r\n  controlStateHandler() {\r\n    this.loadState();\r\n  }\r\n\r\n  componentWillLoad() {\r\n    this.loadState();\r\n  }\r\n\r\n  componentWillRender() {\r\n    this.defineColumnRender();\r\n  }\r\n\r\n  componentDidLoad() {\r\n    this.setCurrentRow();\r\n    this.notifyResizePopup();\r\n  }\r\n\r\n  @Listen(\"selectionChanged\")\r\n  selectionChangedHandler(eventInfo: CustomEvent<ChGridSelectionChangedEvent>) {\r\n    const rowIndex = this.getRowIndexByGxId(eventInfo.detail.rowsId[0]);\r\n\r\n    if (rowIndex >= 0) {\r\n      this.grid.execC2VFunctions();\r\n      this.grid.selectRow(rowIndex);\r\n    }\r\n  }\r\n\r\n  @Listen(\"rowClicked\")\r\n  cellClickedHandler(eventInfo: CustomEvent<ChGridRowClickedEvent>) {\r\n    const rowIndex = this.getRowIndexByGxId(eventInfo.detail.rowId);\r\n    const cellIndex = parseInt(eventInfo.detail.cellId);\r\n\r\n    if (rowIndex >= 0) {\r\n      this.grid.executeEvent(cellIndex, rowIndex);\r\n    }\r\n  }\r\n\r\n  @Listen(\"pageNavigationRequested\")\r\n  navigateClickedHandler(\r\n    eventInfo: CustomEvent<ChPaginatorPageNavigationRequestedEvent>\r\n  ) {\r\n    switch (eventInfo.detail.type) {\r\n      case \"first\":\r\n        paginationGoToFirstPage(this.grid);\r\n        break;\r\n      case \"previous\":\r\n        paginationGoToPreviousPage(this.grid);\r\n        break;\r\n      case \"next\":\r\n        paginationGoToNextPage(this.grid);\r\n        break;\r\n      case \"last\":\r\n        paginationGoToLastPage(this.grid);\r\n        break;\r\n      case \"goto\":\r\n        paginationGoToPage(this.grid, eventInfo.detail.page);\r\n        break;\r\n    }\r\n  }\r\n\r\n  @Listen(\"refreshClicked\")\r\n  refreshClickedHandler() {\r\n    gridRefresh(this.grid);\r\n  }\r\n\r\n  @Listen(\"columnHiddenChanged\")\r\n  columnHiddenChangedHandler(\r\n    eventInfo: CustomEvent<ChGridColumnHiddenChangedEvent>\r\n  ) {\r\n    GridChameleonManagerState.setColumnHidden(\r\n      eventInfo.detail.columnId,\r\n      eventInfo.detail.hidden\r\n    );\r\n  }\r\n\r\n  @Listen(\"columnSizeChanging\")\r\n  @Listen(\"columnSizeChanged\")\r\n  columnSizeChangedHandler(\r\n    eventInfo: CustomEvent<ChGridColumnSizeChangedEvent>\r\n  ) {\r\n    GridChameleonManagerState.setColumnSize(\r\n      eventInfo.detail.columnId,\r\n      eventInfo.detail.size\r\n    );\r\n  }\r\n\r\n  @Listen(\"columnFreezeChanged\")\r\n  columnFreezeChangedHandler(\r\n    eventInfo: CustomEvent<ChGridColumnFreezeChangedEvent>\r\n  ) {\r\n    GridChameleonManagerState.setColumnFreeze(\r\n      eventInfo.detail.columnId,\r\n      eventInfo.detail.freeze\r\n    );\r\n  }\r\n\r\n  @Listen(\"columnSortChanged\")\r\n  columnSortChangedHandler(\r\n    eventInfo: CustomEvent<ChGridColumnSortChangedEvent>\r\n  ) {\r\n    GridChameleonManagerState.setColumnSort(\r\n      eventInfo.detail.columnId,\r\n      eventInfo.detail.sortDirection\r\n    );\r\n\r\n    switch (this.grid.SortMode) {\r\n      case \"client\":\r\n        gridSort(\r\n          this.grid,\r\n          eventInfo.detail.columnId,\r\n          eventInfo.detail.sortDirection\r\n        );\r\n        this.gridTimestamp = Date.now();\r\n        break;\r\n      case \"server\":\r\n        gridRefresh(this.grid);\r\n        break;\r\n    }\r\n  }\r\n\r\n  @Listen(\"columnOrderChanged\")\r\n  columnOrderChangedHandler(\r\n    eventInfo: CustomEvent<ChGridColumnOrderChangedEvent>\r\n  ) {\r\n    GridChameleonManagerState.setColumnOrder(\r\n      eventInfo.detail.columnId,\r\n      eventInfo.detail.order\r\n    );\r\n  }\r\n\r\n  @Listen(\"columnSettingsChanged\")\r\n  columnFilterChangedHandler(\r\n    eventInfo: CustomEvent<GridChameleonColumnFilterChanged>\r\n  ) {\r\n    const column = eventInfo.detail.column;\r\n\r\n    column.filterEqual = eventInfo.detail.equal ?? \"\";\r\n    column.filterLess = eventInfo.detail.less ?? \"\";\r\n    column.filterGreater = eventInfo.detail.greater ?? \"\";\r\n\r\n    GridChameleonManagerState.setColumnFilterEqual(\r\n      column.htmlName,\r\n      column.filterEqual\r\n    );\r\n    GridChameleonManagerState.setColumnFilterLess(\r\n      column.htmlName,\r\n      column.filterLess\r\n    );\r\n    GridChameleonManagerState.setColumnFilterGreater(\r\n      column.htmlName,\r\n      column.filterGreater\r\n    );\r\n\r\n    gridRefresh(this.grid);\r\n  }\r\n\r\n  private getColumnSize(column: GxGridColumn): string {\r\n    let size: string;\r\n\r\n    switch (column.Size) {\r\n      case \"auto\":\r\n        size = \"auto\";\r\n        break;\r\n      case \"css\":\r\n        size = `var(--${column.SizeVariableName}, min-content)`;\r\n        break;\r\n      case \"length\":\r\n        size = column.SizeLength;\r\n        break;\r\n      case \"max\":\r\n        size = \"max-content\";\r\n        break;\r\n      case \"min\":\r\n        size = \"min-content\";\r\n        break;\r\n      case \"minmax\":\r\n        size = `minmax(${column.SizeMinLength || \"min-content\"}, ${\r\n          column.SizeMaxLength || \"auto\"\r\n        })`;\r\n        break;\r\n      default:\r\n        size = \"min-content\";\r\n        break;\r\n    }\r\n\r\n    return size || \"min-content\";\r\n  }\r\n\r\n  private defineColumnRender(): void {\r\n    const properties = this.grid.properties;\r\n\r\n    this.grid.columns.forEach((column, i) => {\r\n      column.render =\r\n        (properties.length === 0 && column.visible) ||\r\n        properties.some(row => row[i].visible);\r\n    });\r\n  }\r\n\r\n  private getRowIndexByGxId(rowId: string): number {\r\n    return this.grid.rows.findIndex(row => row.gxId === rowId);\r\n  }\r\n\r\n  private notifyResizePopup() {\r\n    if (gx.popup.ispopup()) {\r\n      gx.fx.obs.notify(\"gx.onafterevent\");\r\n    }\r\n  }\r\n\r\n  private setCurrentRow() {\r\n    const firstRow = this.grid.rows[0];\r\n\r\n    if (firstRow && !gx.fn.currentGridRowImpl(this.grid.gxId)) {\r\n      gx.fn.setCurrentGridRow(this.grid.gxId, firstRow.gxId);\r\n    }\r\n  }\r\n\r\n  private loadState() {\r\n    GridChameleonManagerState.load(this.grid, this.state);\r\n  }\r\n\r\n  private renderTitle() {\r\n    return <h1 slot=\"header\">{this.grid.header}</h1>;\r\n  }\r\n\r\n  private renderActionbar(position: \"header\" | \"footer\", className: string) {\r\n    const refresh = this.grid.ActionRefreshPosition === position,\r\n      settings = this.grid.ActionSettingsPosition === position;\r\n\r\n    if (refresh || settings) {\r\n      return (\r\n        <ch-grid-actionbar slot={position} class={className}>\r\n          {refresh && this.renderActionRefresh()}\r\n          {settings && this.renderActionSettings()}\r\n        </ch-grid-actionbar>\r\n      );\r\n    }\r\n  }\r\n\r\n  private renderActionRefresh() {\r\n    return (\r\n      <ch-grid-action-refresh\r\n        class={this.grid.ActionRefreshClass}\r\n        title={\r\n          this.grid.ActionRefreshTextPosition === \"title\"\r\n            ? gx.getMessage(\"GX_BtnRefresh\")\r\n            : \"\"\r\n        }\r\n      >\r\n        {this.grid.ActionRefreshTextPosition === \"text\"\r\n          ? gx.getMessage(\"GX_BtnRefresh\")\r\n          : \"\"}\r\n      </ch-grid-action-refresh>\r\n    );\r\n  }\r\n\r\n  private renderActionSettings() {\r\n    return (\r\n      <ch-grid-action-settings\r\n        class={this.grid.ActionSettingsClass}\r\n        title={\r\n          this.grid.ActionSettingsTextPosition === \"title\"\r\n            ? gx.getMessage(\"GXM_Settings\")\r\n            : \"\"\r\n        }\r\n      >\r\n        {this.grid.ActionSettingsTextPosition === \"text\"\r\n          ? gx.getMessage(\"GXM_Settings\")\r\n          : \"\"}\r\n      </ch-grid-action-settings>\r\n    );\r\n  }\r\n\r\n  private renderColumns() {\r\n    return (\r\n      <ch-grid-columnset class={this.grid.ColumnsetClass}>\r\n        {this.grid.columns.map(column => {\r\n          if (gx.lang.gxBoolean(column.render)) {\r\n            return (\r\n              <ch-grid-column\r\n                key={column.htmlName}\r\n                columnId={column.htmlName}\r\n                columnIconUrl={column.Icon}\r\n                columnName={column.title}\r\n                columnNamePosition={column.NamePosition}\r\n                size={this.getColumnSize(column)}\r\n                order={column.order ? column.order : null}\r\n                displayObserverClass={column.gxColumnClass}\r\n                class={`${this.grid.ColumnClass} ${column.HeaderClass} ${\r\n                  column.isFiltering ? \"grid-column-filtering\" : \"\"\r\n                }`}\r\n                hidden={column.Hidden === -1}\r\n                hideable={column.Hideable === -1}\r\n                resizable={column.Resizeable === -1}\r\n                sortable={column.Sortable === -1}\r\n                settingable={column.Filterable === -1}\r\n                sortDirection={column.SortDirection}\r\n              >\r\n                {column.Filterable === -1 && this.renderColumnFilter(column)}\r\n              </ch-grid-column>\r\n            );\r\n          }\r\n        })}\r\n      </ch-grid-columnset>\r\n    );\r\n  }\r\n\r\n  private renderColumnFilter(column: GxGridColumn) {\r\n    return (\r\n      <gx-grid-chameleon-column-filter\r\n        key={column.htmlName}\r\n        class={this.grid.ColumnFilterClass}\r\n        column={column}\r\n        equal={column.filterEqual}\r\n        less={column.filterLess}\r\n        greater={column.filterGreater}\r\n        buttonResetText={this.grid.FilterButtonResetText}\r\n        buttonApplyText={this.grid.FilterButtonApplyText}\r\n        slot=\"settings\"\r\n      ></gx-grid-chameleon-column-filter>\r\n    );\r\n  }\r\n\r\n  private renderRows() {\r\n    return this.grid.rows.map((row, i) => {\r\n      const rowEvenClasses = `${this.grid.RowClass} ${this.grid.RowEvenClass}`;\r\n      const rowOddClasses = `${this.grid.RowClass} ${this.grid.RowOddClass}`;\r\n\r\n      return (\r\n        <ch-grid-row\r\n          key={row.gxId}\r\n          rowid={row.gxId}\r\n          class={i % 2 === 0 ? rowEvenClasses : rowOddClasses}\r\n        >\r\n          {this.renderCells(row)}\r\n        </ch-grid-row>\r\n      );\r\n    });\r\n  }\r\n\r\n  private renderCells(row: GxGridRow) {\r\n    return row.gxProps.map((cellControlProperties, i) => {\r\n      const column = this.grid.columns[i];\r\n\r\n      if (gx.lang.gxBoolean(column.render)) {\r\n        return (\r\n          <ch-grid-cell\r\n            key={cellControlProperties[0]}\r\n            class={this.grid.CellClass}\r\n            cellid={i}\r\n            innerHTML={this.renderControl(\r\n              column.gxControl,\r\n              cellControlProperties\r\n            )}\r\n          ></ch-grid-cell>\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  private renderControl(control: GxControl, props: any): string {\r\n    // eslint-disable-next-line prefer-spread\r\n    control.setProperties.apply(control, props);\r\n    return control.getHtml();\r\n  }\r\n\r\n  private renderPaginator() {\r\n    const hasRecordCount =\r\n      !!this.grid.ParentObject[`sub${this.grid.ControlName}_Recordcount`];\r\n    const recordCount =\r\n      this.grid.ParentObject[`sub${this.grid.ControlName}_Recordcount`] ?? 0;\r\n    const hasNextPage = !this.grid.isLastPage();\r\n    const activePage = Math.ceil(\r\n      (parseInt(this.grid.firstRecordOnPage) + 1) / this.grid.pageSize\r\n    );\r\n    const totalPages = Math.max(1, Math.ceil(recordCount / this.grid.pageSize));\r\n\r\n    return (\r\n      <ch-paginator\r\n        has-next-page={hasRecordCount ? null : hasNextPage}\r\n        active-page={activePage}\r\n        total-pages={hasRecordCount ? totalPages : -1}\r\n        class={this.grid.pagingBarClass}\r\n        slot=\"footer\"\r\n      >\r\n        {this.renderPaginatorNavigate(\r\n          \"first\",\r\n          this.grid.pagingButtonFirstClass,\r\n          gx.getMessage(\"GXM_first\")\r\n        )}\r\n        {this.renderPaginatorNavigate(\r\n          \"previous\",\r\n          this.grid.pagingButtonPreviousClass,\r\n          gx.getMessage(\"GXM_previous\")\r\n        )}\r\n        {this.grid.PaginatorPagesShow && (\r\n          <ch-paginator-pages\r\n            maxSize={this.grid.PaginatorPagesMaxSize}\r\n          ></ch-paginator-pages>\r\n        )}\r\n        {this.renderPaginatorNavigate(\r\n          \"next\",\r\n          this.grid.pagingButtonNextClass,\r\n          gx.getMessage(\"GXM_next\")\r\n        )}\r\n        {this.renderPaginatorNavigate(\r\n          \"last\",\r\n          this.grid.pagingButtonLastClass,\r\n          gx.getMessage(\"GXM_last\")\r\n        )}\r\n      </ch-paginator>\r\n    );\r\n  }\r\n\r\n  private renderPaginatorNavigate(\r\n    type: ChPaginatorNavigateType,\r\n    className: string,\r\n    text: string\r\n  ) {\r\n    const textPosition = this.grid.PaginatorNavigationButtonTextPosition;\r\n\r\n    return (\r\n      <ch-paginator-navigate\r\n        type={type}\r\n        class={className}\r\n        title={textPosition === \"title\" ? text : \"\"}\r\n      >\r\n        {textPosition === \"text\" ? text : \"\"}\r\n      </ch-paginator-navigate>\r\n    );\r\n  }\r\n\r\n  private renderPaginationInfo() {\r\n    const recordCount =\r\n      this.grid.ParentObject[`sub${this.grid.ControlName}_Recordcount`] ?? 0;\r\n    let mask = this.grid.PaginatorInfoEmptyTextMask;\r\n    let recordStart = 0;\r\n    let recordEnd = 0;\r\n\r\n    if (recordCount > 0) {\r\n      mask = this.grid.PaginatorInfoTextMask;\r\n      recordStart = parseInt(this.grid.firstRecordOnPage) + 1;\r\n      recordEnd = Math.min(recordStart + this.grid.pageSize - 1, recordCount);\r\n    }\r\n\r\n    const replacements = {\r\n      \"record-count\": recordCount,\r\n      \"record-start\": recordStart,\r\n      \"record-end\": recordEnd\r\n    };\r\n    const text = mask.replace(/\\{([^}]+)\\}/g, (_match, capture) => {\r\n      return replacements[capture] ?? capture;\r\n    });\r\n\r\n    return (\r\n      <div class={this.grid.PaginatorInfoClass} slot=\"footer\">\r\n        {text}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <ch-grid\r\n          class={this.grid.Class}\r\n          rowSelectionMode={this.grid.gxAllowSelection ? \"single\" : \"none\"}\r\n          rowSelectedClass={this.grid.RowSelectedClass.trim()}\r\n          rowHighlightedClass={this.grid.RowHighlightedClass.trim()}\r\n        >\r\n          {this.grid.header && this.renderTitle()}\r\n          {this.renderActionbar(\"header\", this.grid.ActionbarHeaderClass)}\r\n          {this.renderActionbar(\"footer\", this.grid.ActionbarFooterClass)}\r\n          {this.renderColumns()}\r\n          {this.renderRows()}\r\n          {this.grid.PaginatorShow &&\r\n            this.grid.PaginatorInfoShow &&\r\n            this.grid.pageSize > 0 &&\r\n            this.renderPaginationInfo()}\r\n          {this.grid.PaginatorShow &&\r\n            this.grid.pageSize > 0 &&\r\n            this.renderPaginator()}\r\n        </ch-grid>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}