{"version":3,"names":["e","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","n","defaultToken","tokenPostfix","keywords","symbols","escapes","integersuffix","floatsuffix","tokenizer","root","cases","token","include","next","whitespace","comment","string","litstring","exports","conf","language"],"sources":["src/components/code-editor/monaco/output/fsharp-CQsoCURP.js"],"sourcesContent":["var e = { comments: { lineComment: \"//\", blockComment: [\"(*\", \"*)\"] }, brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]], autoClosingPairs: [{ open: \"{\", close: \"}\" }, { open: \"[\", close: \"]\" }, { open: \"(\", close: \")\" }, { open: '\"', close: '\"' }], surroundingPairs: [{ open: \"{\", close: \"}\" }, { open: \"[\", close: \"]\" }, { open: \"(\", close: \")\" }, { open: '\"', close: '\"' }, { open: \"'\", close: \"'\" }], folding: { markers: { start: new RegExp(\"^\\\\s*//\\\\s*#region\\\\b|^\\\\s*\\\\(\\\\*\\\\s*#region(.*)\\\\*\\\\)\"), end: new RegExp(\"^\\\\s*//\\\\s*#endregion\\\\b|^\\\\s*\\\\(\\\\*\\\\s*#endregion\\\\s*\\\\*\\\\)\") } } }, n = { defaultToken: \"\", tokenPostfix: \".fs\", keywords: [\"abstract\", \"and\", \"atomic\", \"as\", \"assert\", \"asr\", \"base\", \"begin\", \"break\", \"checked\", \"component\", \"const\", \"constraint\", \"constructor\", \"continue\", \"class\", \"default\", \"delegate\", \"do\", \"done\", \"downcast\", \"downto\", \"elif\", \"else\", \"end\", \"exception\", \"eager\", \"event\", \"external\", \"extern\", \"false\", \"finally\", \"for\", \"fun\", \"function\", \"fixed\", \"functor\", \"global\", \"if\", \"in\", \"include\", \"inherit\", \"inline\", \"interface\", \"internal\", \"land\", \"lor\", \"lsl\", \"lsr\", \"lxor\", \"lazy\", \"let\", \"match\", \"member\", \"mod\", \"module\", \"mutable\", \"namespace\", \"method\", \"mixin\", \"new\", \"not\", \"null\", \"of\", \"open\", \"or\", \"object\", \"override\", \"private\", \"parallel\", \"process\", \"protected\", \"pure\", \"public\", \"rec\", \"return\", \"static\", \"sealed\", \"struct\", \"sig\", \"then\", \"to\", \"true\", \"tailcall\", \"trait\", \"try\", \"type\", \"upcast\", \"use\", \"val\", \"void\", \"virtual\", \"volatile\", \"when\", \"while\", \"with\", \"yield\"], symbols: /[=><!~?:&|+\\-*\\^%;\\.,\\/]+/, escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/, integersuffix: /[uU]?[yslnLI]?/, floatsuffix: /[fFmM]?/, tokenizer: { root: [[/[a-zA-Z_]\\w*/, { cases: { \"@keywords\": { token: \"keyword.$0\" }, \"@default\": \"identifier\" } }], { include: \"@whitespace\" }, [/\\[<.*>\\]/, \"annotation\"], [/^#(if|else|endif)/, \"keyword\"], [/[{}()\\[\\]]/, \"@brackets\"], [/[<>](?!@symbols)/, \"@brackets\"], [/@symbols/, \"delimiter\"], [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, \"number.float\"], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, \"number.float\"], [/0x[0-9a-fA-F]+LF/, \"number.float\"], [/0x[0-9a-fA-F]+(@integersuffix)/, \"number.hex\"], [/0b[0-1]+(@integersuffix)/, \"number.bin\"], [/\\d+(@integersuffix)/, \"number\"], [/[;,.]/, \"delimiter\"], [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"], [/\"\"\"/, \"string\", '@string.\"\"\"'], [/\"/, \"string\", '@string.\"'], [/\\@\"/, { token: \"string.quote\", next: \"@litstring\" }], [/'[^\\\\']'B?/, \"string\"], [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]], [/'/, \"string.invalid\"]], whitespace: [[/[ \\t\\r\\n]+/, \"\"], [/\\(\\*(?!\\))/, \"comment\", \"@comment\"], [/\\/\\/.*$/, \"comment\"]], comment: [[/[^*(]+/, \"comment\"], [/\\*\\)/, \"comment\", \"@pop\"], [/\\*/, \"comment\"], [/\\(\\*\\)/, \"comment\"], [/\\(/, \"comment\"]], string: [[/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/(\"\"\"|\"B?)/, { cases: { \"$#==$S2\": { token: \"string\", next: \"@pop\" }, \"@default\": \"string\" } }]], litstring: [[/[^\"]+/, \"string\"], [/\"\"/, \"string.escape\"], [/\"/, { token: \"string.quote\", next: \"@pop\" }]] } };\nexport {\n  e as conf,\n  n as language\n};\n"],"mappings":"uEAAG,IAACA,EAAI,CAAEC,SAAU,CAAEC,YAAa,KAAMC,aAAc,CAAC,KAAM,OAASC,SAAU,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,MAAOC,iBAAkB,CAAC,CAAEC,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,MAAQC,iBAAkB,CAAC,CAAEF,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,MAAQE,QAAS,CAAEC,QAAS,CAAEC,MAAO,IAAIC,OAAO,0DAA2DC,IAAK,IAAID,OAAO,mEAAuEE,EAAI,CAAEC,aAAc,GAAIC,aAAc,MAAOC,SAAU,CAAC,WAAY,MAAO,SAAU,KAAM,SAAU,MAAO,OAAQ,QAAS,QAAS,UAAW,YAAa,QAAS,aAAc,cAAe,WAAY,QAAS,UAAW,WAAY,KAAM,OAAQ,WAAY,SAAU,OAAQ,OAAQ,MAAO,YAAa,QAAS,QAAS,WAAY,SAAU,QAAS,UAAW,MAAO,MAAO,WAAY,QAAS,UAAW,SAAU,KAAM,KAAM,UAAW,UAAW,SAAU,YAAa,WAAY,OAAQ,MAAO,MAAO,MAAO,OAAQ,OAAQ,MAAO,QAAS,SAAU,MAAO,SAAU,UAAW,YAAa,SAAU,QAAS,MAAO,MAAO,OAAQ,KAAM,OAAQ,KAAM,SAAU,WAAY,UAAW,WAAY,UAAW,YAAa,OAAQ,SAAU,MAAO,SAAU,SAAU,SAAU,SAAU,MAAO,OAAQ,KAAM,OAAQ,WAAY,QAAS,MAAO,OAAQ,SAAU,MAAO,MAAO,OAAQ,UAAW,WAAY,OAAQ,QAAS,OAAQ,SAAUC,QAAS,4BAA6BC,QAAS,wEAAyEC,cAAe,iBAAkBC,YAAa,UAAWC,UAAW,CAAEC,KAAM,CAAC,CAAC,eAAgB,CAAEC,MAAO,CAAE,YAAa,CAAEC,MAAO,cAAgB,WAAY,gBAAmB,CAAEC,QAAS,eAAiB,CAAC,WAAY,cAAe,CAAC,oBAAqB,WAAY,CAAC,aAAc,aAAc,CAAC,mBAAoB,aAAc,CAAC,WAAY,aAAc,CAAC,uCAAwC,gBAAiB,CAAC,yCAA0C,gBAAiB,CAAC,mBAAoB,gBAAiB,CAAC,iCAAkC,cAAe,CAAC,2BAA4B,cAAe,CAAC,sBAAuB,UAAW,CAAC,QAAS,aAAc,CAAC,kBAAmB,kBAAmB,CAAC,MAAO,SAAU,eAAgB,CAAC,IAAK,SAAU,aAAc,CAAC,MAAO,CAAED,MAAO,eAAgBE,KAAM,eAAiB,CAAC,aAAc,UAAW,CAAC,mBAAoB,CAAC,SAAU,gBAAiB,WAAY,CAAC,IAAK,mBAAoBC,WAAY,CAAC,CAAC,aAAc,IAAK,CAAC,aAAc,UAAW,YAAa,CAAC,UAAW,YAAaC,QAAS,CAAC,CAAC,SAAU,WAAY,CAAC,OAAQ,UAAW,QAAS,CAAC,KAAM,WAAY,CAAC,SAAU,WAAY,CAAC,KAAM,YAAaC,OAAQ,CAAC,CAAC,UAAW,UAAW,CAAC,WAAY,iBAAkB,CAAC,MAAO,yBAA0B,CAAC,YAAa,CAAEN,MAAO,CAAE,UAAW,CAAEC,MAAO,SAAUE,KAAM,QAAU,WAAY,aAAgBI,UAAW,CAAC,CAAC,QAAS,UAAW,CAAC,KAAM,iBAAkB,CAAC,IAAK,CAAEN,MAAO,eAAgBE,KAAM,YAAYK,EAAA,CAAAC,KAAAjC,EAAAkC,SAAApB,G"}