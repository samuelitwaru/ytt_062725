{"version":3,"names":["chTreeCss","ChTreeStyle0","ChTree","ulTree","componentWillLoad","parentElementTagName","this","el","parentElement","tagName","nestedTree","parentTreeTagName","mainTree","liItemClickedHandler","chTreeItems","querySelectorAll","forEach","chTreeItem","selected","toggleIconClickedHandler","treeItems","treeItem","updateTreeVerticalLineHeight","getChecked","allTreeItems","checkedTreeItems","length","checked","push","id","render","h","class","tree","ref"],"sources":["src/deprecated-components/tree/ch-tree.scss?tag=ch-tree&encapsulation=shadow","src/deprecated-components/tree/ch-tree.tsx"],"sourcesContent":[":host {\r\n\r\n    display: flex;\r\n    ul {\r\n      margin: 0;\r\n      padding-left: 0;\r\n      width: 100%;\r\n    }\r\n    .nested-tree {\r\n      width: 100%;\r\n    }\r\n  }\r\n  :host(.main-tree) {\r\n    overflow: hidden;\r\n  }\r\n  .main-tree-container {\r\n    position: relative;\r\n    width: 100%;\r\n  }","import {\r\n  Component,\r\n  Element,\r\n  State,\r\n  h,\r\n  Prop,\r\n  Listen,\r\n  Method\r\n} from \"@stencil/core\";\r\nimport { ChTreeItem } from \"../tree-item/ch-tree-item\";\r\n\r\n@Component({\r\n  tag: \"ch-tree\",\r\n  styleUrl: \"ch-tree.scss\",\r\n  shadow: true\r\n})\r\nexport class ChTree {\r\n  @Element() el: HTMLChTreeElement;\r\n  ulTree!: HTMLElement;\r\n\r\n  // PROPS\r\n  /**\r\n   * Set this attribute if you want all this tree tree-items to have a checkbox\r\n   */\r\n  @Prop() readonly checkbox: boolean = false;\r\n\r\n  /**\r\n   * Set this attribute if you want all this tree tree-items to have the checkbox checked\r\n   */\r\n  @Prop() readonly checked: boolean = false;\r\n\r\n  /**\r\n   * Set this attribute if you want all the childen item's checkboxes to be checked when the parent item checkbox is checked, or to be unchecked when the parent item checkbox is unckecked.\r\n   */\r\n  @Prop({ mutable: true }) toggleCheckboxes = false;\r\n\r\n  // STATE\r\n  @State() nestedTree = false;\r\n  @State() mainTree = false;\r\n\r\n  componentWillLoad() {\r\n    // Check if this tree is nested\r\n    const parentElementTagName = this.el.parentElement.tagName;\r\n    if (parentElementTagName === \"CH-TREE-ITEM\") {\r\n      this.nestedTree = true;\r\n    }\r\n    // if this is the main tree...\r\n    const parentTreeTagName = this.el.parentElement.tagName;\r\n    if (parentTreeTagName !== \"CH-TREE-ITEM\") {\r\n      this.mainTree = true;\r\n    }\r\n  }\r\n\r\n  @Listen(\"liItemClicked\")\r\n  liItemClickedHandler() {\r\n    // Remove 'selected' state from previous selected item\r\n    const chTreeItems = this.el.querySelectorAll(\"ch-tree-item\");\r\n    chTreeItems.forEach(chTreeItem => {\r\n      (chTreeItem as unknown as ChTreeItem).selected = false;\r\n    });\r\n  }\r\n\r\n  @Listen(\"toggleIconClicked\")\r\n  toggleIconClickedHandler() {\r\n    // Update not leaf tree items vertical line height\r\n    const treeItems = this.el.querySelectorAll(\"ch-tree-item.not-leaf\");\r\n    treeItems.forEach(treeItem => {\r\n      (treeItem as unknown as ChTreeItem).updateTreeVerticalLineHeight();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @returns an array of the ch-tree-items that are checked. Each array item is an object with \"id\" and \"innerText\".\r\n   */\r\n  @Method()\r\n  async getChecked(): Promise<checkedChTreeItem[]> {\r\n    const allTreeItems = this.el.querySelectorAll(\"ch-tree-item\");\r\n    const checkedTreeItems: checkedChTreeItem[] = [];\r\n    if (allTreeItems.length) {\r\n      allTreeItems.forEach(treeItem => {\r\n        if (treeItem.checked) {\r\n          checkedTreeItems.push({ id: treeItem.id });\r\n        }\r\n      });\r\n    }\r\n    return checkedTreeItems;\r\n  }\r\n\r\n  render() {\r\n    return this.mainTree ? (\r\n      <div\r\n        class={{\r\n          tree: true,\r\n          \"main-tree\": true\r\n        }}\r\n      >\r\n        <div class=\"main-tree-container\">\r\n          <ul ref={el => (this.ulTree = el as HTMLElement)}>\r\n            <slot></slot>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <div\r\n        class={{\r\n          tree: true,\r\n          \"nested-tree\": true\r\n        }}\r\n      >\r\n        <ul ref={el => (this.ulTree = el as HTMLElement)}>\r\n          <slot></slot>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport type checkedChTreeItem = {\r\n  id: string;\r\n};\r\n"],"mappings":"kDAAA,MAAMA,EAAY,wMAClB,MAAAC,EAAeD,E,MCeFE,EAAM,M,uCAQoB,M,aAKD,M,sBAKQ,M,gBAGtB,M,cACF,K,yBApBpBC,OAsBA,iBAAAC,GAEE,MAAMC,EAAuBC,KAAKC,GAAGC,cAAcC,QACnD,GAAIJ,IAAyB,eAAgB,CAC3CC,KAAKI,WAAa,I,CAGpB,MAAMC,EAAoBL,KAAKC,GAAGC,cAAcC,QAChD,GAAIE,IAAsB,eAAgB,CACxCL,KAAKM,SAAW,I,EAKpB,oBAAAC,GAEE,MAAMC,EAAcR,KAAKC,GAAGQ,iBAAiB,gBAC7CD,EAAYE,SAAQC,IACjBA,EAAqCC,SAAW,KAAK,G,CAK1D,wBAAAC,GAEE,MAAMC,EAAYd,KAAKC,GAAGQ,iBAAiB,yBAC3CK,EAAUJ,SAAQK,IACfA,EAAmCC,8BAA8B,G,CAQtE,gBAAMC,GACJ,MAAMC,EAAelB,KAAKC,GAAGQ,iBAAiB,gBAC9C,MAAMU,EAAwC,GAC9C,GAAID,EAAaE,OAAQ,CACvBF,EAAaR,SAAQK,IACnB,GAAIA,EAASM,QAAS,CACpBF,EAAiBG,KAAK,CAAEC,GAAIR,EAASQ,I,KAI3C,OAAOJ,C,CAGT,MAAAK,GACE,OAAOxB,KAAKM,SACVmB,EAAA,OACEC,MAAO,CACLC,KAAM,KACN,YAAa,OAGfF,EAAA,OAAKC,MAAM,uBACTD,EAAA,MAAIG,IAAK3B,GAAOD,KAAKH,OAASI,GAC5BwB,EAAA,gBAKNA,EAAA,OACEC,MAAO,CACLC,KAAM,KACN,cAAe,OAGjBF,EAAA,MAAIG,IAAK3B,GAAOD,KAAKH,OAASI,GAC5BwB,EAAA,c"}