{"version":3,"names":["e","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","t","defaultToken","tokenPostfix","token","keywords","operators","symbols","escapes","integersuffix","floatsuffix","encoding","tokenizer","root","next","cases","include","whitespace","comment","linecomment","doccomment","string","raw","annotation"],"sources":["src/components/code-editor/monaco/output/cpp-Dv-XAjCK.js"],"sourcesContent":["var e = { comments: { lineComment: \"//\", blockComment: [\"/*\", \"*/\"] }, brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]], autoClosingPairs: [{ open: \"[\", close: \"]\" }, { open: \"{\", close: \"}\" }, { open: \"(\", close: \")\" }, { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] }, { open: '\"', close: '\"', notIn: [\"string\"] }], surroundingPairs: [{ open: \"{\", close: \"}\" }, { open: \"[\", close: \"]\" }, { open: \"(\", close: \")\" }, { open: '\"', close: '\"' }, { open: \"'\", close: \"'\" }], folding: { markers: { start: new RegExp(\"^\\\\s*#pragma\\\\s+region\\\\b\"), end: new RegExp(\"^\\\\s*#pragma\\\\s+endregion\\\\b\") } } }, t = { defaultToken: \"\", tokenPostfix: \".cpp\", brackets: [{ token: \"delimiter.curly\", open: \"{\", close: \"}\" }, { token: \"delimiter.parenthesis\", open: \"(\", close: \")\" }, { token: \"delimiter.square\", open: \"[\", close: \"]\" }, { token: \"delimiter.angle\", open: \"<\", close: \">\" }], keywords: [\"abstract\", \"amp\", \"array\", \"auto\", \"bool\", \"break\", \"case\", \"catch\", \"char\", \"class\", \"const\", \"constexpr\", \"const_cast\", \"continue\", \"cpu\", \"decltype\", \"default\", \"delegate\", \"delete\", \"do\", \"double\", \"dynamic_cast\", \"each\", \"else\", \"enum\", \"event\", \"explicit\", \"export\", \"extern\", \"false\", \"final\", \"finally\", \"float\", \"for\", \"friend\", \"gcnew\", \"generic\", \"goto\", \"if\", \"in\", \"initonly\", \"inline\", \"int\", \"interface\", \"interior_ptr\", \"internal\", \"literal\", \"long\", \"mutable\", \"namespace\", \"new\", \"noexcept\", \"nullptr\", \"__nullptr\", \"operator\", \"override\", \"partial\", \"pascal\", \"pin_ptr\", \"private\", \"property\", \"protected\", \"public\", \"ref\", \"register\", \"reinterpret_cast\", \"restrict\", \"return\", \"safe_cast\", \"sealed\", \"short\", \"signed\", \"sizeof\", \"static\", \"static_assert\", \"static_cast\", \"struct\", \"switch\", \"template\", \"this\", \"thread_local\", \"throw\", \"tile_static\", \"true\", \"try\", \"typedef\", \"typeid\", \"typename\", \"union\", \"unsigned\", \"using\", \"virtual\", \"void\", \"volatile\", \"wchar_t\", \"where\", \"while\", \"_asm\", \"_based\", \"_cdecl\", \"_declspec\", \"_fastcall\", \"_if_exists\", \"_if_not_exists\", \"_inline\", \"_multiple_inheritance\", \"_pascal\", \"_single_inheritance\", \"_stdcall\", \"_virtual_inheritance\", \"_w64\", \"__abstract\", \"__alignof\", \"__asm\", \"__assume\", \"__based\", \"__box\", \"__builtin_alignof\", \"__cdecl\", \"__clrcall\", \"__declspec\", \"__delegate\", \"__event\", \"__except\", \"__fastcall\", \"__finally\", \"__forceinline\", \"__gc\", \"__hook\", \"__identifier\", \"__if_exists\", \"__if_not_exists\", \"__inline\", \"__int128\", \"__int16\", \"__int32\", \"__int64\", \"__int8\", \"__interface\", \"__leave\", \"__m128\", \"__m128d\", \"__m128i\", \"__m256\", \"__m256d\", \"__m256i\", \"__m512\", \"__m512d\", \"__m512i\", \"__m64\", \"__multiple_inheritance\", \"__newslot\", \"__nogc\", \"__noop\", \"__nounwind\", \"__novtordisp\", \"__pascal\", \"__pin\", \"__pragma\", \"__property\", \"__ptr32\", \"__ptr64\", \"__raise\", \"__restrict\", \"__resume\", \"__sealed\", \"__single_inheritance\", \"__stdcall\", \"__super\", \"__thiscall\", \"__try\", \"__try_cast\", \"__typeof\", \"__unaligned\", \"__unhook\", \"__uuidof\", \"__value\", \"__virtual_inheritance\", \"__w64\", \"__wchar_t\"], operators: [\"=\", \">\", \"<\", \"!\", \"~\", \"?\", \":\", \"==\", \"<=\", \">=\", \"!=\", \"&&\", \"||\", \"++\", \"--\", \"+\", \"-\", \"*\", \"/\", \"&\", \"|\", \"^\", \"%\", \"<<\", \">>\", \"+=\", \"-=\", \"*=\", \"/=\", \"&=\", \"|=\", \"^=\", \"%=\", \"<<=\", \">>=\"], symbols: /[=><!~?:&|+\\-*\\/\\^%]+/, escapes: /\\\\(?:[0abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/, integersuffix: /([uU](ll|LL|l|L)|(ll|LL|l|L)?[uU]?)/, floatsuffix: /[fFlL]?/, encoding: /u|u8|U|L/, tokenizer: { root: [[/@encoding?R\\\"(?:([^ ()\\\\\\t]*))\\(/, { token: \"string.raw.begin\", next: \"@raw.$1\" }], [/[a-zA-Z_]\\w*/, { cases: { \"@keywords\": { token: \"keyword.$0\" }, \"@default\": \"identifier\" } }], [/^\\s*#\\s*include/, { token: \"keyword.directive.include\", next: \"@include\" }], [/^\\s*#\\s*\\w+/, \"keyword.directive\"], { include: \"@whitespace\" }, [/\\[\\s*\\[/, { token: \"annotation\", next: \"@annotation\" }], [/[{}()<>\\[\\]]/, \"@brackets\"], [/@symbols/, { cases: { \"@operators\": \"delimiter\", \"@default\": \"\" } }], [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, \"number.float\"], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, \"number.float\"], [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, \"number.hex\"], [/0[0-7']*[0-7](@integersuffix)/, \"number.octal\"], [/0[bB][0-1']*[0-1](@integersuffix)/, \"number.binary\"], [/\\d[\\d']*\\d(@integersuffix)/, \"number\"], [/\\d(@integersuffix)/, \"number\"], [/[;,.]/, \"delimiter\"], [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"], [/\"/, \"string\", \"@string\"], [/'[^\\\\']'/, \"string\"], [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]], [/'/, \"string.invalid\"]], whitespace: [[/[ \\t\\r\\n]+/, \"\"], [/\\/\\*\\*(?!\\/)/, \"comment.doc\", \"@doccomment\"], [/\\/\\*/, \"comment\", \"@comment\"], [/\\/\\/.*\\\\$/, \"comment\", \"@linecomment\"], [/\\/\\/.*$/, \"comment\"]], comment: [[/[^\\/*]+/, \"comment\"], [/\\*\\//, \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]], linecomment: [[/.*[^\\\\]$/, \"comment\", \"@pop\"], [/[^]+/, \"comment\"]], doccomment: [[/[^\\/*]+/, \"comment.doc\"], [/\\*\\//, \"comment.doc\", \"@pop\"], [/[\\/*]/, \"comment.doc\"]], string: [[/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"/, \"string\", \"@pop\"]], raw: [[/[^)]+/, \"string.raw\"], [/\\)$S2\\\"/, { token: \"string.raw.end\", next: \"@pop\" }], [/\\)/, \"string.raw\"]], annotation: [{ include: \"@whitespace\" }, [/using|alignas/, \"keyword\"], [/[a-zA-Z0-9_]+/, \"annotation\"], [/[,:]/, \"delimiter\"], [/[()]/, \"@brackets\"], [/\\]\\s*\\]/, { token: \"annotation\", next: \"@pop\" }]], include: [[/(\\s*)(<)([^<>]*)(>)/, [\"\", \"keyword.directive.include.begin\", \"string.include.identifier\", { token: \"keyword.directive.include.end\", next: \"@pop\" }]], [/(\\s*)(\")([^\"]*)(\")/, [\"\", \"keyword.directive.include.begin\", \"string.include.identifier\", { token: \"keyword.directive.include.end\", next: \"@pop\" }]]] } };\nexport {\n  e as conf,\n  t as language\n};\n"],"mappings":"AAAG,IAACA,EAAI,CAAEC,SAAU,CAAEC,YAAa,KAAMC,aAAc,CAAC,KAAM,OAASC,SAAU,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,MAAOC,iBAAkB,CAAC,CAAEC,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,SAAU,YAAc,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,YAAcC,iBAAkB,CAAC,CAAEH,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,MAAQG,QAAS,CAAEC,QAAS,CAAEC,MAAO,IAAIC,OAAO,6BAA8BC,IAAK,IAAID,OAAO,mCAAuCE,EAAI,CAAEC,aAAc,GAAIC,aAAc,OAAQb,SAAU,CAAC,CAAEc,MAAO,kBAAmBZ,KAAM,IAAKC,MAAO,KAAO,CAAEW,MAAO,wBAAyBZ,KAAM,IAAKC,MAAO,KAAO,CAAEW,MAAO,mBAAoBZ,KAAM,IAAKC,MAAO,KAAO,CAAEW,MAAO,kBAAmBZ,KAAM,IAAKC,MAAO,MAAQY,SAAU,CAAC,WAAY,MAAO,QAAS,OAAQ,OAAQ,QAAS,OAAQ,QAAS,OAAQ,QAAS,QAAS,YAAa,aAAc,WAAY,MAAO,WAAY,UAAW,WAAY,SAAU,KAAM,SAAU,eAAgB,OAAQ,OAAQ,OAAQ,QAAS,WAAY,SAAU,SAAU,QAAS,QAAS,UAAW,QAAS,MAAO,SAAU,QAAS,UAAW,OAAQ,KAAM,KAAM,WAAY,SAAU,MAAO,YAAa,eAAgB,WAAY,UAAW,OAAQ,UAAW,YAAa,MAAO,WAAY,UAAW,YAAa,WAAY,WAAY,UAAW,SAAU,UAAW,UAAW,WAAY,YAAa,SAAU,MAAO,WAAY,mBAAoB,WAAY,SAAU,YAAa,SAAU,QAAS,SAAU,SAAU,SAAU,gBAAiB,cAAe,SAAU,SAAU,WAAY,OAAQ,eAAgB,QAAS,cAAe,OAAQ,MAAO,UAAW,SAAU,WAAY,QAAS,WAAY,QAAS,UAAW,OAAQ,WAAY,UAAW,QAAS,QAAS,OAAQ,SAAU,SAAU,YAAa,YAAa,aAAc,iBAAkB,UAAW,wBAAyB,UAAW,sBAAuB,WAAY,uBAAwB,OAAQ,aAAc,YAAa,QAAS,WAAY,UAAW,QAAS,oBAAqB,UAAW,YAAa,aAAc,aAAc,UAAW,WAAY,aAAc,YAAa,gBAAiB,OAAQ,SAAU,eAAgB,cAAe,kBAAmB,WAAY,WAAY,UAAW,UAAW,UAAW,SAAU,cAAe,UAAW,SAAU,UAAW,UAAW,SAAU,UAAW,UAAW,SAAU,UAAW,UAAW,QAAS,yBAA0B,YAAa,SAAU,SAAU,aAAc,eAAgB,WAAY,QAAS,WAAY,aAAc,UAAW,UAAW,UAAW,aAAc,WAAY,WAAY,uBAAwB,YAAa,UAAW,aAAc,QAAS,aAAc,WAAY,cAAe,WAAY,WAAY,UAAW,wBAAyB,QAAS,aAAcC,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,OAAQC,QAAS,wBAAyBC,QAAS,yEAA0EC,cAAe,sCAAuCC,YAAa,UAAWC,SAAU,WAAYC,UAAW,CAAEC,KAAM,CAAC,CAAC,mCAAoC,CAAET,MAAO,mBAAoBU,KAAM,YAAc,CAAC,eAAgB,CAAEC,MAAO,CAAE,YAAa,CAAEX,MAAO,cAAgB,WAAY,gBAAmB,CAAC,kBAAmB,CAAEA,MAAO,4BAA6BU,KAAM,aAAe,CAAC,cAAe,qBAAsB,CAAEE,QAAS,eAAiB,CAAC,UAAW,CAAEZ,MAAO,aAAcU,KAAM,gBAAkB,CAAC,eAAgB,aAAc,CAAC,WAAY,CAAEC,MAAO,CAAE,aAAc,YAAa,WAAY,MAAS,CAAC,uCAAwC,gBAAiB,CAAC,yCAA0C,gBAAiB,CAAC,gDAAiD,cAAe,CAAC,gCAAiC,gBAAiB,CAAC,oCAAqC,iBAAkB,CAAC,6BAA8B,UAAW,CAAC,qBAAsB,UAAW,CAAC,QAAS,aAAc,CAAC,kBAAmB,kBAAmB,CAAC,IAAK,SAAU,WAAY,CAAC,WAAY,UAAW,CAAC,mBAAoB,CAAC,SAAU,gBAAiB,WAAY,CAAC,IAAK,mBAAoBE,WAAY,CAAC,CAAC,aAAc,IAAK,CAAC,eAAgB,cAAe,eAAgB,CAAC,OAAQ,UAAW,YAAa,CAAC,YAAa,UAAW,gBAAiB,CAAC,UAAW,YAAaC,QAAS,CAAC,CAAC,UAAW,WAAY,CAAC,OAAQ,UAAW,QAAS,CAAC,QAAS,YAAaC,YAAa,CAAC,CAAC,WAAY,UAAW,QAAS,CAAC,OAAQ,YAAaC,WAAY,CAAC,CAAC,UAAW,eAAgB,CAAC,OAAQ,cAAe,QAAS,CAAC,QAAS,gBAAiBC,OAAQ,CAAC,CAAC,UAAW,UAAW,CAAC,WAAY,iBAAkB,CAAC,MAAO,yBAA0B,CAAC,IAAK,SAAU,SAAUC,IAAK,CAAC,CAAC,QAAS,cAAe,CAAC,UAAW,CAAElB,MAAO,iBAAkBU,KAAM,SAAW,CAAC,KAAM,eAAgBS,WAAY,CAAC,CAAEP,QAAS,eAAiB,CAAC,gBAAiB,WAAY,CAAC,gBAAiB,cAAe,CAAC,OAAQ,aAAc,CAAC,OAAQ,aAAc,CAAC,UAAW,CAAEZ,MAAO,aAAcU,KAAM,UAAYE,QAAS,CAAC,CAAC,sBAAuB,CAAC,GAAI,kCAAmC,4BAA6B,CAAEZ,MAAO,gCAAiCU,KAAM,UAAY,CAAC,qBAAsB,CAAC,GAAI,kCAAmC,4BAA6B,CAAEV,MAAO,gCAAiCU,KAAM,oB"}