{"version":3,"names":["chGridActionRefreshCss","ChGridActionRefreshStyle0","ChGridActionRefresh","exports","class_1","prototype","pressedHandler","eventInfo","key","this","refreshClicked","emit","stopPropagation","render","h","Host","role","tabindex","disabled","chGridActionSettingsCss","ChGridActionSettingsStyle0","ChGridActionSettings","class_2","settingsShowClicked","chGridActionbarCss","ChGridActionbarStyle0","ChGridActionbar","chPaginatorCss","ChPaginatorStyle0","ChPaginator","class_4","activePageHandler","activePageChanged","activePage","componentWillLoad","loadElements","navigateClickedHandler","navigate","detail","type","pageChangedHandler","page","keyDownHandler","emitPageNavigationRequested","first","_a","elFirst","focus","previous","_b","elPrevious","next","_c","elNext","last","_d","elLast","goto","pageNavigationRequested","Math","max","totalPages","min","_this","elPages","el","querySelector","querySelectorAll","forEach","hasNextPage","chPaginatorNavigateCss","ChPaginatorNavigateStyle0","ChPaginatorNavigate","class_5","navigateClicked","chPaginatorPagesCss","ChPaginatorPagesStyle0","ChPaginatorPages","clickHandler","button","target","parseInt","value","class_6","pageHandler","pageChanged","maxSizeHandler","validateMaxSize","renderFirstLastPagesHandler","componentDidUpdate","document","activeElement","buttonActive","focusHandler","getItems","padLeft","ceil","maxSize","padRight","floor","fillLeft","fillStart","fillRight","fillEnd","length","items","concat","getRangeItems","activeIndex","renderFirstLastPages","textDots","start","end","Array","from","_","i","part","class","map","item","onClick","ref","GxControlType","GxControlDataType","gxGridChameleonColumnFilterCss","GxGridChameleonColumnFilterStyle0","GridChameleonColumnFilter","filterEnum","applyClickHandler","equal","getControlValue","inputEqual","less","inputLess","greater","inputGreater","columnSettingsChanged","column","resetClickHandler","class_7","isArray","FilterEnum","input","dataType","gxControl","DATETIME","FilterDateTimeAsDate","DATE","gx","date","ctod","toString","ctot","toControlValue","convertGxDateToISO","gxdate","isDateTime","pad","n","padStart","Value","isNullDate","getFullYear","getMonth","getDate","getHours","getMinutes","getFilterInputType","BOOLEAN","CHAR","VARCHAR","LONGVARCHAR","NUMBER","renderColumnFilterControl","possibleValues","label","replace","toLowerCase","COMBO","filter","Description","EDIT","CHECK","optionValue","optionDescription","selected","FilterCaption","FilterMode","FilterLabelEqual","FilterLabelGreater","FilterLabelLess","buttonResetText","buttonApplyText"],"sources":["src/components/grid/grid-actionbar/grid-action-refresh/ch-grid-action-refresh.scss?tag=ch-grid-action-refresh","src/components/grid/grid-actionbar/grid-action-refresh/ch-grid-action-refresh.tsx","src/components/grid/grid-actionbar/grid-action-settings/ch-grid-action-settings.scss?tag=ch-grid-action-settings","src/components/grid/grid-actionbar/grid-action-settings/ch-grid-action-settings.tsx","src/components/grid/grid-actionbar/ch-grid-actionbar.scss?tag=ch-grid-actionbar","src/components/grid/grid-actionbar/ch-grid-actionbar.tsx","src/components/paginator/ch-paginator.scss?tag=ch-paginator","src/components/paginator/ch-paginator.tsx","src/components/paginator/paginator-navigate/ch-paginator-navigate.scss?tag=ch-paginator-navigate","src/components/paginator/paginator-navigate/ch-paginator-navigate.tsx","src/components/paginator/paginator-pages/ch-paginator-pages.scss?tag=ch-paginator-pages&encapsulation=shadow","src/components/paginator/paginator-pages/ch-paginator-pages.tsx","src/components/gx-grid/genexus.ts","src/components/gx-grid/gx-grid-column-filter/gx-grid-chameleon-column-filter.scss?tag=gx-grid-chameleon-column-filter&encapsulation=shadow","src/components/gx-grid/gx-grid-column-filter/gx-grid-chameleon-column-filter.tsx"],"sourcesContent":["@layer ch-grid {\r\n    ch-grid-action-refresh[disabled] {\r\n        pointer-events: none;\r\n    }\r\n}","import {\r\n  Component,\r\n  Prop,\r\n  Event,\r\n  h,\r\n  Host,\r\n  EventEmitter,\r\n  Listen\r\n} from \"@stencil/core\";\r\n\r\n/**\r\n * The `ch-grid-action-refresh` component represents a refresh button for a grid action bar.\r\n */\r\n@Component({\r\n  tag: \"ch-grid-action-refresh\",\r\n  styleUrl: \"ch-grid-action-refresh.scss\",\r\n  shadow: false\r\n})\r\nexport class ChGridActionRefresh {\r\n  /**\r\n   * Indicates whether the refresh button is disabled or not.\r\n   */\r\n  @Prop() readonly disabled: boolean;\r\n\r\n  /**\r\n   * Event emitted when the refresh button is clicked.\r\n   */\r\n  @Event() refreshClicked: EventEmitter;\r\n\r\n  @Listen(\"keydown\", { passive: true })\r\n  @Listen(\"click\", { passive: true })\r\n  pressedHandler(eventInfo: any) {\r\n    if (!eventInfo.key || eventInfo.key === \"Enter\" || eventInfo.key === \" \") {\r\n      this.refreshClicked.emit();\r\n      eventInfo.stopPropagation();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <Host role=\"button\" tabindex=\"0\" disabled={this.disabled}></Host>;\r\n  }\r\n}\r\n","@layer ch-grid {\r\n    ch-grid-action-settings[disabled] {\r\n        pointer-events: none;\r\n    }\r\n}","import {\r\n  Component,\r\n  Prop,\r\n  h,\r\n  Host,\r\n  Event,\r\n  EventEmitter,\r\n  Listen\r\n} from \"@stencil/core\";\r\n\r\n/**\r\n * The `ch-grid-action-settings` component represents a settings button for a grid action bar.\r\n */\r\n@Component({\r\n  tag: \"ch-grid-action-settings\",\r\n  styleUrl: \"ch-grid-action-settings.scss\",\r\n  shadow: false\r\n})\r\nexport class ChGridActionSettings {\r\n  /**\r\n   * Indicates whether the settings button is disabled or not.\r\n   */\r\n  @Prop() readonly disabled: boolean;\r\n\r\n  /**\r\n   * Event emitted when the settings button is clicked.\r\n   */\r\n  @Event() settingsShowClicked: EventEmitter;\r\n\r\n  @Listen(\"keydown\", { passive: true })\r\n  @Listen(\"click\", { passive: true })\r\n  pressedHandler(eventInfo: any) {\r\n    if (!eventInfo.key || eventInfo.key === \"Enter\" || eventInfo.key === \" \") {\r\n      this.settingsShowClicked.emit();\r\n      eventInfo.stopPropagation();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <Host role=\"button\" tabindex=\"0\" disabled={this.disabled}></Host>;\r\n  }\r\n}\r\n","@layer ch-grid {}","import { Component, Element } from \"@stencil/core\";\r\n\r\n/**\r\n * The `ch-grid-actionbar` component represents a container for a grid actions.\r\n */\r\n@Component({\r\n  tag: \"ch-grid-actionbar\",\r\n  styleUrl: \"ch-grid-actionbar.scss\",\r\n  shadow: false\r\n})\r\nexport class ChGridActionbar {\r\n  @Element() el: HTMLChGridActionbarElement;\r\n}\r\n",":host {\r\n  display: flex;\r\n}\r\n","/* eslint-disable @typescript-eslint/no-empty-function */\r\nimport {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Listen,\r\n  Prop,\r\n  Watch\r\n} from \"@stencil/core\";\r\nimport { ChPaginatorNavigateClickedEvent } from \"./paginator-navigate/ch-paginator-navigate-types\";\r\nimport { ChPaginatorPagesPageChangedEvent } from \"./paginator-pages/ch-paginator-pages\";\r\n\r\n/**\r\n * The 'ch-paginator' component represents a paginator control for navigating through pages.\r\n */\r\n@Component({\r\n  tag: \"ch-paginator\",\r\n  styleUrl: \"ch-paginator.scss\",\r\n  shadow: false\r\n})\r\nexport class ChPaginator {\r\n  private elPages: HTMLChPaginatorPagesElement;\r\n  private elFirst: HTMLChPaginatorNavigateElement;\r\n  private elPrevious: HTMLChPaginatorNavigateElement;\r\n  private elNext: HTMLChPaginatorNavigateElement;\r\n  private elLast: HTMLChPaginatorNavigateElement;\r\n\r\n  @Element() el: HTMLChPaginatorElement;\r\n\r\n  /**\r\n   * The active page number.\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) activePage = 1;\r\n\r\n  @Watch(\"activePage\")\r\n  activePageHandler() {\r\n    this.activePageChanged.emit({ activePage: this.activePage });\r\n  }\r\n\r\n  /**\r\n   * The total number of pages.\r\n   * Use -1 if not known and 'hasNextPage' property to indicate\r\n   * that the end has been reached.\r\n   */\r\n  @Prop() readonly totalPages = 1;\r\n\r\n  /**\r\n   * Indicates that the end has been reached.\r\n   * Use when total pages are not known (totalPages = -1).\r\n   */\r\n  @Prop() readonly hasNextPage: boolean = false;\r\n\r\n  /**\r\n   * Event emitted when the active page changes.\r\n   */\r\n  @Event() activePageChanged: EventEmitter<ChPaginatorActivePageChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the navigation is requested.\r\n   */\r\n  @Event()\r\n  pageNavigationRequested: EventEmitter<ChPaginatorPageNavigationRequestedEvent>;\r\n\r\n  componentWillLoad() {\r\n    this.loadElements();\r\n  }\r\n\r\n  @Listen(\"navigateClicked\")\r\n  navigateClickedHandler(\r\n    eventInfo: CustomEvent<ChPaginatorNavigateClickedEvent>\r\n  ) {\r\n    eventInfo.stopPropagation();\r\n    this.navigate(eventInfo.detail.type);\r\n  }\r\n\r\n  @Listen(\"pageChanged\")\r\n  pageChangedHandler(eventInfo: CustomEvent<ChPaginatorPagesPageChangedEvent>) {\r\n    eventInfo.stopPropagation();\r\n    this.navigate(\"goto\", eventInfo.detail.page);\r\n  }\r\n\r\n  @Listen(\"keydown\", { passive: true })\r\n  keyDownHandler(eventInfo: KeyboardEvent) {\r\n    switch (eventInfo.key) {\r\n      case \"Home\":\r\n        this.navigate(\"first\");\r\n        break;\r\n      case \"PageUp\":\r\n        this.navigate(\"previous\");\r\n        break;\r\n      case \"PageDown\":\r\n        this.navigate(\"next\");\r\n        break;\r\n      case \"End\":\r\n        this.navigate(\"last\");\r\n        break;\r\n    }\r\n  }\r\n\r\n  private navigate(\r\n    type: \"first\" | \"previous\" | \"next\" | \"last\" | \"goto\",\r\n    page?: number\r\n  ) {\r\n    const emitPageNavigationRequested = !page || page !== this.activePage;\r\n\r\n    switch (type) {\r\n      case \"first\":\r\n        this.first();\r\n        this.elFirst?.focus();\r\n        break;\r\n      case \"previous\":\r\n        this.previous();\r\n        this.elPrevious?.focus();\r\n        break;\r\n      case \"next\":\r\n        this.next();\r\n        this.elNext?.focus();\r\n        break;\r\n      case \"last\":\r\n        this.last();\r\n        this.elLast?.focus();\r\n        break;\r\n      case \"goto\":\r\n        this.goto(page);\r\n        break;\r\n    }\r\n\r\n    if (emitPageNavigationRequested) {\r\n      this.pageNavigationRequested.emit({ type, page });\r\n    }\r\n  }\r\n\r\n  private first() {\r\n    this.activePage = 1;\r\n  }\r\n  private previous() {\r\n    this.activePage = Math.max(this.activePage - 1, 1);\r\n  }\r\n  private next() {\r\n    this.activePage =\r\n      this.totalPages < 0\r\n        ? this.activePage + 1\r\n        : Math.min(this.activePage + 1, this.totalPages);\r\n  }\r\n  private last() {\r\n    this.activePage = this.totalPages;\r\n  }\r\n\r\n  private goto(page: number) {\r\n    this.activePage = Math.max(Math.min(page, this.totalPages), 1);\r\n  }\r\n\r\n  private loadElements() {\r\n    this.elPages = this.el.querySelector(\"ch-paginator-pages\");\r\n    this.el\r\n      .querySelectorAll(\"ch-paginator-navigate\")\r\n      .forEach((el: HTMLChPaginatorNavigateElement) => {\r\n        switch (el.type) {\r\n          case \"first\":\r\n            this.elFirst = el;\r\n            break;\r\n          case \"previous\":\r\n            this.elPrevious = el;\r\n            break;\r\n          case \"next\":\r\n            this.elNext = el;\r\n            break;\r\n          case \"last\":\r\n            this.elLast = el;\r\n            break;\r\n        }\r\n      });\r\n  }\r\n\r\n  render() {\r\n    if (this.elPages) {\r\n      this.elPages.totalPages = this.totalPages;\r\n      this.elPages.page = this.activePage;\r\n    }\r\n    if (this.elFirst) {\r\n      this.elFirst.disabled = this.activePage === 1;\r\n    }\r\n    if (this.elPrevious) {\r\n      this.elPrevious.disabled = this.activePage === 1;\r\n    }\r\n    if (this.elNext) {\r\n      this.elNext.disabled =\r\n        this.activePage === this.totalPages ||\r\n        (this.totalPages < 0 && !this.hasNextPage);\r\n    }\r\n    if (this.elLast) {\r\n      this.elLast.disabled =\r\n        this.activePage === this.totalPages ||\r\n        (this.totalPages < 0 && !this.hasNextPage);\r\n    }\r\n  }\r\n}\r\n\r\nexport interface ChPaginatorActivePageChangedEvent {\r\n  activePage: number;\r\n}\r\nexport interface ChPaginatorPageNavigationRequestedEvent {\r\n  type: \"first\" | \"previous\" | \"next\" | \"last\" | \"goto\";\r\n  page?: number;\r\n}\r\n","ch-paginator-navigate[disabled] {\r\n    pointer-events: none;\r\n}\r\n","import {\r\n  Component,\r\n  Prop,\r\n  Event,\r\n  EventEmitter,\r\n  h,\r\n  Host,\r\n  Listen\r\n} from \"@stencil/core\";\r\nimport {\r\n  ChPaginatorNavigateClickedEvent,\r\n  ChPaginatorNavigateType\r\n} from \"./ch-paginator-navigate-types\";\r\n\r\n/**\r\n * The 'ch-paginator-navigate' component represents the navigation buttons for the 'ch-paginator' component.\r\n */\r\n@Component({\r\n  tag: \"ch-paginator-navigate\",\r\n  styleUrl: \"ch-paginator-navigate.scss\",\r\n  shadow: false\r\n})\r\nexport class ChPaginatorNavigate {\r\n  /**\r\n   * The type of navigation button.\r\n   */\r\n  @Prop({ reflect: true }) readonly type: ChPaginatorNavigateType;\r\n\r\n  /**\r\n   * Flag indicating if the button is disabled.\r\n   */\r\n  @Prop() readonly disabled: boolean;\r\n\r\n  /**\r\n   * Event emitted when the navigation button is pressed.\r\n   */\r\n  @Event() navigateClicked: EventEmitter<ChPaginatorNavigateClickedEvent>; // prettier-ignore\r\n\r\n  @Listen(\"keydown\", { passive: true })\r\n  @Listen(\"click\", { passive: true })\r\n  pressedHandler(eventInfo) {\r\n    if (!eventInfo.key || eventInfo.key === \"Enter\" || eventInfo.key === \" \") {\r\n      this.navigateClicked.emit({ type: this.type });\r\n      eventInfo.stopPropagation();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <Host role=\"button\" tabindex=\"0\" disabled={this.disabled}></Host>;\r\n  }\r\n}\r\n","@import \"../../common/reset.scss\";\r\n\r\nbutton {\r\n  all: unset;\r\n}\r\n\r\n.pages {\r\n  display: flex;\r\n  align-items: center;\r\n  @include reset-list;\r\n}\r\n","import {\r\n  Component,\r\n  h,\r\n  Prop,\r\n  Watch,\r\n  Event,\r\n  EventEmitter,\r\n  Element,\r\n  Listen\r\n} from \"@stencil/core\";\r\n\r\n/**\r\n * The 'ch-paginator-pages' component represents the pagination pages for the 'ch-paginator' component.\r\n */\r\n@Component({\r\n  tag: \"ch-paginator-pages\",\r\n  styleUrl: \"ch-paginator-pages.scss\",\r\n  shadow: true\r\n})\r\nexport class ChPaginatorPages {\r\n  private buttonActive: HTMLButtonElement;\r\n\r\n  @Element() el: HTMLChPaginatorPagesElement;\r\n\r\n  /**\r\n   * The active page number.\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) page = 1;\r\n\r\n  @Watch(\"page\")\r\n  pageHandler() {\r\n    this.pageChanged.emit({ page: this.page });\r\n  }\r\n\r\n  /**\r\n   * The total number of pages.\r\n   */\r\n  @Prop({ reflect: true }) readonly totalPages = 1;\r\n\r\n  /**\r\n   * The maximum number of items to display in the pagination.\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) maxSize = 9;\r\n\r\n  @Watch(\"maxSize\")\r\n  maxSizeHandler() {\r\n    this.validateMaxSize();\r\n  }\r\n\r\n  /**\r\n   * Flag to render the first and last pages.\r\n   */\r\n  @Prop() readonly renderFirstLastPages: boolean = true;\r\n\r\n  @Watch(\"renderFirstLastPages\")\r\n  renderFirstLastPagesHandler() {\r\n    this.validateMaxSize();\r\n  }\r\n\r\n  /**\r\n   * The text to display for the dots.\r\n   */\r\n  @Prop() readonly textDots: string = \"...\";\r\n\r\n  /**\r\n   * Event emitted when the page changes.\r\n   */\r\n  @Event() pageChanged: EventEmitter<ChPaginatorPagesPageChangedEvent>;\r\n\r\n  componentDidUpdate() {\r\n    if (document.activeElement === this.el) {\r\n      this.buttonActive.focus();\r\n    }\r\n  }\r\n\r\n  @Listen(\"keydown\", { passive: true })\r\n  keyDownHandler(eventInfo: KeyboardEvent) {\r\n    switch (eventInfo.key) {\r\n      case \"ArrowLeft\":\r\n        this.page = Math.max(this.page - 1, 1);\r\n        break;\r\n      case \"ArrowRight\":\r\n        this.page = Math.min(this.page + 1, this.totalPages);\r\n        break;\r\n    }\r\n  }\r\n\r\n  @Listen(\"focusin\", { passive: true })\r\n  focusHandler() {\r\n    this.buttonActive.focus();\r\n  }\r\n\r\n  private clickHandler = (eventInfo: Event) => {\r\n    const button = eventInfo.target as HTMLButtonElement;\r\n    this.page = parseInt(button.value);\r\n  };\r\n\r\n  private getItems(): { items: (number | string)[]; activeIndex: number } {\r\n    const padLeft = Math.ceil((this.maxSize - 1) / 2);\r\n    const padRight = Math.floor((this.maxSize - 1) / 2);\r\n    let fillLeft: number, fillStart: (number | string)[];\r\n    let fillRight: number, fillEnd: (number | string)[];\r\n\r\n    if (this.maxSize === 0 || this.maxSize >= this.totalPages) {\r\n      fillStart = this.fillStart(false);\r\n      fillLeft = this.page - 1;\r\n      fillRight = this.totalPages - this.page;\r\n      fillEnd = this.fillEnd(false);\r\n    } else if (this.page <= padLeft && this.page < this.totalPages - padRight) {\r\n      fillStart = this.fillStart(false);\r\n      fillLeft = this.page - 1;\r\n      fillEnd = this.fillEnd(true);\r\n      fillRight = padRight - fillEnd.length + (padLeft - fillLeft);\r\n    } else if (this.page > padLeft && this.page < this.totalPages - padRight) {\r\n      fillStart = this.fillStart(true);\r\n      fillLeft = padLeft - fillStart.length;\r\n      fillEnd = this.fillEnd(true);\r\n      fillRight = padRight - fillEnd.length;\r\n    } else if (this.page > padLeft && this.page >= this.totalPages - padRight) {\r\n      fillEnd = this.fillEnd(false);\r\n      fillRight = this.totalPages - this.page;\r\n      fillStart = this.fillStart(true);\r\n      fillLeft = padLeft - fillStart.length + padRight - fillRight;\r\n    }\r\n\r\n    const items: (number | string)[] = fillStart\r\n      .concat(this.getRangeItems(this.page - fillLeft, this.page - 1))\r\n      .concat([this.page])\r\n      .concat(this.getRangeItems(this.page + 1, this.page + fillRight))\r\n      .concat(fillEnd);\r\n\r\n    return {\r\n      items,\r\n      activeIndex: fillStart.length + fillLeft\r\n    };\r\n  }\r\n\r\n  private fillStart(render: boolean) {\r\n    if (render) {\r\n      return this.renderFirstLastPages ? [1, this.textDots] : [this.textDots];\r\n    }\r\n    return [];\r\n  }\r\n\r\n  private fillEnd(render: boolean) {\r\n    if (render) {\r\n      return this.renderFirstLastPages\r\n        ? [this.textDots, this.totalPages]\r\n        : [this.textDots];\r\n    }\r\n    return [];\r\n  }\r\n\r\n  private getRangeItems(start: number, end: number): number[] {\r\n    return Array.from({ length: end - start + 1 }, (_, i) => start + i);\r\n  }\r\n\r\n  private validateMaxSize() {\r\n    if (this.maxSize > 0) {\r\n      if (!this.renderFirstLastPages && this.maxSize < 3) {\r\n        this.maxSize = 3;\r\n      } else if (this.renderFirstLastPages && this.maxSize < 5) {\r\n        this.maxSize = 5;\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { items, activeIndex } = this.getItems();\r\n\r\n    return (\r\n      <ol part=\"pages\" class=\"pages\">\r\n        {items.map((item, i) => {\r\n          if (typeof item === \"number\") {\r\n            return (\r\n              <li>\r\n                <button\r\n                  part={`page button ${i === activeIndex ? \"active\" : \"\"}`}\r\n                  value={item}\r\n                  onClick={this.clickHandler}\r\n                  ref={el =>\r\n                    (this.buttonActive =\r\n                      i === activeIndex ? el : this.buttonActive)\r\n                  }\r\n                >\r\n                  {item}\r\n                </button>\r\n              </li>\r\n            );\r\n          }\r\n          return (\r\n            <li>\r\n              <button part=\"page button dots\" disabled>\r\n                {item}\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n      </ol>\r\n    );\r\n  }\r\n}\r\n\r\nexport interface ChPaginatorPagesPageChangedEvent {\r\n  page: number;\r\n}\r\n","import { GridChameleonColumnFilterEnum } from \"./gx-grid-column-filter/gx-grid-chameleon-column-filter\";\r\n\r\nexport interface Gx {\r\n  fx: {\r\n    obs: {\r\n      notify(eventName: string): void;\r\n    };\r\n  };\r\n  fn: {\r\n    currentGridRowImpl(gxId: number): string;\r\n    setCurrentGridRow(gxId: number, rowGxId: string): void;\r\n  };\r\n  lang: {\r\n    gxBoolean(value: undefined | boolean | number | string): boolean;\r\n  };\r\n  popup: {\r\n    ispopup(): boolean;\r\n  };\r\n  date: {\r\n    ctod(value: string, format?: \"Y4MD\"): gxdate;\r\n    ctot(value: string, format?: \"Y4MD\"): gxdate;\r\n    isNullDate(date: Date | gxdate): boolean;\r\n  };\r\n  getMessage(id: string): string;\r\n}\r\n\r\nexport interface gxdate {\r\n  toString(): string;\r\n  toISOString(): string;\r\n  Value: Date;\r\n}\r\n\r\nexport interface GxGrid {\r\n  readonly gxId: number;\r\n  readonly ControlName: string;\r\n  readonly columns: GxGridColumn[];\r\n  readonly rows: GxGridRow[];\r\n  readonly usePaging: boolean;\r\n  firstRecordOnPage: string;\r\n  eof: number;\r\n  readonly pageSize: number;\r\n  readonly properties: GxGridCellProperties[][];\r\n  readonly ParentObject: GxObject;\r\n  readonly header: string;\r\n  readonly Class: string;\r\n  readonly gxAllowSelection: boolean;\r\n  readonly gxAllowHovering: boolean;\r\n  readonly pagingBarClass: string;\r\n  readonly pagingButtonFirstClass: string;\r\n  readonly pagingButtonLastClass: string;\r\n  readonly pagingButtonNextClass: string;\r\n  readonly pagingButtonPreviousClass: string;\r\n\r\n  getRowByGxId(gxId: string): GxGridRow;\r\n  setSort(columnIndex: number, asc?: boolean): void;\r\n  selectRow(index: number): void;\r\n  execC2VFunctions(): void;\r\n  executeEvent(columnIndex: number, rowIndex: number): void;\r\n  changeGridPage(direction: string, force?: boolean): any;\r\n  isFirstPage(): boolean;\r\n  isLastPage(): boolean;\r\n  getColumnByHtmlName(htmlName: string): GxGridColumn;\r\n\r\n  // UserControl\r\n  readonly SortMode: \"client\" | \"server\";\r\n\r\n  readonly ColumnsetClass: string;\r\n  readonly ColumnClass: string;\r\n  readonly ColumnFilterClass: string;\r\n  readonly RowClass: string;\r\n  readonly RowEvenClass: string;\r\n  readonly RowOddClass: string;\r\n  readonly RowSelectedClass: string;\r\n  readonly RowHighlightedClass: string;\r\n  readonly CellClass: string;\r\n\r\n  readonly FilterButtonApplyText: string;\r\n  readonly FilterButtonResetText: string;\r\n\r\n  readonly PaginatorShow: boolean;\r\n  readonly PaginatorNavigationButtonTextPosition: \"title\" | \"text\";\r\n  readonly PaginatorPagesShow: boolean;\r\n  readonly PaginatorPagesMaxSize: number;\r\n  readonly PaginatorInfoShow: boolean;\r\n  readonly PaginatorInfoClass: string;\r\n  readonly PaginatorInfoTextMask: string;\r\n  readonly PaginatorInfoEmptyTextMask: string;\r\n\r\n  readonly ActionbarHeaderClass: string;\r\n  readonly ActionbarFooterClass: string;\r\n\r\n  readonly ActionRefreshPosition: \"none\" | \"header\" | \"footer\";\r\n  readonly ActionRefreshTextPosition: \"title\" | \"text\";\r\n  readonly ActionRefreshClass: string;\r\n\r\n  readonly ActionSettingsPosition: \"none\" | \"header\" | \"footer\";\r\n  readonly ActionSettingsTextPosition: \"title\" | \"text\";\r\n  readonly ActionSettingsClass: string;\r\n\r\n  readonly SettingsCloseTextPosition: \"title\" | \"text\";\r\n\r\n  OnPaginationFirst(): void;\r\n  OnPaginationPrevious(): void;\r\n  OnPaginationNext(): void;\r\n  OnPaginationLast(): void;\r\n}\r\n\r\nexport interface GxGridColumn {\r\n  readonly title: string;\r\n  readonly visible: boolean;\r\n  readonly gxColumnClass: string;\r\n  readonly gxControl: GxControl;\r\n  readonly gxAttId: string;\r\n  readonly gxAttName: string;\r\n  readonly htmlName: string;\r\n  readonly index: number;\r\n\r\n  // UserControl\r\n  readonly Icon: string;\r\n  readonly NamePosition: \"title\" | \"text\";\r\n  readonly HeaderClass: string;\r\n  Hidden: number;\r\n  readonly Hideable: number;\r\n  readonly Sortable: number;\r\n  readonly Filterable: number;\r\n  readonly Resizeable: number;\r\n  Size: \"min\" | \"max\" | \"minmax\" | \"auto\" | \"length\" | \"css\";\r\n  SizeLength: string;\r\n  SizeMinLength: string;\r\n  SizeMaxLength: string;\r\n  SizeVariableName: string;\r\n  readonly FilterMode: \"single\" | \"range\";\r\n  readonly FilterEnum: GridChameleonColumnFilterEnum[];\r\n  readonly FilterDateTimeAsDate: number;\r\n  readonly FilterCaption: string;\r\n  readonly FilterLabelEqual: string;\r\n  readonly FilterLabelLess: string;\r\n  readonly FilterLabelGreater: string;\r\n  SortDirection: \"asc\" | \"desc\";\r\n\r\n  order: number;\r\n  filterEqual: string;\r\n  filterLess: string;\r\n  filterGreater: string;\r\n  isFiltering: boolean;\r\n\r\n  render: boolean;\r\n}\r\n\r\nexport interface GxGridRow {\r\n  readonly id: number;\r\n  readonly gxId: string;\r\n  readonly values: string[];\r\n  readonly gxProps: any[];\r\n}\r\n\r\nexport interface GxGridCellProperties {\r\n  column: GxGridColumn;\r\n  visible: boolean;\r\n}\r\n\r\nexport interface GxControl {\r\n  setProperties(): void;\r\n  getHtml(): string;\r\n\r\n  dataType: GxControlDataType;\r\n  type: GxControlType;\r\n  possibleValues: GxControlPossibleValues;\r\n}\r\n\r\nexport type GxControlPossibleValues = [string, string][];\r\n\r\nexport interface GxObject {\r\n  refreshGrid(gridName: string): void;\r\n}\r\n\r\nexport enum GxControlType {\r\n  EDIT = 1,\r\n  RADIO = 4,\r\n  COMBO = 5,\r\n  CHECK = 7\r\n}\r\n\r\nexport enum GxControlDataType {\r\n  NUMBER = 0,\r\n  CHAR = 1,\r\n  DATE = 2,\r\n  DATETIME = 3,\r\n  VARCHAR = 5,\r\n  LONGVARCHAR = 6,\r\n  BOOLEAN = 7\r\n}\r\n",null,"import {\r\n  Element,\r\n  Component,\r\n  h,\r\n  Host,\r\n  Prop,\r\n  Event,\r\n  EventEmitter\r\n} from \"@stencil/core\";\r\nimport {\r\n  Gx,\r\n  GxControlDataType,\r\n  GxControlPossibleValues,\r\n  GxControlType,\r\n  gxdate,\r\n  GxGridColumn\r\n} from \"../genexus\";\r\n\r\ndeclare let gx: Gx;\r\n\r\n/**\r\n * Represents a component that provides filtering controls for a grid column.\r\n */\r\n@Component({\r\n  tag: \"gx-grid-chameleon-column-filter\",\r\n  styleUrl: \"gx-grid-chameleon-column-filter.scss\",\r\n  shadow: true\r\n})\r\n// eslint-disable-next-line @stencil-community/required-prefix\r\nexport class GridChameleonColumnFilter {\r\n  private filterEnum: GridChameleonColumnFilterEnum[] = [];\r\n  private inputEqual: HTMLInputElement | HTMLSelectElement;\r\n  private inputLess: HTMLInputElement | HTMLSelectElement;\r\n  private inputGreater: HTMLInputElement | HTMLSelectElement;\r\n\r\n  @Element() el: HTMLGxGridChameleonColumnFilterElement;\r\n\r\n  /**\r\n   * The grid column associated with this filter.\r\n   */\r\n  @Prop() readonly column!: GxGridColumn;\r\n\r\n  /**\r\n   * The text to display on the \"Apply\" button.\r\n   */\r\n  @Prop() readonly buttonApplyText: string;\r\n\r\n  /**\r\n   * The text to display on the \"Reset\" button.\r\n   */\r\n  @Prop() readonly buttonResetText: string;\r\n\r\n  /**\r\n   * The value to filter for equality comparison.\r\n   */\r\n  @Prop({ mutable: true }) equal: string;\r\n\r\n  /**\r\n   * The value to filter for less-than comparison.\r\n   */\r\n  @Prop({ mutable: true }) less: string;\r\n\r\n  /**\r\n   * The value to filter for greater-than comparison.\r\n   */\r\n  @Prop({ mutable: true }) greater: string;\r\n\r\n  /**\r\n   * Emitted when the filter settings for the column have changed.\r\n   * This event carries the updated filter values.\r\n   */\r\n  @Event()\r\n  columnSettingsChanged: EventEmitter<GridChameleonColumnFilterChanged>;\r\n\r\n  componentWillLoad() {\r\n    if (\r\n      Array.isArray(this.column.FilterEnum) &&\r\n      this.column.FilterEnum.length > 0\r\n    ) {\r\n      this.filterEnum = this.column.FilterEnum;\r\n    }\r\n  }\r\n\r\n  private applyClickHandler = () => {\r\n    this.equal = this.getControlValue(this.inputEqual);\r\n    this.less = this.getControlValue(this.inputLess);\r\n    this.greater = this.getControlValue(this.inputGreater);\r\n\r\n    this.columnSettingsChanged.emit({\r\n      column: this.column,\r\n      equal: this.equal,\r\n      less: this.less,\r\n      greater: this.greater\r\n    });\r\n  };\r\n\r\n  private resetClickHandler = () => {\r\n    this.equal = \"\";\r\n    this.less = \"\";\r\n    this.greater = \"\";\r\n\r\n    this.columnSettingsChanged.emit({\r\n      column: this.column,\r\n      equal: this.equal,\r\n      less: this.less,\r\n      greater: this.greater\r\n    });\r\n  };\r\n\r\n  private getControlValue(input: HTMLInputElement | HTMLSelectElement): string {\r\n    const value = input?.value ?? \"\";\r\n    let dataType = this.column.gxControl.dataType;\r\n\r\n    if (\r\n      dataType === GxControlDataType.DATETIME &&\r\n      this.column.FilterDateTimeAsDate === -1\r\n    ) {\r\n      dataType = GxControlDataType.DATE;\r\n    }\r\n\r\n    switch (dataType) {\r\n      case GxControlDataType.DATE:\r\n        return gx.date.ctod(value, \"Y4MD\").toString();\r\n      case GxControlDataType.DATETIME:\r\n        return gx.date.ctot(value, \"Y4MD\").toString();\r\n      default:\r\n        return value;\r\n    }\r\n  }\r\n\r\n  private toControlValue(value: string): string {\r\n    let dataType = this.column.gxControl.dataType;\r\n\r\n    if (!value) {\r\n      return \"\";\r\n    }\r\n\r\n    if (\r\n      dataType === GxControlDataType.DATETIME &&\r\n      this.column.FilterDateTimeAsDate === -1\r\n    ) {\r\n      dataType = GxControlDataType.DATE;\r\n    }\r\n\r\n    switch (dataType) {\r\n      case GxControlDataType.DATE:\r\n        return this.convertGxDateToISO(gx.date.ctod(value), false);\r\n      case GxControlDataType.DATETIME:\r\n        return this.convertGxDateToISO(gx.date.ctot(value), true);\r\n      default:\r\n        return value;\r\n    }\r\n  }\r\n\r\n  private convertGxDateToISO(gxdate: gxdate, isDateTime: boolean): string {\r\n    const pad = (n: number) => n.toString().padStart(2, \"0\");\r\n    const date = gxdate.Value;\r\n\r\n    if (gx.date.isNullDate(date)) {\r\n      return \"\";\r\n    }\r\n\r\n    if (isDateTime) {\r\n      return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(\r\n        date.getDate()\r\n      )}T${pad(date.getHours())}:${pad(date.getMinutes())}`;\r\n    }\r\n    return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(\r\n      date.getDate()\r\n    )}`;\r\n  }\r\n\r\n  private getFilterInputType(dataType: GxControlDataType): string {\r\n    switch (dataType) {\r\n      case GxControlDataType.BOOLEAN:\r\n        return \"checkbox\";\r\n      case GxControlDataType.CHAR:\r\n      case GxControlDataType.VARCHAR:\r\n      case GxControlDataType.LONGVARCHAR:\r\n        return \"text\";\r\n      case GxControlDataType.DATE:\r\n        return \"date\";\r\n      case GxControlDataType.DATETIME:\r\n        return \"datetime-local\";\r\n      case GxControlDataType.NUMBER:\r\n        return \"number\";\r\n      default:\r\n        return \"text\";\r\n    }\r\n  }\r\n\r\n  private renderColumnFilterControl(\r\n    input: string,\r\n    type: GxControlType,\r\n    dataType: GxControlDataType,\r\n    possibleValues: GxControlPossibleValues,\r\n    label: string,\r\n    value: string\r\n  ) {\r\n    const part = input.replace(\"input\", \"\").toLowerCase();\r\n\r\n    if (this.filterEnum.length > 0) {\r\n      type = GxControlType.COMBO;\r\n      possibleValues = this.filterEnum.map(filter => [\r\n        filter.Value,\r\n        filter.Description\r\n      ]);\r\n    }\r\n\r\n    if (\r\n      dataType === GxControlDataType.DATETIME &&\r\n      this.column.FilterDateTimeAsDate === -1\r\n    ) {\r\n      dataType = GxControlDataType.DATE;\r\n    }\r\n\r\n    switch (type) {\r\n      case GxControlType.EDIT:\r\n      case GxControlType.CHECK:\r\n        return (\r\n          <label part={`label ${part}`}>\r\n            {label}\r\n            <input\r\n              type={this.getFilterInputType(dataType)}\r\n              value={this.toControlValue(value)}\r\n              ref={el => (this[input] = el)}\r\n              part={`field ${part}`}\r\n            />\r\n          </label>\r\n        );\r\n      case GxControlType.COMBO:\r\n        return (\r\n          <label part={`label ${part}`}>\r\n            {label}\r\n            <select ref={el => (this[input] = el)} part={`field ${part}`}>\r\n              {possibleValues.map(([optionValue, optionDescription]) => (\r\n                <option value={optionValue} selected={optionValue === value}>\r\n                  {optionDescription}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </label>\r\n        );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <fieldset part=\"main\">\r\n          <caption part=\"caption\">{this.column.FilterCaption}</caption>\r\n          {this.column.FilterMode === \"single\" &&\r\n            this.renderColumnFilterControl(\r\n              \"inputEqual\",\r\n              this.column.gxControl.type,\r\n              this.column.gxControl.dataType,\r\n              this.column.gxControl.possibleValues,\r\n              this.column.FilterLabelEqual,\r\n              this.equal\r\n            )}\r\n          {this.column.FilterMode === \"range\" &&\r\n            this.renderColumnFilterControl(\r\n              \"inputGreater\",\r\n              this.column.gxControl.type,\r\n              this.column.gxControl.dataType,\r\n              this.column.gxControl.possibleValues,\r\n              this.column.FilterLabelGreater,\r\n              this.greater\r\n            )}\r\n          {this.column.FilterMode === \"range\" &&\r\n            this.renderColumnFilterControl(\r\n              \"inputLess\",\r\n              this.column.gxControl.type,\r\n              this.column.gxControl.dataType,\r\n              this.column.gxControl.possibleValues,\r\n              this.column.FilterLabelLess,\r\n              this.less\r\n            )}\r\n        </fieldset>\r\n        <section part=\"footer\">\r\n          <button part=\"button reset\" onClick={this.resetClickHandler}>\r\n            {this.buttonResetText}\r\n          </button>\r\n          <button part=\"button apply\" onClick={this.applyClickHandler}>\r\n            {this.buttonApplyText}\r\n          </button>\r\n        </section>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n\r\nexport interface GridChameleonColumnFilterEnum {\r\n  Description: string;\r\n  Value: string;\r\n}\r\n\r\nexport interface GridChameleonColumnFilterChanged {\r\n  column: GxGridColumn;\r\n  equal?: string;\r\n  less?: string;\r\n  greater?: string;\r\n}\r\n"],"mappings":"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"}