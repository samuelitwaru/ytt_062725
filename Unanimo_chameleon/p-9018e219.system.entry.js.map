{"version":3,"names":["chTreeItemCss","ChTreeItemStyle0","treeRef","ChTreeItem","exports","undefined","class_1","prototype","componentWillLoad","this","el","parentElement","numberOfParentTrees","getParents","treeItemHasTree","querySelector","isLeaf","hasChildTree","prevItem","previousElementSibling","firstTreeItem","nextItem","nextElementSibling","lastTreeItem","prevItem_1","firstTreeItemOfParentTree","nextItem_1","lastTreeItemOfParentTree","download","rightIcon","includes","rightIconColor","disabled","opened","checkbox","checked","getNumberOfVisibleDescendants","directTree","visibleChildren","querySelectorAll","directDescendants","lastDirectDescendant","length","lastDirectDescendantIsOpened","lastDirectDescendantTreeItemsLength","lastDirectDescendantTree","numberOfDirectTreeItemsDescendants","setVisibleTreeItems","directTreeDirectTreeItems","forEach","item","classList","remove","add","componentDidLoad","watchHandler","newValue","elem","numberOfTreeParents","document","parentNode","elemTagNAme","tagName","push","toggleTreeIconClicked","event","toggleIconClicked","emit","stopPropagation","preventDefault","updateTreeVerticalLineHeight","liTextClicked","liItemClicked","selected","liTextDoubleClicked","liTextKeyDownPressed","e","key","checkboxClicked","click","childTree","childTreeFirstChildren","childTreeFirstChildrenLiText","shadowRoot","focus","hasParent","parentChTreeItem","parentChTreeItemLiText","li","contains","shiftKey","prevElementSibling","parentItem","parentParentItem","prevElementSiblingHasChildTree","prevElementSiblingHasOpenTree","prevElemSiblingTreeItem","prevElemSiblingTreeItemTree","lastElementChild","firstElementChild","thisTree","thisTreeParent","thisTreeParentNextTree","childTreeFirstTreeItem","returnToggleIconType","returnPaddingLeft","paddingLeft","itemPaddingLeft","returnVerticalLineLeftPosition","checkboxTabIndex","liTextTabIndex","setIndeterminate","indeterminate","toggleTreeItemsCheckboxes","checkboxClickedEvent","id","toggleCheckboxes","items","parentTree","childTreeItems","treeItem","resolveLeftIcon","leftIcon","resolveRightIcon","render","h","Host","class","leaf","style","onClick","bind","onDblClick","onKeyDown","tabIndex","part","height","left","src","color","loading","name"],"sources":["src/deprecated-components/tree-item/ch-tree-item.scss?tag=ch-tree-item&encapsulation=shadow","src/deprecated-components/tree-item/ch-tree-item.tsx"],"sourcesContent":["@import \"../../deprecated-globals/normalize.scss\";\r\n@import \"../../deprecated-globals/mixins.scss\";\r\n\r\n:host {\r\n  /**\r\n  * @prop --text-color: The color of the text\r\n  */\r\n  --text-color: var(--black);\r\n  /**\r\n  * @prop --font-family: The text font family\r\n  */\r\n  --font-family: \"Source Sans Pro\", sans-serif;\r\n  /**\r\n  * @prop --font-weight: The text font weight\r\n  */\r\n  --font-weight: normal;\r\n  /**\r\n  * @prop --font-size: The text font size\r\n  */\r\n  --font-size: 12px;\r\n  /**\r\n  * @prop --guide-color: The color of the tree guides\r\n  */\r\n  --guide-color: var(--darkGray);\r\n  /**\r\n  * @prop --item-hover-color: The color of the item on hover\r\n  */\r\n  --item-hover-color: var(--lightGray);\r\n  /**\r\n  * @prop --item-active-color: The color of the active item\r\n  */\r\n  --item-active-color: var(--silverGray);\r\n\r\n  .text {\r\n    padding-left: var(--spacing-comp-01);\r\n  }\r\n\r\n  display: block;\r\n  li {\r\n    list-style: none;\r\n    font-family: var(--font-family);\r\n    font-size: var(--font-size);\r\n    font-weight: var(--font-weight);\r\n    color: var(--text-color);\r\n    height: 20px;\r\n    overflow: hidden;\r\n\r\n    &.tree-open {\r\n      height: auto;\r\n    }\r\n    // &.disabled {\r\n    //   .text {\r\n    //     color: var(--gray-05);\r\n    //   }\r\n    // }\r\n\r\n    .li-text {\r\n      height: 100%;\r\n      padding: 0 var(--spacing-comp-02);\r\n      cursor: pointer;\r\n      display: flex;\r\n      align-items: center;\r\n      position: relative;\r\n      //overflow: hidden;\r\n      &--focused {\r\n      }\r\n      &:hover {\r\n        background-color: var(--item-hover-color);\r\n      }\r\n      &:active {\r\n        background-color: var(--item-active-color);\r\n      }\r\n      &:focus {\r\n        outline: none;\r\n        box-shadow: inset 0px 0px 0px 2px var(--color-primary-active);\r\n      }\r\n      &--not-leaf {\r\n        .horizontal-line {\r\n          //margin-left: -18px;\r\n        }\r\n      }\r\n      &--selected {\r\n        background-color: var(--item-active-color);\r\n        &:hover {\r\n          background-color: var(--item-hover-color);\r\n        }\r\n      }\r\n\r\n      &--only-one-parent-tree {\r\n      }\r\n    }\r\n    .vertical-line {\r\n      position: absolute;\r\n      width: 1px;\r\n      height: 0;\r\n      top: 21px;\r\n      left: 15px;\r\n      z-index: 1;\r\n      //border style\r\n      background-image: linear-gradient(\r\n        var(--guide-color) 28%,\r\n        rgba(255, 255, 255, 0) 0%\r\n      );\r\n      background-position: right;\r\n      background-size: 1px 4px;\r\n      background-repeat: repeat-y;\r\n    }\r\n    .horizontal-line {\r\n      position: absolute;\r\n      width: 16px;\r\n      height: 1px;\r\n      top: 11px;\r\n      z-index: 1;\r\n      margin-left: -23px;\r\n      top: 10px;\r\n      //border style\r\n      background-image: linear-gradient(\r\n        to right,\r\n        var(--guide-color) 33%,\r\n        rgba(255, 255, 255, 0) 0%\r\n      );\r\n      background-position: bottom;\r\n      background-size: 3px 1px;\r\n      background-repeat: repeat-x;\r\n      &.display-none {\r\n        display: none;\r\n      }\r\n    }\r\n    .closed-opened-icons {\r\n      position: relative;\r\n      display: flex;\r\n      margin-left: -2px;\r\n    }\r\n    .toggle-icon {\r\n      position: relative;\r\n      z-index: 2;\r\n      padding-left: 3px;\r\n      padding-right: 3px;\r\n      @include ui-animation-slow(opacity);\r\n    }\r\n  }\r\n  .checkbox {\r\n    margin-right: var(--spacing-comp-01);\r\n  }\r\n\r\n  .icon {\r\n    height: 20px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding-left: 2px;\r\n    padding-right: 2px;\r\n  }\r\n\r\n  .right-icon {\r\n    margin-inline-start: auto;\r\n    position: relative;\r\n    top: 0;\r\n    @include ui-animation-slow(top);\r\n  }\r\n\r\n  .loading {\r\n    opacity: 1;\r\n    display: inline;\r\n    $base-line-height: 8px;\r\n    $white: var(--gray-01);\r\n    $off-white: var(--gray-04);\r\n    $spin-duration: 1s;\r\n    $pulse-duration: 750ms;\r\n    right: 11px;\r\n    top: -20px;\r\n    position: absolute;\r\n    z-index: 1;\r\n    @include ui-animation-slow(all);\r\n\r\n    //The loading animation\r\n    border-radius: 50%;\r\n    width: $base-line-height;\r\n    height: $base-line-height;\r\n    border: 0.18rem solid $off-white;\r\n    border-top-color: $white;\r\n    animation: spin $spin-duration infinite linear;\r\n    &--double {\r\n      border-style: double;\r\n      border-width: 0.5rem;\r\n    }\r\n  }\r\n  @keyframes spin {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n}\r\n\r\n.label input[disabled] {\r\n  color: red;\r\n}\r\n\r\n:host([disabled]) {\r\n  li {\r\n    .text {\r\n      color: var(--darkGray);\r\n    }\r\n  }\r\n  .toggle-icon {\r\n    pointer-events: none;\r\n  }\r\n}\r\n:host([downloading]) {\r\n  .right-icon {\r\n    top: 20px;\r\n  }\r\n  .loading {\r\n    top: 3px;\r\n  }\r\n  pointer-events: none;\r\n}\r\n:host([downloaded]) {\r\n  .loading,\r\n  .right-icon {\r\n    opacity: 0;\r\n  }\r\n}\r\n","/* eslint-disable no-lonely-if */\r\n/* eslint-disable @stencil-community/required-jsdoc */\r\nimport {\r\n  Component,\r\n  Event,\r\n  EventEmitter,\r\n  Element,\r\n  Host,\r\n  Prop,\r\n  State,\r\n  h,\r\n  Watch,\r\n  Method\r\n} from \"@stencil/core\";\r\nimport { Color } from \"../icon/icon\";\r\nimport { ChTree } from \"../tree/ch-tree\";\r\n\r\nlet treeRef: HTMLChTreeElement;\r\n@Component({\r\n  tag: \"ch-tree-item\",\r\n  styleUrl: \"ch-tree-item.scss\",\r\n  shadow: true,\r\n  assetsDirs: [\"tree-item-assets\"]\r\n})\r\nexport class ChTreeItem {\r\n  checkboxInput!: HTMLInputElement;\r\n\r\n  // PROPS\r\n  /**\r\n   * Set this attribute if you want the ch-tree-item to display a checkbox\r\n   */\r\n  @Prop({ mutable: true }) checkbox: boolean = false;\r\n\r\n  /**\r\n   * Set this attribute if you want the ch-tree-item checkbox to be checked by default\r\n   */\r\n  @Prop({ mutable: true }) checked = false;\r\n\r\n  /**\r\n   * Set this attribute if this tree-item has a resource to be downloaded;\r\n   */\r\n  @Prop() readonly download: boolean = false;\r\n\r\n  /**\r\n   * Set this attribute when you are downloading a resource\r\n   */\r\n  @Prop() readonly downloading: boolean = false;\r\n\r\n  /**\r\n   * Set this attribute when you have downloaded the resource\r\n   */\r\n  @Prop() readonly downloaded: boolean = false;\r\n\r\n  /**\r\n   * Set the left side icon from the available Gemini icon set : https://gx-gemini.netlify.app/?path=/story/icons-icons--controls\r\n   */\r\n  @Prop() readonly leftIcon: string;\r\n\r\n  /**\r\n   * Set thhe right side icon from the available Gemini icon set : https://gx-gemini.netlify.app/?path=/story/icons-icons--controls\r\n   */\r\n  @Prop() readonly rightIcon: string;\r\n\r\n  /**\r\n   * If this tree-item has a nested tree, set this attribute to make the tree open by default\r\n   */\r\n  @Prop({ mutable: true }) opened = false;\r\n\r\n  /**\r\n   * The presence of this attribute sets the tree-item as selected\r\n   */\r\n  @Prop({ mutable: true }) selected = false;\r\n\r\n  /**\r\n   * The presence of this attribute displays a +/- icon to toggle/untoggle the tree\r\n   */\r\n  @Prop({ mutable: true }) isLeaf: boolean = undefined;\r\n\r\n  // PROPS\r\n  @Prop({ mutable: true }) hasChildTree = false;\r\n  @Prop({ mutable: true }) firstTreeItem = false;\r\n  @Prop({ mutable: true }) indeterminate: boolean;\r\n  @Prop() readonly disabled: boolean = false;\r\n\r\n  // STATE\r\n  @State() numberOfParentTrees = 1;\r\n  @State() itemPaddingLeft;\r\n  // @State() verticalLineHeight: string;\r\n  @State() horizontalLinePaddingLeft = 0;\r\n  @State() lastTreeItem = false;\r\n  @State() firstTreeItemOfParentTree = false;\r\n  @State() lastTreeItemOfParentTree = false;\r\n  @State() rightIconColor: Color = \"auto\";\r\n  @State() numberOfDirectTreeItemsDescendants = 0;\r\n\r\n  // EVENTS\r\n  @Event() liItemClicked: EventEmitter;\r\n  @Event() toggleIconClicked: EventEmitter;\r\n\r\n  /**\r\n   * Emits the checkbox information (chTreeItemData) that includes: the id, name(innerText) and checkbox value.\r\n   */\r\n  @Event() checkboxClickedEvent: EventEmitter<chTreeItemData>;\r\n\r\n  @Element() el: HTMLChTreeItemElement;\r\n\r\n  componentWillLoad() {\r\n    treeRef ||= this.el.parentElement as HTMLChTreeElement;\r\n\r\n    // Count number of parent trees in order to set the apporpiate padding-left\r\n    this.numberOfParentTrees = this.getParents(this.el);\r\n\r\n    // If tree item has not a tree-item inside, is leaf\r\n    const treeItemHasTree = this.el.querySelector('[slot=\"tree\"]');\r\n    if (this.isLeaf === undefined) {\r\n      if (treeItemHasTree === null) {\r\n        this.isLeaf = true;\r\n      } else {\r\n        this.hasChildTree = true;\r\n      }\r\n    }\r\n    // If is first item of tree\r\n    const prevItem = this.el.previousElementSibling;\r\n    if (prevItem === null) {\r\n      this.firstTreeItem = true;\r\n    }\r\n    // If is last item of tree\r\n    const nextItem = this.el.nextElementSibling;\r\n    if (nextItem === null) {\r\n      this.lastTreeItem = true;\r\n    }\r\n    // If is first item of parent Tree\r\n    if (this.numberOfParentTrees === 1) {\r\n      const prevItem = this.el.previousElementSibling;\r\n      if (prevItem === null) {\r\n        this.firstTreeItemOfParentTree = true;\r\n      }\r\n    }\r\n    // If is last item of parent Tree\r\n    if (this.numberOfParentTrees === 1) {\r\n      const nextItem = this.el.nextElementSibling;\r\n      if (nextItem === null) {\r\n        this.lastTreeItemOfParentTree = true;\r\n      }\r\n    }\r\n\r\n    // Set right icon color\r\n    if (this.download && this.rightIcon.includes(\"download\")) {\r\n      this.rightIconColor = \"primary-enabled\";\r\n    } else if (this.disabled) {\r\n      this.rightIconColor = \"disabled\";\r\n    }\r\n\r\n    // If this tree item has a source to download, this item has child tree, and is not leaf. Also, set the tree as not open\r\n    if (this.download) {\r\n      this.hasChildTree = true;\r\n      this.isLeaf = false;\r\n      this.opened = false;\r\n    }\r\n\r\n    // CONFIGURATIONS THAT COME FROM FROM MASTER TREE\r\n    if (treeRef.checkbox) {\r\n      this.checkbox = true;\r\n      this.checked = treeRef.checked;\r\n    }\r\n  }\r\n\r\n  getNumberOfVisibleDescendants() {\r\n    const directTree = this.el.querySelector(\":scope > ch-tree\");\r\n\r\n    if (directTree !== null && this.opened) {\r\n      // if tree item has a tree inside and is open...\r\n      const visibleChildren = directTree.querySelectorAll(\r\n        \"ch-tree-item.visible\"\r\n      );\r\n\r\n      // direct descendants\r\n      const directDescendants = directTree.querySelectorAll(\r\n        \":scope > ch-tree-item.visible\"\r\n      );\r\n\r\n      // last direct descendant\r\n      const lastDirectDescendant =\r\n        directDescendants[directDescendants.length - 1];\r\n\r\n      const lastDirectDescendantIsOpened = (\r\n        lastDirectDescendant as unknown as ChTreeItem\r\n      ).opened;\r\n\r\n      let lastDirectDescendantTreeItemsLength = 0;\r\n      if (lastDirectDescendantIsOpened) {\r\n        const lastDirectDescendantTree =\r\n          lastDirectDescendant.querySelector(\":scope > ch-tree\");\r\n        lastDirectDescendantTreeItemsLength =\r\n          lastDirectDescendantTree.querySelectorAll(\r\n            \":scope > ch-tree-item\"\r\n          ).length;\r\n      }\r\n\r\n      if (visibleChildren.length > 0) {\r\n        this.numberOfDirectTreeItemsDescendants =\r\n          visibleChildren.length - lastDirectDescendantTreeItemsLength;\r\n      }\r\n    }\r\n  }\r\n\r\n  setVisibleTreeItems() {\r\n    const directTree = this.el.querySelector(\":scope > ch-tree\");\r\n    if (directTree !== null) {\r\n      const directTreeDirectTreeItems = directTree.querySelectorAll(\r\n        \":scope > ch-tree-item\"\r\n      );\r\n      if (this.opened) {\r\n        directTreeDirectTreeItems.forEach(item => {\r\n          item.classList.remove(\"not-visible\");\r\n          item.classList.add(\"visible\");\r\n        });\r\n      } else {\r\n        directTreeDirectTreeItems.forEach(item => {\r\n          item.classList.remove(\"visible\");\r\n          item.classList.add(\"not-visible\");\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidLoad() {\r\n    this.setVisibleTreeItems();\r\n    this.getNumberOfVisibleDescendants();\r\n  }\r\n\r\n  @Watch(\"downloaded\")\r\n  watchHandler(newValue: boolean) {\r\n    if (newValue) {\r\n      // this.updateTreeVerticalLineHeight();\r\n    }\r\n  }\r\n\r\n  getParents(elem) {\r\n    // Returns the number of parent tree items in order to set the appropriate paddding-left\r\n    // Set up a parent array\r\n    const numberOfTreeParents = [];\r\n\r\n    // Push each parent element to the array\r\n    for (; elem && elem !== document; elem = elem.parentNode) {\r\n      const elemTagNAme = elem.tagName;\r\n      if (elemTagNAme === \"CH-TREE\") {\r\n        numberOfTreeParents.push(elem);\r\n      }\r\n    }\r\n    return numberOfTreeParents.length;\r\n  }\r\n\r\n  toggleTreeIconClicked() {\r\n    if (this.opened) {\r\n      this.opened = false;\r\n    } else {\r\n      this.opened = true;\r\n    }\r\n    this.setVisibleTreeItems();\r\n    // this.toggleIconClicked.emit();\r\n    const event = this.toggleIconClicked.emit();\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n  }\r\n\r\n  @Method()\r\n  async updateTreeVerticalLineHeight() {\r\n    this.getNumberOfVisibleDescendants();\r\n  }\r\n\r\n  liTextClicked() {\r\n    this.liItemClicked.emit();\r\n    this.selected = true;\r\n  }\r\n\r\n  liTextDoubleClicked() {\r\n    this.toggleTreeIconClicked();\r\n  }\r\n\r\n  liTextKeyDownPressed(e) {\r\n    if (e.key === \"ArrowDown\" || e.key === \"ArrowUp\") {\r\n      e.preventDefault(); // prevents scrolling\r\n    }\r\n    // ENTER\r\n    if (e.key === \"Enter\") {\r\n      // Enter should check/uncheck the checkbox (if present)\r\n      this.checkboxClicked();\r\n      if (this.download) {\r\n        // If the item has a resource to be downloaded, download.\r\n        this.el.click();\r\n      }\r\n    }\r\n    // LEFT/RIGHT NAVIGATION\r\n    if (e.key === \"ArrowRight\" && !this.isLeaf) {\r\n      // Toggle the tree\r\n      if (!this.opened) {\r\n        this.opened = true;\r\n      } else {\r\n        const childTree = this.el.querySelector(\"ch-tree\");\r\n        const childTreeFirstChildren = childTree.querySelector(\"ch-tree-item\");\r\n        const childTreeFirstChildrenLiText =\r\n          childTreeFirstChildren.shadowRoot.querySelector(\".li-text\");\r\n        (childTreeFirstChildrenLiText as HTMLElement).focus();\r\n      }\r\n      this.setVisibleTreeItems();\r\n      this.toggleIconClicked.emit(); // this recalculates the vertical line height\r\n    }\r\n\r\n    if (e.key === \"ArrowLeft\") {\r\n      let hasParent = false;\r\n      const parentChTreeItem = this.el.parentElement.parentElement;\r\n      let parentChTreeItemLiText = null;\r\n      if (parentChTreeItem.tagName === \"CH-TREE-ITEM\") {\r\n        hasParent = true;\r\n        parentChTreeItemLiText = parentChTreeItem.shadowRoot.querySelector(\r\n          \".li-text\"\r\n        ) as HTMLElement;\r\n      }\r\n\r\n      if (this.isLeaf) {\r\n        if (hasParent) {\r\n          parentChTreeItemLiText.focus();\r\n        }\r\n      } else {\r\n        const li = this.el.shadowRoot.querySelector(\"li\");\r\n        if (li.classList.contains(\"tree-open\")) {\r\n          this.opened = false;\r\n        } else if (hasParent) {\r\n          parentChTreeItemLiText.focus();\r\n        }\r\n      }\r\n      this.setVisibleTreeItems();\r\n      this.toggleIconClicked.emit(); // this recalculates the vertical line height\r\n    }\r\n\r\n    // UP/DOWN NAVIGATION\r\n    if (e.key === \"ArrowUp\" || (e.key === \"Tab\" && e.shiftKey)) {\r\n      e.preventDefault();\r\n      if (!this.firstTreeItemOfParentTree) {\r\n        // Is not the first element of the parent\r\n        // Set focus on the prev item\r\n        let prevItem;\r\n        const prevElementSibling = this.el.previousElementSibling;\r\n\r\n        if (e.shiftKey && e.key !== \"Tab\") {\r\n          // if shift key was pressed, navigate to the previous sibling\r\n          if (prevElementSibling !== null) {\r\n            prevItem =\r\n              prevElementSibling.shadowRoot.querySelector(\"li .li-text\");\r\n          }\r\n        } else if (prevElementSibling === null) {\r\n          const parentItem = this.el.parentElement;\r\n          const parentParentItem = parentItem.parentElement;\r\n          prevItem = parentParentItem.shadowRoot.querySelector(\"li .li-text\");\r\n        } else {\r\n          prevItem = prevElementSibling.shadowRoot.querySelector(\"li .li-text\");\r\n          if (prevElementSibling !== null) {\r\n            // If the preceding tree-item has tree inside...\r\n            const prevElementSiblingHasChildTree = (\r\n              prevElementSibling as unknown as ChTreeItem\r\n            ).hasChildTree;\r\n            if (prevElementSiblingHasChildTree) {\r\n              const prevElementSiblingHasOpenTree = (\r\n                prevElementSibling as unknown as ChTreeItem\r\n              ).opened;\r\n              if (prevElementSiblingHasOpenTree && !this.download) {\r\n                // If preceding tree-item tree is opened, then the prev item is the last item of that tree\r\n                const prevElemSiblingTreeItem = this.el.previousElementSibling;\r\n                const prevElemSiblingTreeItemTree =\r\n                  prevElemSiblingTreeItem.querySelector(\"ch-tree\");\r\n                //\r\n                if (\r\n                  (\r\n                    prevElemSiblingTreeItemTree.lastElementChild as unknown as ChTreeItem\r\n                  ).hasChildTree\r\n                ) {\r\n                  if (\r\n                    prevElemSiblingTreeItemTree.lastElementChild.shadowRoot\r\n                      .querySelector(\"li\")\r\n                      .classList.contains(\"tree-open\")\r\n                  ) {\r\n                    prevItem = prevElemSiblingTreeItemTree.lastElementChild\r\n                      .querySelector(\"ch-tree\")\r\n                      .lastElementChild.shadowRoot.querySelector(\"li .li-text\");\r\n                  } else {\r\n                    prevItem =\r\n                      prevElemSiblingTreeItemTree.lastElementChild.shadowRoot.querySelector(\r\n                        \"li .li-text\"\r\n                      );\r\n                  }\r\n                } else {\r\n                  prevItem =\r\n                    prevElemSiblingTreeItemTree.lastElementChild.shadowRoot.querySelector(\r\n                      \"li .li-text\"\r\n                    );\r\n                }\r\n                //\r\n              } else {\r\n                // The preciding item has a tree, but it is closed\r\n                prevItem =\r\n                  this.el.previousElementSibling.shadowRoot.querySelector(\r\n                    \"li .li-text\"\r\n                  );\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (prevItem !== null && prevItem !== undefined) {\r\n          (prevItem as HTMLElement).focus();\r\n        }\r\n      }\r\n    }\r\n    if (e.key === \"ArrowDown\" || (e.key === \"Tab\" && !e.shiftKey)) {\r\n      e.preventDefault();\r\n      if (!this.lastTreeItemOfParentTree) {\r\n        // Set focus on the next item\r\n        let nextItem;\r\n\r\n        if (e.shiftKey) {\r\n          // if shift key was pressed, navigate to the next sibling\r\n          if (this.el.nextElementSibling !== null) {\r\n            nextItem =\r\n              this.el.nextElementSibling.shadowRoot.querySelector(\r\n                \"li .li-text\"\r\n              );\r\n          }\r\n        } else if (this.lastTreeItem) {\r\n          if (this.hasChildTree && this.opened) {\r\n            nextItem =\r\n              this.el.firstElementChild.firstElementChild.shadowRoot.querySelector(\r\n                \".li-text\"\r\n              );\r\n          } else {\r\n            const thisTree = this.el.parentElement;\r\n            const thisTreeParent = thisTree.parentElement;\r\n            const thisTreeParentNextTree = thisTreeParent.nextElementSibling;\r\n            if (thisTreeParentNextTree === null) {\r\n              if (\r\n                thisTreeParent.parentElement.parentElement\r\n                  .nextElementSibling !== null\r\n              ) {\r\n                nextItem =\r\n                  thisTreeParent.parentElement.parentElement.nextElementSibling.shadowRoot.querySelector(\r\n                    \".li-text\"\r\n                  );\r\n              }\r\n            } else {\r\n              nextItem = (\r\n                thisTreeParentNextTree as HTMLElement\r\n              ).shadowRoot.querySelector(\".li-text\");\r\n            }\r\n          }\r\n        } else if (this.hasChildTree && this.opened && !this.download) {\r\n          nextItem = this.el\r\n            .querySelector(\"ch-tree ch-tree-item\")\r\n            .shadowRoot.querySelector(\"li .li-text\");\r\n        } else {\r\n          nextItem =\r\n            this.el.nextElementSibling.shadowRoot.querySelector(\".li-text\");\r\n        }\r\n        if (nextItem !== null && nextItem !== undefined) {\r\n          (nextItem as HTMLElement).focus();\r\n        }\r\n      } else {\r\n        // Last element of parent tree\r\n        if (\r\n          this.el.classList.contains(\"not-leaf\") &&\r\n          this.el.shadowRoot.querySelector(\"li\").classList.contains(\"tree-open\")\r\n        ) {\r\n          const childTreeFirstTreeItem =\r\n            this.el.firstElementChild.firstElementChild.shadowRoot.querySelector(\r\n              \"li .li-text\"\r\n            );\r\n          (childTreeFirstTreeItem as HTMLElement).focus();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  returnToggleIconType() {\r\n    // Returns the type of icon : expand or collapse\r\n    if (!this.opened || this.download) {\r\n      return \"expand-icon\";\r\n    }\r\n    return \"collapse-icon\";\r\n  }\r\n\r\n  returnPaddingLeft() {\r\n    // returns the appropriate padding left to the .li-text element\r\n    let paddingLeft = 0;\r\n\r\n    if (this.numberOfParentTrees !== 1) {\r\n      paddingLeft = (this.numberOfParentTrees - 1) * 31 + 5;\r\n    } else {\r\n      paddingLeft = 5;\r\n    }\r\n    if (!this.isLeaf && this.numberOfParentTrees !== 1) {\r\n      // paddingLeft -= 5;\r\n    }\r\n    this.itemPaddingLeft = paddingLeft;\r\n    return paddingLeft + \"px\";\r\n  }\r\n\r\n  returnVerticalLineLeftPosition() {\r\n    // Returns the left position of the vertical line that associates the chid-items with the parent item\r\n    if (this.numberOfParentTrees !== 1) {\r\n      return this.itemPaddingLeft + 5 + \"px\";\r\n    }\r\n    return this.itemPaddingLeft + 5 + \"px\";\r\n  }\r\n\r\n  checkboxTabIndex() {\r\n    return -1;\r\n  }\r\n  liTextTabIndex() {\r\n    return 1;\r\n  }\r\n\r\n  setIndeterminate() {\r\n    if (this.indeterminate) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  checkboxClicked() {\r\n    if (this.checkbox) {\r\n      this.checked = !this.checked;\r\n      this.toggleTreeItemsCheckboxes(this.checked);\r\n      this.checkboxClickedEvent.emit({\r\n        checked: this.checked,\r\n        id: this.el.id\r\n      });\r\n    }\r\n    if (treeRef.toggleCheckboxes) {\r\n      const items = this.el.querySelectorAll(\"ch-tree-item\");\r\n      items.forEach(item => {\r\n        if (item.checkbox) {\r\n          item.checked = !item.checked;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  toggleTreeItemsCheckboxes(checked) {\r\n    // Only do if toggleCheckboxes property exists in parent tree\r\n    const parentTree = this.el.parentElement as unknown as ChTree;\r\n    if (parentTree.toggleCheckboxes) {\r\n      this.indeterminate = false;\r\n      const childTree = this.el.querySelector(\"ch-tree\");\r\n      if (childTree !== null) {\r\n        const childTreeItems = childTree.querySelectorAll(\"ch-tree-item\");\r\n        childTreeItems.forEach(function (treeItem) {\r\n          if (checked) {\r\n            treeItem.checked = true;\r\n          } else {\r\n            treeItem.checked = false;\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  resolveLeftIcon() {\r\n    if (this.leftIcon !== undefined) {\r\n      return this.leftIcon;\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  resolveRightIcon() {\r\n    if (this.rightIcon !== undefined) {\r\n      return this.rightIcon;\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host class={{ leaf: this.isLeaf, \"not-leaf\": !this.isLeaf }}>\r\n        <li\r\n          class={{\r\n            \"tree-open\": this.opened,\r\n            disabled: this.disabled\r\n          }}\r\n        >\r\n          <div\r\n            class={{\r\n              \"li-text\": true,\r\n              \"li-text--not-leaf\": !this.isLeaf,\r\n              \"li-text--leaf\": this.isLeaf,\r\n              \"li-text--first-tree-item\": this.firstTreeItem,\r\n              \"li-text--has-child-tree\": this.hasChildTree,\r\n              \"li-text--selected\": this.selected\r\n            }}\r\n            style={{ paddingLeft: this.returnPaddingLeft() }}\r\n            onClick={this.liTextClicked.bind(this)}\r\n            onDblClick={this.liTextDoubleClicked.bind(this)}\r\n            onKeyDown={this.liTextKeyDownPressed.bind(this)}\r\n            tabIndex={this.liTextTabIndex()}\r\n            part=\"list-item\"\r\n          >\r\n            {!this.isLeaf || this.download\r\n              ? [\r\n                  <span\r\n                    class={{ \"vertical-line\": true }}\r\n                    style={{\r\n                      // height: this.verticalLineHeight,\r\n                      height:\r\n                        this.numberOfDirectTreeItemsDescendants * 20 -\r\n                        10 +\r\n                        \"px\",\r\n                      left: this.returnVerticalLineLeftPosition()\r\n                    }}\r\n                  ></span>,\r\n                  <div class={{ \"closed-opened-icons\": true }}>\r\n                    <div\r\n                      part={this.returnToggleIconType()}\r\n                      class=\"icon toggle-icon\"\r\n                      onClick={this.toggleTreeIconClicked.bind(this)}\r\n                    ></div>\r\n                  </div>\r\n                ]\r\n              : null}\r\n            <span\r\n              class={{\r\n                \"horizontal-line\": true,\r\n                \"display-none\": this.numberOfParentTrees === 1\r\n              }}\r\n              style={{\r\n                left: this.itemPaddingLeft + \"px\"\r\n              }}\r\n            ></span>\r\n            {this.checkbox ? (\r\n              <ch-form-checkbox\r\n                part=\"checkbox\"\r\n                checked={this.checked}\r\n                class={{ checkbox: true }}\r\n                tabIndex={this.checkboxTabIndex()}\r\n                indeterminate={this.setIndeterminate()}\r\n                disabled={this.disabled}\r\n                onClick={this.checkboxClicked.bind(this)}\r\n              ></ch-form-checkbox>\r\n            ) : null}\r\n            <span part=\"left-icon\"></span>\r\n            {this.leftIcon ? (\r\n              <ch-icon\r\n                src={this.resolveLeftIcon()}\r\n                auto-color={this.disabled ? \"disabled\" : \"auto\"}\r\n                class=\"icon\"\r\n                style={{\r\n                  \"--icon-size\": \"14px\"\r\n                }}\r\n              ></ch-icon>\r\n            ) : null}\r\n            <span class=\"text\">\r\n              <slot></slot>\r\n            </span>\r\n            {this.rightIcon ? (\r\n              <ch-icon\r\n                src={this.resolveRightIcon()}\r\n                color={this.rightIconColor}\r\n                class={{ \"right-icon\": true }}\r\n                style={{\r\n                  \"--icon-size\": \"14px\"\r\n                }}\r\n              ></ch-icon>\r\n            ) : null}\r\n            <span part=\"right-icon\"></span>\r\n            {this.download ? <span class={{ loading: true }}></span> : null}\r\n          </div>\r\n          <slot name=\"tree\"></slot>\r\n        </li>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n\r\nexport type chTreeItemData = {\r\n  checked: boolean;\r\n  id: string;\r\n};\r\n"],"mappings":"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"}