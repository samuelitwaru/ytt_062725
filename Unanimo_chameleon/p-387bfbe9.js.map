{"version":3,"names":["e","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","t","defaultToken","tokenPostfix","token","keywords","namespaceFollows","parenFollows","operators","symbols","escapes","tokenizer","root","cases","next","include","qualified","namespace","comment","string","litstring","litinterpstring","interpolatedstring","whitespace"],"sources":["src/components/code-editor/monaco/output/csharp-BZz0OSMf.js"],"sourcesContent":["var e = { wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\$\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g, comments: { lineComment: \"//\", blockComment: [\"/*\", \"*/\"] }, brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]], autoClosingPairs: [{ open: \"{\", close: \"}\" }, { open: \"[\", close: \"]\" }, { open: \"(\", close: \")\" }, { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] }, { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] }], surroundingPairs: [{ open: \"{\", close: \"}\" }, { open: \"[\", close: \"]\" }, { open: \"(\", close: \")\" }, { open: \"<\", close: \">\" }, { open: \"'\", close: \"'\" }, { open: '\"', close: '\"' }], folding: { markers: { start: new RegExp(\"^\\\\s*#region\\\\b\"), end: new RegExp(\"^\\\\s*#endregion\\\\b\") } } }, t = { defaultToken: \"\", tokenPostfix: \".cs\", brackets: [{ open: \"{\", close: \"}\", token: \"delimiter.curly\" }, { open: \"[\", close: \"]\", token: \"delimiter.square\" }, { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" }, { open: \"<\", close: \">\", token: \"delimiter.angle\" }], keywords: [\"extern\", \"alias\", \"using\", \"bool\", \"decimal\", \"sbyte\", \"byte\", \"short\", \"ushort\", \"int\", \"uint\", \"long\", \"ulong\", \"char\", \"float\", \"double\", \"object\", \"dynamic\", \"string\", \"assembly\", \"is\", \"as\", \"ref\", \"out\", \"this\", \"base\", \"new\", \"typeof\", \"void\", \"checked\", \"unchecked\", \"default\", \"delegate\", \"var\", \"const\", \"if\", \"else\", \"switch\", \"case\", \"while\", \"do\", \"for\", \"foreach\", \"in\", \"break\", \"continue\", \"goto\", \"return\", \"throw\", \"try\", \"catch\", \"finally\", \"lock\", \"yield\", \"from\", \"let\", \"where\", \"join\", \"on\", \"equals\", \"into\", \"orderby\", \"ascending\", \"descending\", \"select\", \"group\", \"by\", \"namespace\", \"partial\", \"class\", \"field\", \"event\", \"method\", \"param\", \"public\", \"protected\", \"internal\", \"private\", \"abstract\", \"sealed\", \"static\", \"struct\", \"readonly\", \"volatile\", \"virtual\", \"override\", \"params\", \"get\", \"set\", \"add\", \"remove\", \"operator\", \"true\", \"false\", \"implicit\", \"explicit\", \"interface\", \"enum\", \"null\", \"async\", \"await\", \"fixed\", \"sizeof\", \"stackalloc\", \"unsafe\", \"nameof\", \"when\"], namespaceFollows: [\"namespace\", \"using\"], parenFollows: [\"if\", \"for\", \"while\", \"switch\", \"foreach\", \"using\", \"catch\", \"when\"], operators: [\"=\", \"??\", \"||\", \"&&\", \"|\", \"^\", \"&\", \"==\", \"!=\", \"<=\", \">=\", \"<<\", \"+\", \"-\", \"*\", \"/\", \"%\", \"!\", \"~\", \"++\", \"--\", \"+=\", \"-=\", \"*=\", \"/=\", \"%=\", \"&=\", \"|=\", \"^=\", \"<<=\", \">>=\", \">>\", \"=>\"], symbols: /[=><!~?:&|+\\-*\\/\\^%]+/, escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/, tokenizer: { root: [[/\\@?[a-zA-Z_]\\w*/, { cases: { \"@namespaceFollows\": { token: \"keyword.$0\", next: \"@namespace\" }, \"@keywords\": { token: \"keyword.$0\", next: \"@qualified\" }, \"@default\": { token: \"identifier\", next: \"@qualified\" } } }], { include: \"@whitespace\" }, [/}/, { cases: { \"$S2==interpolatedstring\": { token: \"string.quote\", next: \"@pop\" }, \"$S2==litinterpstring\": { token: \"string.quote\", next: \"@pop\" }, \"@default\": \"@brackets\" } }], [/[{}()\\[\\]]/, \"@brackets\"], [/[<>](?!@symbols)/, \"@brackets\"], [/@symbols/, { cases: { \"@operators\": \"delimiter\", \"@default\": \"\" } }], [/[0-9_]*\\.[0-9_]+([eE][\\-+]?\\d+)?[fFdD]?/, \"number.float\"], [/0[xX][0-9a-fA-F_]+/, \"number.hex\"], [/0[bB][01_]+/, \"number.hex\"], [/[0-9_]+/, \"number\"], [/[;,.]/, \"delimiter\"], [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"], [/\"/, { token: \"string.quote\", next: \"@string\" }], [/\\$\\@\"/, { token: \"string.quote\", next: \"@litinterpstring\" }], [/\\@\"/, { token: \"string.quote\", next: \"@litstring\" }], [/\\$\"/, { token: \"string.quote\", next: \"@interpolatedstring\" }], [/'[^\\\\']'/, \"string\"], [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]], [/'/, \"string.invalid\"]], qualified: [[/[a-zA-Z_][\\w]*/, { cases: { \"@keywords\": { token: \"keyword.$0\" }, \"@default\": \"identifier\" } }], [/\\./, \"delimiter\"], [\"\", \"\", \"@pop\"]], namespace: [{ include: \"@whitespace\" }, [/[A-Z]\\w*/, \"namespace\"], [/[\\.=]/, \"delimiter\"], [\"\", \"\", \"@pop\"]], comment: [[/[^\\/*]+/, \"comment\"], [\"\\\\*/\", \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]], string: [[/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"/, { token: \"string.quote\", next: \"@pop\" }]], litstring: [[/[^\"]+/, \"string\"], [/\"\"/, \"string.escape\"], [/\"/, { token: \"string.quote\", next: \"@pop\" }]], litinterpstring: [[/[^\"{]+/, \"string\"], [/\"\"/, \"string.escape\"], [/{{/, \"string.escape\"], [/}}/, \"string.escape\"], [/{/, { token: \"string.quote\", next: \"root.litinterpstring\" }], [/\"/, { token: \"string.quote\", next: \"@pop\" }]], interpolatedstring: [[/[^\\\\\"{]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/{{/, \"string.escape\"], [/}}/, \"string.escape\"], [/{/, { token: \"string.quote\", next: \"root.interpolatedstring\" }], [/\"/, { token: \"string.quote\", next: \"@pop\" }]], whitespace: [[/^[ \\t\\v\\f]*#((r)|(load))(?=\\s)/, \"directive.csx\"], [/^[ \\t\\v\\f]*#\\w.*$/, \"namespace.cpp\"], [/[ \\t\\v\\f\\r\\n]+/, \"\"], [/\\/\\*/, \"comment\", \"@comment\"], [/\\/\\/.*$/, \"comment\"]] } };\nexport {\n  e as conf,\n  t as language\n};\n"],"mappings":"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"}