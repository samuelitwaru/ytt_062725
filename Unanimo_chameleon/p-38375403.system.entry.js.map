{"version":3,"names":["chGridVirtualScrollerCss","ChGridVirtualScrollerStyle0","ChGridVirtualScroller","exports","this","scrollHandler","_this","isScrolling","definePercentScroll","scrollEndHandler","resizeHandler","entries","forEach","entry","target","el","rowsHeight","contentRect","height","document","documentElement","body","browserHeight","clientHeight","defineHasScroll","class_1","prototype","hasGridScrollHandler","unobserveScroll","observeScroll","hasWindowScrollHandler","gridLayoutEl","style","overflowX","hasWindowScroll","browserHeightHandler","defineMaxViewPortItems","defineVirtualHeight","headerHeightHandler","top","concat","headerHeight","rowsHeightHandler","defineHeaderHeight","defineRowHeight","rowHeightHandler","virtualHeightHandler","unobserveResize","setProperty","virtualHeight","Math","ceil","percentScroll","hasGridScroll","scrollTop","scrollHeight","window","scrollY","gridEl","observeResize","maxViewPortItemsHandler","defineViewPortItems","percentScrollHandler","defineStartIndex","startIndexHandler","isScrollingHandler","itemsHandler","startIndex","itemsCountHandler","viewPortItemsHandler","viewPortItemsChanged","emit","componentWillLoad","assignedSlot","parentElement","closest","resizeObserver","ResizeObserver","viewport","addEventListener","passive","observe","removeEventListener","unobserve","parseFloat","getComputedStyle","gridTemplateRows","viewPortItems","length","rowHeight","min","maxViewPortItems","items","slice","index","max","floor","hiddenHeight","scrollPosition","gridRect","getBoundingClientRect"],"sources":["src/components/grid/grid-virtual-scroller/ch-grid-virtual-scroller.scss?tag=ch-grid-virtual-scroller","src/components/grid/grid-virtual-scroller/ch-grid-virtual-scroller.tsx"],"sourcesContent":["@layer ch-grid {\r\n  ch-grid:has(ch-grid-virtual-scroller)::part(main) {\r\n    grid-template-rows: max-content var(--ch-grid-virtual-scroller-height);\r\n  }\r\n\r\n  ch-grid-virtual-scroller {\r\n    display: grid;\r\n    height: max-content;\r\n\r\n    position: sticky;\r\n    top: 0px;\r\n\r\n    grid-auto-rows: max-content;\r\n    grid-column: 1 / -1;\r\n    grid-row: 2;\r\n    grid-template-columns: subgrid;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Prop,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Watch,\r\n  State\r\n} from \"@stencil/core\";\r\n\r\n/**\r\n * The `ch-grid-virtual-scroller` component that displays a subset of items.\r\n * It optimizes the rendering of large data sets by only rendering the items that are currently visible on the screen\r\n * based on the viewport size and scroll position.\r\n */\r\n@Component({\r\n  tag: \"ch-grid-virtual-scroller\",\r\n  styleUrl: \"ch-grid-virtual-scroller.scss\",\r\n  shadow: false\r\n})\r\nexport class ChGridVirtualScroller {\r\n  private gridEl: HTMLElement;\r\n  private gridLayoutEl: HTMLElement;\r\n  private resizeObserver: ResizeObserver;\r\n\r\n  @Element() el: HTMLChGridVirtualScrollerElement;\r\n\r\n  /**\r\n   * Flag indicating whether the grid has a scrollbar.\r\n   */\r\n  @State() hasGridScroll = false;\r\n\r\n  @Watch(\"hasGridScroll\")\r\n  hasGridScrollHandler() {\r\n    this.unobserveScroll();\r\n    this.observeScroll();\r\n\r\n    this.definePercentScroll();\r\n  }\r\n\r\n  /**\r\n   * Flag indicating whether the browser window has a scrollbar.\r\n   */\r\n  @State() hasWindowScroll = false;\r\n\r\n  @Watch(\"hasWindowScroll\")\r\n  hasWindowScrollHandler() {\r\n    this.gridLayoutEl.style.overflowX = this.hasWindowScroll\r\n      ? \"visible\"\r\n      : \"auto\";\r\n\r\n    this.unobserveScroll();\r\n    this.observeScroll();\r\n\r\n    this.definePercentScroll();\r\n  }\r\n\r\n  /**\r\n   * Height of the browser window in pixels.\r\n   */\r\n  @State() browserHeight = document.documentElement.clientHeight;\r\n  @Watch(\"browserHeight\")\r\n  browserHeightHandler() {\r\n    this.defineMaxViewPortItems();\r\n    this.defineVirtualHeight();\r\n  }\r\n\r\n  /**\r\n   * Height of the header in pixels.\r\n   */\r\n  @State() headerHeight: number;\r\n\r\n  @Watch(\"headerHeight\")\r\n  headerHeightHandler() {\r\n    this.el.style.top = `${this.headerHeight}px`;\r\n  }\r\n\r\n  @State() rowsHeight = 0;\r\n  @Watch(\"rowsHeight\")\r\n  rowsHeightHandler() {\r\n    this.defineHeaderHeight();\r\n    this.defineRowHeight();\r\n  }\r\n\r\n  /**\r\n   * Height of each row in pixels.\r\n   */\r\n  @State() rowHeight = 0;\r\n  @Watch(\"rowHeight\")\r\n  rowHeightHandler() {\r\n    this.defineMaxViewPortItems();\r\n    this.defineVirtualHeight();\r\n  }\r\n\r\n  @State() virtualHeight = 0;\r\n  @Watch(\"virtualHeight\")\r\n  virtualHeightHandler() {\r\n    this.unobserveScroll();\r\n    this.unobserveResize();\r\n\r\n    this.gridLayoutEl.style.setProperty(\r\n      \"--ch-grid-virtual-scroller-height\",\r\n      `${this.virtualHeight}px`\r\n    );\r\n\r\n    if (Math.ceil(this.percentScroll) !== 100) {\r\n      if (this.hasGridScroll) {\r\n        this.gridLayoutEl.scrollTop =\r\n          this.percentScroll /\r\n          (100 /\r\n            (this.gridLayoutEl.scrollHeight - this.gridLayoutEl.clientHeight));\r\n      } else if (this.hasWindowScroll) {\r\n        window.scrollY =\r\n          this.percentScroll /\r\n          (100 / (this.gridEl.clientHeight - this.browserHeight));\r\n      }\r\n    }\r\n\r\n    this.observeScroll();\r\n    this.observeResize();\r\n  }\r\n\r\n  /**\r\n   * The maximum number of items that can fit on the screen at any given time.\r\n   */\r\n  @State() maxViewPortItems = 7;\r\n  @Watch(\"maxViewPortItems\")\r\n  maxViewPortItemsHandler() {\r\n    this.defineViewPortItems();\r\n  }\r\n\r\n  @State() percentScroll: number = 0;\r\n  @Watch(\"percentScroll\")\r\n  percentScrollHandler() {\r\n    this.defineStartIndex();\r\n  }\r\n\r\n  @State() startIndex: number = null;\r\n  @Watch(\"startIndex\")\r\n  startIndexHandler() {\r\n    this.defineViewPortItems();\r\n  }\r\n\r\n  @State() isScrolling: boolean = false;\r\n  @Watch(\"isScrolling\")\r\n  isScrollingHandler() {\r\n    if (!this.isScrolling) {\r\n      this.defineMaxViewPortItems();\r\n      this.defineVirtualHeight();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The list of items to be rendered in the grid.\r\n   */\r\n  @Prop() readonly items: any[];\r\n  @Watch(\"items\")\r\n  itemsHandler() {\r\n    if (!this.startIndex === null) {\r\n      this.defineStartIndex();\r\n    } else {\r\n      this.defineViewPortItems();\r\n      this.defineVirtualHeight();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The number of elements in the items list.\r\n   * Use if the list changes, without recreating the array.\r\n   */\r\n  @Prop() readonly itemsCount: number;\r\n  @Watch(\"itemsCount\")\r\n  itemsCountHandler() {\r\n    if (!this.startIndex === null) {\r\n      this.defineStartIndex();\r\n    } else {\r\n      this.defineViewPortItems();\r\n      this.defineVirtualHeight();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The list of items to display within the current viewport.\r\n   */\r\n  @Prop({ mutable: true }) viewPortItems: any[];\r\n  @Watch(\"viewPortItems\")\r\n  viewPortItemsHandler() {\r\n    this.viewPortItemsChanged.emit();\r\n  }\r\n\r\n  /**\r\n   *Event emitted when the list of visible items in the grid changes.\r\n   */\r\n  @Event() viewPortItemsChanged: EventEmitter;\r\n\r\n  componentWillLoad() {\r\n    this.gridLayoutEl = this.el.assignedSlot.parentElement;\r\n    this.gridEl = this.el.closest(\"ch-grid\");\r\n    this.resizeObserver = new ResizeObserver(this.resizeHandler);\r\n\r\n    this.observeScroll();\r\n    this.observeResize();\r\n  }\r\n\r\n  private observeScroll() {\r\n    let viewport: HTMLElement | Document;\r\n\r\n    if (this.hasGridScroll) {\r\n      viewport = this.gridLayoutEl;\r\n    } else if (this.hasWindowScroll) {\r\n      viewport = document;\r\n    }\r\n\r\n    viewport?.addEventListener(\"scroll\", this.scrollHandler, {\r\n      passive: true\r\n    });\r\n    viewport?.addEventListener(\"scrollend\", this.scrollEndHandler, {\r\n      passive: true\r\n    });\r\n  }\r\n\r\n  private observeResize() {\r\n    this.resizeObserver.observe(this.el);\r\n    this.resizeObserver.observe(this.gridEl);\r\n    this.resizeObserver.observe(document.documentElement);\r\n    this.resizeObserver.observe(document.body);\r\n  }\r\n\r\n  private unobserveScroll() {\r\n    document.removeEventListener(\"scroll\", this.scrollHandler);\r\n    this.gridLayoutEl.removeEventListener(\"scroll\", this.scrollHandler);\r\n  }\r\n\r\n  private unobserveResize() {\r\n    this.resizeObserver.unobserve(this.el);\r\n    this.resizeObserver.unobserve(this.gridEl);\r\n    this.resizeObserver.unobserve(document.documentElement);\r\n    this.resizeObserver.unobserve(document.body);\r\n  }\r\n\r\n  private scrollHandler = () => {\r\n    this.isScrolling = true;\r\n    this.definePercentScroll();\r\n  };\r\n\r\n  private scrollEndHandler = () => {\r\n    this.isScrolling = false;\r\n  };\r\n\r\n  private resizeHandler = (entries: ResizeObserverEntry[]) => {\r\n    entries.forEach(entry => {\r\n      switch (entry.target) {\r\n        case this.el:\r\n          this.rowsHeight = entry.contentRect.height;\r\n          break;\r\n        case document.documentElement:\r\n        case document.body:\r\n          this.browserHeight = document.documentElement.clientHeight;\r\n          break;\r\n      }\r\n    });\r\n\r\n    this.defineHasScroll();\r\n  };\r\n\r\n  private defineHasScroll() {\r\n    this.hasGridScroll =\r\n      this.gridLayoutEl.scrollHeight !== this.gridLayoutEl.clientHeight;\r\n    this.hasWindowScroll =\r\n      !this.hasGridScroll && this.gridEl.clientHeight > this.browserHeight;\r\n  }\r\n\r\n  private defineHeaderHeight() {\r\n    this.headerHeight = parseFloat(\r\n      getComputedStyle(this.gridLayoutEl).gridTemplateRows\r\n    );\r\n  }\r\n\r\n  private defineRowHeight() {\r\n    if (this.viewPortItems.length === 0) {\r\n      this.rowHeight = 0;\r\n    } else if (this.viewPortItems.length > 0 && this.percentScroll === 0) {\r\n      this.rowHeight = this.rowsHeight / this.viewPortItems.length;\r\n    } else {\r\n      this.rowHeight = Math.min(\r\n        this.rowHeight,\r\n        this.rowsHeight / this.viewPortItems.length\r\n      );\r\n    }\r\n  }\r\n\r\n  private defineMaxViewPortItems() {\r\n    if (this.rowHeight === 0) {\r\n      this.maxViewPortItems = 7;\r\n    } else {\r\n      this.maxViewPortItems = Math.ceil(this.browserHeight / this.rowHeight);\r\n    }\r\n  }\r\n\r\n  private defineVirtualHeight() {\r\n    if (!this.isScrolling) {\r\n      this.virtualHeight = this.items.length * this.rowHeight;\r\n    }\r\n  }\r\n\r\n  private defineViewPortItems() {\r\n    this.viewPortItems = this.items.slice(\r\n      this.startIndex,\r\n      this.startIndex + this.maxViewPortItems\r\n    );\r\n    // this.viewPortItems = this.items.slice(\r\n    //   Math.min(this.startIndex, this.items.length - this.maxViewPortItems),\r\n    //   this.startIndex + this.maxViewPortItems\r\n    // );\r\n  }\r\n\r\n  private defineStartIndex() {\r\n    const index =\r\n      (this.percentScroll *\r\n        Math.max(this.items.length - this.maxViewPortItems, 0)) /\r\n      100;\r\n    // const index = (this.percentScroll * (this.items.length - 1)) / 100;\r\n\r\n    this.startIndex =\r\n      this.percentScroll <= 50 ? Math.floor(index) : Math.ceil(index);\r\n  }\r\n\r\n  private definePercentScroll() {\r\n    let hiddenHeight = 0;\r\n    let scrollPosition = 0;\r\n\r\n    if (this.hasGridScroll) {\r\n      hiddenHeight =\r\n        this.gridLayoutEl.scrollHeight - this.gridLayoutEl.clientHeight;\r\n      scrollPosition = this.gridLayoutEl.scrollTop;\r\n    } else if (this.hasWindowScroll) {\r\n      const gridRect = this.gridEl.getBoundingClientRect();\r\n\r\n      hiddenHeight = this.gridEl.clientHeight - this.browserHeight;\r\n      scrollPosition = Math.min(\r\n        gridRect.top >= 0 ? 0 : gridRect.top * -1,\r\n        hiddenHeight\r\n      );\r\n    }\r\n\r\n    this.percentScroll =\r\n      hiddenHeight > 0 ? (scrollPosition * 100) / hiddenHeight : 0;\r\n  }\r\n}\r\n"],"mappings":"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"}