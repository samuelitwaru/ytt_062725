{"version":3,"names":["e","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","t","tokenPostfix","keywords","softKeywords","constants","modifiers","softModifiers","name","type","symbols","digits","hexdigits","escapes","fstring_conv","tokenizer","root","token","bracket","next","cases","include","import","allowMethod","comment","case","vardef","string","switchTo","stringt","fstring","fstringt","sstring","sstringt","interp","rawstring","rawstringt","whitespace"],"sources":["src/components/code-editor/monaco/output/scala-CDUtQgZP.js"],"sourcesContent":["var e = { wordPattern: /(unary_[@~!#%^&*()\\-=+\\\\|:<>\\/?]+)|([a-zA-Z_$][\\w$]*?_=)|(`[^`]+`)|([a-zA-Z_$][\\w$]*)/g, comments: { lineComment: \"//\", blockComment: [\"/*\", \"*/\"] }, brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]], autoClosingPairs: [{ open: \"{\", close: \"}\" }, { open: \"[\", close: \"]\" }, { open: \"(\", close: \")\" }, { open: '\"', close: '\"' }, { open: \"'\", close: \"'\" }], surroundingPairs: [{ open: \"{\", close: \"}\" }, { open: \"[\", close: \"]\" }, { open: \"(\", close: \")\" }, { open: '\"', close: '\"' }, { open: \"'\", close: \"'\" }], folding: { markers: { start: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?region\\\\b)|(?:<editor-fold\\\\b))\"), end: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?endregion\\\\b)|(?:</editor-fold>))\") } } }, t = { tokenPostfix: \".scala\", keywords: [\"asInstanceOf\", \"catch\", \"class\", \"classOf\", \"def\", \"do\", \"else\", \"extends\", \"finally\", \"for\", \"foreach\", \"forSome\", \"if\", \"import\", \"isInstanceOf\", \"macro\", \"match\", \"new\", \"object\", \"package\", \"return\", \"throw\", \"trait\", \"try\", \"type\", \"until\", \"val\", \"var\", \"while\", \"with\", \"yield\", \"given\", \"enum\", \"then\"], softKeywords: [\"as\", \"export\", \"extension\", \"end\", \"derives\", \"on\"], constants: [\"true\", \"false\", \"null\", \"this\", \"super\"], modifiers: [\"abstract\", \"final\", \"implicit\", \"lazy\", \"override\", \"private\", \"protected\", \"sealed\"], softModifiers: [\"inline\", \"opaque\", \"open\", \"transparent\", \"using\"], name: /(?:[a-z_$][\\w$]*|`[^`]+`)/, type: /(?:[A-Z][\\w$]*)/, symbols: /[=><!~?:&|+\\-*\\/^\\\\%@#]+/, digits: /\\d+(_+\\d+)*/, hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/, escapes: /\\\\(?:[btnfr\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/, fstring_conv: /[bBhHsScCdoxXeEfgGaAt]|[Tn](?:[HIklMSLNpzZsQ]|[BbhAaCYyjmde]|[RTrDFC])/, tokenizer: { root: [[/\\braw\"\"\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@rawstringt\" }], [/\\braw\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@rawstring\" }], [/\\bs\"\"\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@sstringt\" }], [/\\bs\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@sstring\" }], [/\\bf\"\"\"\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@fstringt\" }], [/\\bf\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@fstring\" }], [/\"\"\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@stringt\" }], [/\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@string\" }], [/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, \"number.float\", \"@allowMethod\"], [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, \"number.float\", \"@allowMethod\"], [/0[xX](@hexdigits)[Ll]?/, \"number.hex\", \"@allowMethod\"], [/(@digits)[fFdD]/, \"number.float\", \"@allowMethod\"], [/(@digits)[lL]?/, \"number\", \"@allowMethod\"], [/\\b_\\*/, \"key\"], [/\\b(_)\\b/, \"keyword\", \"@allowMethod\"], [/\\bimport\\b/, \"keyword\", \"@import\"], [/\\b(case)([ \\t]+)(class)\\b/, [\"keyword.modifier\", \"white\", \"keyword\"]], [/\\bcase\\b/, \"keyword\", \"@case\"], [/\\bva[lr]\\b/, \"keyword\", \"@vardef\"], [/\\b(def)([ \\t]+)((?:unary_)?@symbols|@name(?:_=)|@name)/, [\"keyword\", \"white\", \"identifier\"]], [/@name(?=[ \\t]*:(?!:))/, \"variable\"], [/(\\.)(@name|@symbols)/, [\"operator\", { token: \"@rematch\", next: \"@allowMethod\" }]], [/([{(])(\\s*)(@name(?=\\s*=>))/, [\"@brackets\", \"white\", \"variable\"]], [/@name/, { cases: { \"@keywords\": \"keyword\", \"@softKeywords\": \"keyword\", \"@modifiers\": \"keyword.modifier\", \"@softModifiers\": \"keyword.modifier\", \"@constants\": { token: \"constant\", next: \"@allowMethod\" }, \"@default\": { token: \"identifier\", next: \"@allowMethod\" } } }], [/@type/, \"type\", \"@allowMethod\"], { include: \"@whitespace\" }, [/@[a-zA-Z_$][\\w$]*(?:\\.[a-zA-Z_$][\\w$]*)*/, \"annotation\"], [/[{(]/, \"@brackets\"], [/[})]/, \"@brackets\", \"@allowMethod\"], [/\\[/, \"operator.square\"], [/](?!\\s*(?:va[rl]|def|type)\\b)/, \"operator.square\", \"@allowMethod\"], [/]/, \"operator.square\"], [/([=-]>|<-|>:|<:|:>|<%)(?=[\\s\\w()[\\]{},\\.\"'`])/, \"keyword\"], [/@symbols/, \"operator\"], [/[;,\\.]/, \"delimiter\"], [/'[a-zA-Z$][\\w$]*(?!')/, \"attribute.name\"], [/'[^\\\\']'/, \"string\", \"@allowMethod\"], [/(')(@escapes)(')/, [\"string\", \"string.escape\", { token: \"string\", next: \"@allowMethod\" }]], [/'/, \"string.invalid\"]], import: [[/;/, \"delimiter\", \"@pop\"], [/^|$/, \"\", \"@pop\"], [/[ \\t]+/, \"white\"], [/[\\n\\r]+/, \"white\", \"@pop\"], [/\\/\\*/, \"comment\", \"@comment\"], [/@name|@type/, \"type\"], [/[(){}]/, \"@brackets\"], [/[[\\]]/, \"operator.square\"], [/[\\.,]/, \"delimiter\"]], allowMethod: [[/^|$/, \"\", \"@pop\"], [/[ \\t]+/, \"white\"], [/[\\n\\r]+/, \"white\", \"@pop\"], [/\\/\\*/, \"comment\", \"@comment\"], [/(?==>[\\s\\w([{])/, \"keyword\", \"@pop\"], [/(@name|@symbols)(?=[ \\t]*[[({\"'`]|[ \\t]+(?:[+-]?\\.?\\d|\\w))/, { cases: { \"@keywords\": { token: \"keyword\", next: \"@pop\" }, \"->|<-|>:|<:|<%\": { token: \"keyword\", next: \"@pop\" }, \"@default\": { token: \"@rematch\", next: \"@pop\" } } }], [\"\", \"\", \"@pop\"]], comment: [[/[^\\/*]+/, \"comment\"], [/\\/\\*/, \"comment\", \"@push\"], [/\\*\\//, \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]], case: [[/\\b_\\*/, \"key\"], [/\\b(_|true|false|null|this|super)\\b/, \"keyword\", \"@allowMethod\"], [/\\bif\\b|=>/, \"keyword\", \"@pop\"], [/`[^`]+`/, \"identifier\", \"@allowMethod\"], [/@name/, \"variable\", \"@allowMethod\"], [/:::?|\\||@(?![a-z_$])/, \"keyword\"], { include: \"@root\" }], vardef: [[/\\b_\\*/, \"key\"], [/\\b(_|true|false|null|this|super)\\b/, \"keyword\"], [/@name/, \"variable\"], [/:::?|\\||@(?![a-z_$])/, \"keyword\"], [/=|:(?!:)/, \"operator\", \"@pop\"], [/$/, \"white\", \"@pop\"], { include: \"@root\" }], string: [[/[^\\\\\"\\n\\r]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"/, { token: \"string.quote\", bracket: \"@close\", switchTo: \"@allowMethod\" }]], stringt: [[/[^\\\\\"\\n\\r]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"(?=\"\"\")/, \"string\"], [/\"\"\"/, { token: \"string.quote\", bracket: \"@close\", switchTo: \"@allowMethod\" }], [/\"/, \"string\"]], fstring: [[/@escapes/, \"string.escape\"], [/\"/, { token: \"string.quote\", bracket: \"@close\", switchTo: \"@allowMethod\" }], [/\\$\\$/, \"string\"], [/(\\$)([a-z_]\\w*)/, [\"operator\", \"identifier\"]], [/\\$\\{/, \"operator\", \"@interp\"], [/%%/, \"string\"], [/(%)([\\-#+ 0,(])(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, [\"metatag\", \"keyword.modifier\", \"number\", \"metatag\"]], [/(%)(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, [\"metatag\", \"number\", \"metatag\"]], [/(%)([\\-#+ 0,(])(@fstring_conv)/, [\"metatag\", \"keyword.modifier\", \"metatag\"]], [/(%)(@fstring_conv)/, [\"metatag\", \"metatag\"]], [/./, \"string\"]], fstringt: [[/@escapes/, \"string.escape\"], [/\"(?=\"\"\")/, \"string\"], [/\"\"\"/, { token: \"string.quote\", bracket: \"@close\", switchTo: \"@allowMethod\" }], [/\\$\\$/, \"string\"], [/(\\$)([a-z_]\\w*)/, [\"operator\", \"identifier\"]], [/\\$\\{/, \"operator\", \"@interp\"], [/%%/, \"string\"], [/(%)([\\-#+ 0,(])(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, [\"metatag\", \"keyword.modifier\", \"number\", \"metatag\"]], [/(%)(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, [\"metatag\", \"number\", \"metatag\"]], [/(%)([\\-#+ 0,(])(@fstring_conv)/, [\"metatag\", \"keyword.modifier\", \"metatag\"]], [/(%)(@fstring_conv)/, [\"metatag\", \"metatag\"]], [/./, \"string\"]], sstring: [[/@escapes/, \"string.escape\"], [/\"/, { token: \"string.quote\", bracket: \"@close\", switchTo: \"@allowMethod\" }], [/\\$\\$/, \"string\"], [/(\\$)([a-z_]\\w*)/, [\"operator\", \"identifier\"]], [/\\$\\{/, \"operator\", \"@interp\"], [/./, \"string\"]], sstringt: [[/@escapes/, \"string.escape\"], [/\"(?=\"\"\")/, \"string\"], [/\"\"\"/, { token: \"string.quote\", bracket: \"@close\", switchTo: \"@allowMethod\" }], [/\\$\\$/, \"string\"], [/(\\$)([a-z_]\\w*)/, [\"operator\", \"identifier\"]], [/\\$\\{/, \"operator\", \"@interp\"], [/./, \"string\"]], interp: [[/{/, \"operator\", \"@push\"], [/}/, \"operator\", \"@pop\"], { include: \"@root\" }], rawstring: [[/[^\"]/, \"string\"], [/\"/, { token: \"string.quote\", bracket: \"@close\", switchTo: \"@allowMethod\" }]], rawstringt: [[/[^\"]/, \"string\"], [/\"(?=\"\"\")/, \"string\"], [/\"\"\"/, { token: \"string.quote\", bracket: \"@close\", switchTo: \"@allowMethod\" }], [/\"/, \"string\"]], whitespace: [[/[ \\t\\r\\n]+/, \"white\"], [/\\/\\*/, \"comment\", \"@comment\"], [/\\/\\/.*$/, \"comment\"]] } };\nexport {\n  e as conf,\n  t as language\n};\n"],"mappings":"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"}