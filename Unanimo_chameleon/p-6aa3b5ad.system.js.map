{"version":3,"names":["e","comments","blockComment","lineComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","o","defaultToken","tokenPostfix","keywords","types","operators","symbols","escapes","tokenizer","root","cases","include","whitespace","comment","string","exports","conf","language"],"sources":["src/components/code-editor/monaco/output/flow9-elQvKHRe.js"],"sourcesContent":["var e = { comments: { blockComment: [\"/*\", \"*/\"], lineComment: \"//\" }, brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]], autoClosingPairs: [{ open: \"{\", close: \"}\", notIn: [\"string\"] }, { open: \"[\", close: \"]\", notIn: [\"string\"] }, { open: \"(\", close: \")\", notIn: [\"string\"] }, { open: '\"', close: '\"', notIn: [\"string\"] }, { open: \"'\", close: \"'\", notIn: [\"string\"] }], surroundingPairs: [{ open: \"{\", close: \"}\" }, { open: \"[\", close: \"]\" }, { open: \"(\", close: \")\" }, { open: '\"', close: '\"' }, { open: \"'\", close: \"'\" }, { open: \"<\", close: \">\" }] }, o = { defaultToken: \"\", tokenPostfix: \".flow\", keywords: [\"import\", \"require\", \"export\", \"forbid\", \"native\", \"if\", \"else\", \"cast\", \"unsafe\", \"switch\", \"default\"], types: [\"io\", \"mutable\", \"bool\", \"int\", \"double\", \"string\", \"flow\", \"void\", \"ref\", \"true\", \"false\", \"with\"], operators: [\"=\", \">\", \"<\", \"<=\", \">=\", \"==\", \"!\", \"!=\", \":=\", \"::=\", \"&&\", \"||\", \"+\", \"-\", \"*\", \"/\", \"@\", \"&\", \"%\", \":\", \"->\", \"\\\\\", \"$\", \"??\", \"^\"], symbols: /[@$=><!~?:&|+\\-*\\\\\\/\\^%]+/, escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/, tokenizer: { root: [[/[a-zA-Z_]\\w*/, { cases: { \"@keywords\": \"keyword\", \"@types\": \"type\", \"@default\": \"identifier\" } }], { include: \"@whitespace\" }, [/[{}()\\[\\]]/, \"delimiter\"], [/[<>](?!@symbols)/, \"delimiter\"], [/@symbols/, { cases: { \"@operators\": \"delimiter\", \"@default\": \"\" } }], [/((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)/, \"number\"], [/[;,.]/, \"delimiter\"], [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"], [/\"/, \"string\", \"@string\"]], whitespace: [[/[ \\t\\r\\n]+/, \"\"], [/\\/\\*/, \"comment\", \"@comment\"], [/\\/\\/.*$/, \"comment\"]], comment: [[/[^\\/*]+/, \"comment\"], [/\\*\\//, \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]], string: [[/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"/, \"string\", \"@pop\"]] } };\nexport {\n  e as conf,\n  o as language\n};\n"],"mappings":"uEAAG,IAACA,EAAI,CAAEC,SAAU,CAAEC,aAAc,CAAC,KAAM,MAAOC,YAAa,MAAQC,SAAU,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,MAAOC,iBAAkB,CAAC,CAAEC,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,WAAa,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,WAAa,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,WAAa,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,WAAa,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,YAAcC,iBAAkB,CAAC,CAAEH,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,OAAUG,EAAI,CAAEC,aAAc,GAAIC,aAAc,QAASC,SAAU,CAAC,SAAU,UAAW,SAAU,SAAU,SAAU,KAAM,OAAQ,OAAQ,SAAU,SAAU,WAAYC,MAAO,CAAC,KAAM,UAAW,OAAQ,MAAO,SAAU,SAAU,OAAQ,OAAQ,MAAO,OAAQ,QAAS,QAASC,UAAW,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,IAAK,KAAM,KAAM,MAAO,KAAM,KAAM,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,IAAK,KAAM,KAAMC,QAAS,4BAA6BC,QAAS,wEAAyEC,UAAW,CAAEC,KAAM,CAAC,CAAC,eAAgB,CAAEC,MAAO,CAAE,YAAa,UAAW,SAAU,OAAQ,WAAY,gBAAmB,CAAEC,QAAS,eAAiB,CAAC,aAAc,aAAc,CAAC,mBAAoB,aAAc,CAAC,WAAY,CAAED,MAAO,CAAE,aAAc,YAAa,WAAY,MAAS,CAAC,6EAA8E,UAAW,CAAC,QAAS,aAAc,CAAC,kBAAmB,kBAAmB,CAAC,IAAK,SAAU,YAAaE,WAAY,CAAC,CAAC,aAAc,IAAK,CAAC,OAAQ,UAAW,YAAa,CAAC,UAAW,YAAaC,QAAS,CAAC,CAAC,UAAW,WAAY,CAAC,OAAQ,UAAW,QAAS,CAAC,QAAS,YAAaC,OAAQ,CAAC,CAAC,UAAW,UAAW,CAAC,WAAY,iBAAkB,CAAC,MAAO,yBAA0B,CAAC,IAAK,SAAU,WAAUC,EAAA,CAAAC,KAAA1B,EAAA2B,SAAAjB,G"}