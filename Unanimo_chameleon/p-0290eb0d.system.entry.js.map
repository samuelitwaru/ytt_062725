{"version":3,"names":["scrollToEdge","event","container","scrollSpeed","scrollThreshold","mousePositionY","clientY","getBoundingClientRect","top","containerHeight","clientHeight","mouseAtTheTop","mouseAtTheBottom","scrollAmount","scrollTop","treeViewCss","ChTreeViewStyle0","TREE_ITEM_TAG_NAME","TREE_DROP_TAG_NAME","TREE_TAG_NAME","CHECKING","INVALID","TEMPORAL_INVALID","VALID","ITEM_SELECTOR","treeItemId","concat","TEXT_FORMAT","ARROW_DOWN_KEY","ARROW_UP_KEY","EDIT_KEY","isTreeDrop","element","tagName","toLowerCase","isTreeItem","isTreeItemOrTreeDrop","elementTagName","getFocusedTreeItem","focusComposedPath","find","canMoveTreeItemFocus","treeItem","editing","getDroppableZoneKey","newContainerId","draggedItems","dropType","JSON","stringify","POSITION_X_DRAG_CUSTOM_VAR","POSITION_Y_DRAG_CUSTOM_VAR","autoId","ChTreeView","exports","_a","_keyDownEvents","set","this","_d","preventDefault","focusNextItem","mouseEventModifierKey","focusPreviousItem","editable","_draggingSelectedItems","_needForRAF","_lastDragEvent","_openSubTreeTimeout","_validDroppableZoneCache","Map","_dragStartTimestamp","_draggedItems","_treeViewId","_currentDraggedItem","_lastOpenSubTreeItem","_dragInfo","_draggedIds","_draggedParentIds","_getDropTypeAndTreeItemTarget","eventTarget","targetIsTreeItem","type","nextElementSibling","previousElementSibling","_cancelSubTreeOpening","treeItemOrTreeDrop","forceClear","__classPrivateFieldGet","_this","clearTimeout","__classPrivateFieldSet","_getTreeViewItemRef","itemId","el","querySelector","_validDroppableZone","treeItemTarget","cacheKey","id","droppableZoneState","get","lazyLoad","downloading","dataTransfer","effectAllowed","dropDisabled","draggingInTree","includes","droppableZoneEnter","emit","newContainer","metadata","_openSubTreeAfterCountdown","currentTarget","leaf","expanded","setTimeout","expandedItemChange","openSubTreeCountdown","_trackItemDrag","draggingInATree","target","closest","stopImmediatePropagation","_updateDropEffect","call","requestAnimationFrame","style","setProperty","clientX","composedPath","itemTarget","dragEnterInformation","dropEffect","_resetVariables","_checkDragValidityAndUpdateDragInfo","dragInfo","draggedElement","elem","selectedItemsInfo","selectedItemsCallback","isDraggingSelectedItems","has","dataTransferInfo","dragIsEnabledForAllItems","selectedItemKeys","__spreadArray","keys","selectedItemValues","values","selectedItemCount","length","every","dragDisabled","map","caption","toString","_getDirectParentsOfDraggableItems","data","dragEvent","setData","_fixScrollPositionOnDrag","draggingSelectedItems","parentTreeItemElem","parentElement","push","forEach","selectedItem","parentId","class_1","prototype","onContextMenu","itemContextmenu","itemRef","contextmenuEvent","onKeyDown","keyHandler","key","onDragStart","clear","getData","paredData","parse","draggingInTheDocument","Date","getTime","onDragEnd","onDragEnter","stopPropagation","containerTargetTagName","dragState","onDragLeave","onDrop","itemsDropped","dropInTheSameTree","onItemDragStart","document","addEventListener","capture","allItemsCanBeDragged","detail","scrollToEdgeOnDrag","onItemDragEnd","removeEventListener","onSelectedItemChange","selectedItemInfo","ctrlKeyPressed","multiSelection","selected","delete","selectedItemsChange","scrollIntoVisible","readTask","writeTask","scrollIntoView","updateValidDropZone","requestTimestamp","validDrop","droppableZoneKey","shouldUpdateDragEnterInCurrentContainer","connectedCallback","subscribeToRTLChanges","rtl","rtlDirection","isRTL","disconnectedCallback","unsubscribeToRTLChanges","render","h","Host","class","waitDropProcessing","exportparts","TREE_VIEW_PARTS_DICTIONARY","DRAG_PREVIEW","part","INITIAL_LEVEL","getTreeItemLevelPart","evenLevel","TREE_VIEW_ITEM_PARTS_DICTIONARY","EVEN_LEVEL","ODD_LEVEL","getTreeItemExpandedPart","EXPANDED","COLLAPSED","removeTreeViewItems","items","flattenedTreeModel","flattenedCheckboxTreeModel","selectedItems","atLeastOneElement","atLeastOneCheckbox","atLeastOneSelected","itemUIModel","itemInfo","item","parentArray","parentItem","subItemsId","removeElement","findIndex","resolveNewPromise","value","Promise","resolve","scrollIntoVisibleId","path","visitedNode","visitedNodeUIModel","scrollIntoVisiblePath","elementRef","rootNode","lazyLoadTreeItemsCallback","__awaiter","pathHasRepeatedElements","Set","size","indexOfLastItemInPath","lastRenderedItemInPath","undefined","indexOfLastRenderItem","thereAreMoreItemsToLazyLoad","canNotLazyLoadRemainingPath","parentUIModel","forceUpdate","nextIndexToLazyLoad","itemUIModel_1","lazy","result","sent","loadLazyContent","treeViewDropCss","ChTreeViewDropStyle0","ChTreeViewDrop","class_2","canShowLines","level","levelPart","treeViewItemCss","ChTreeViewItemStyle0","DISTANCE_TO_CHECKBOX_CUSTOM_VAR","DIRECT_TREE_ITEM_CHILDREN","FIRST_ENABLED_SUB_ITEM","LAST_SUB_ITEM","DENY_DROP_CLASS","START_IMAGE_PARTS","IMAGE","START_IMAGE","END_IMAGE_PARTS","END_IMAGE","EXPANDABLE_ID","ENTER_KEY","ESCAPE_KEY","ChTreeViewItem","_b","_watcher","_ignoreCheckboxChange","_headerRef","_inputRef","_getDirectTreeItems","Array","from","querySelectorAll","_setResizeObserver","ResizeObserver","distanceToCheckbox","height","observe","_disconnectObserver","disconnect","_checkIfShouldRemoveEditMode","code","commitEdition","_removeEditMode","_removeEditModeOnClick","pointerType","shouldFocusHeader","newCaption","trim","modifyCaption","focus","_toggleExpand","selectedItemChange","_getSelectedInfo","_lazyLoadItems","_toggleSelected","_setSelected","_toggleOrSelect","expandOnClick","_handleActionDblClick","_emitOpenReference","_handleActionClick","_handleActionKeyDown","openReference","_handleCheckedChange","chCheckboxRef","checked","checkedValue","indeterminate","checkboxChange","_handleCheckBoxChangeInItems","updatedCheck","treeItems","allItemsHaveTheSameCheckedValue","eventMustBeEmitted","checkboxToggleChange","_renderImg","cssClass","src","imageType","alt","loading","_handleDragStart","removeDragImage","itemDragStart","_handleDragEnd","itemDragEnd","_setExportParts","setAttribute","TREE_VIEW_ITEM_EXPORT_PARTS","replace","class_3","updateChildrenCheckedValue","newValue","toggleCheckboxes","updateChecked","editingChanged","isEditing","expandedChanged","isExpanded","lastItemChanged","isLastItem","showLines","partsChanged","newParts","showLinesChanged","newShowLines","lastItem","handleToggleCheckboxesChange","newToggleCheckboxesValue","subItem","setFocus","focusNextSibling","nextSiblingItem","disabled","previousSiblingItem","focusLastItem","lastSubItem","newChecked","newIndeterminate","parts","componentWillLoad","componentDidLoad","hasContent","showAllLines","showLastLine","expandedPart","pseudoStartImage","isPseudoElementImg","startImgSrc","startImgType","pseudoEndImage","endImgSrc","endImgType","hasParts","tokenMap","ITEM","DRAG_ENTER","header","expandableButton","_e","HEADER","DISABLED","SELECTED","NOT_SELECTED","EXPAND_BUTTON","EDITING","NOT_EDITING","onClick","draggable","ref","_f","EXPANDABLE_BUTTON","checkbox","accessibleName","TREE_VIEW_ITEM_CHECKBOX_EXPORT_PARTS","CHECKBOX","unCheckedValue","onInput","customRender","name","_g","action","_h","ACTION","onDblClick","EDIT_CAPTION","onBlur","showDownloadingSpinner","DOWNLOADING","line","_j","LINE","LAST_LINE","role","expandable","_k","GROUP","LAZY_LOADED","itemHasCheckbox","defaultCheckbox","filterWithCase","stringToFilter","filter","matchCase","filterWithString","filterOptions","regularExpression","match","filterDictionary","filterInfo","defaultChecked","list","filterSet","none","unchecked","computeFilter","filterType","hideMatchesAndShowNonMatches","reloadItems","removeItems","beforeProperties","afterProperties","itemToReloadUIModel","noProperties","updateItemsProperties","newItems","oldItemsSet","reloadNewItemsQueue","newItem","newItemOldUIModel","newItemOldInfo","newItemWasLazyLoaded","allSettled","itemToReload","updateItemProperty","properties","newSelectedItems","newCheckboxItems","Object","propertyName","add","treeViewRenderCss","ChTreeViewRenderStyle0","ROOT_ID","DEFAULT_DRAG_DISABLED_VALUE","DEFAULT_DROP_DISABLED_VALUE","DEFAULT_EDITABLE_ITEMS_VALUE","DEFAULT_EXPANDED_VALUE","DEFAULT_INDETERMINATE_VALUE","DEFAULT_LAZY_VALUE","DEFAULT_ORDER_VALUE","DEFAULT_SELECTED_VALUE","treeViewHasFilters","defaultGetImagePath","imgSrc","treeState","useGxRender","fromGxImageToURL","gxSettings","gxImageConstructor","gxDragDisabled","itemModel","dragEnabled","gxDropDisabled","dropEnabled","isDropDisabled","treeDropId","defaultRenderItem","treeHasFilter","dropBeforeAndAfterEnabled","enabled","editableItems","getImagePathCallback","subModel","index","renderItem","lastItemId","dropMode","defaultSortItemsCallback","sort","a","b","order","ChTreeViewRender","_c","_flattenedTreeModel","_flattenedCheckboxTreeModel","_selectedItems","_selectedChangeScheduled","_checkedChangeScheduled","_rootNode","_applyFilters","_immediateFilter","_filterTimeout","_filterListAsSet","_treeViewId_1","_treeRef","_getItemsInfo","itemsId","treeViewItemsInfo","_handleDroppableZoneEnter","checkDroppableZoneCallback","dropInformation","promise","then","_handleSelectedItemsChange","itemsToProcess","previousSelectedItems","selectedItemId","itemIsStillSelected","newSelectedItemInfo","newSelectedItem","_updateSelectedItems","_handleExpandedItemChange","_handleItemContextmenu","_handleItemsDropped","newParentId","dropItemsCallback","response","dropItems","acceptDrop","model","_removeAllSelectedItemsExceptForTheLast","currentSelectedItems","selectedItemsArray","lastItemIndex","_scheduleSelectedItemsChange","_moveItemToNewParent","newParentItem","specificIndex","itemUIModelExtended","oldParentItem","oldIndex","newIndex","insertIntoIndex","_flattenSubModel","_sortItems","_flattenItemUIModel","parentModel","_itemHasCheckbox","_treeHasFilters","sortItemsCallback","_flattenModel","_scheduleFilterProcessing","_scheduleCheckedItemsChange","_filterSubModel","currentCheckboxItems","aSubItemIsRendered","lastItemId_1","itemSatisfiesFilter","satisfiesFilter","_updateCheckedItems","allItemsWithCheckbox","checkedItemsChange","immediateFilter","_checkIfThereAreDifferentItemsWithCheckbox","_","_checkIfThereAreDifferentSelectedItems","_updateFilters","itemsWithCheckbox_1","_validateCheckedAndSelectedItems","processWithDebounce","filterDebounce","filterFunction","currentCheckedItems","_getSelectedItemsCallback","class_4","filterChanged","filterDebounceChanged","filterListChanged","filterList","filterOptionsChanged","filterTypeChanged","multiSelectionChanged","newMultiSelection","modelChanged","newParentUIModel","actualParent","specificIndexToInsert","apply","getItemsInfo","itemId_1","model_1","itemToLazyLoadContent","removeItemsResult","success","hasOnlyTheItemId","parentInfo","toggleItems","treeItemIds","expand","modifiedTreeItems","updateAllItemsProperties","onCheckboxChange","onLoadLazyContent","onModifyCaption","modifyItemCaptionCallback","oldCaption","status","onOpenReference","itemOpenReference","subscribe","getSubscriberRef","observerCallback","syncStateWithObservableAncestors","componentWillRender","removeSubscription","onDroppableZoneEnter","onExpandedItemChange","onItemContextmenu","onItemsDropped","onSelectedItemsChange"],"sources":["src/common/scroll-to-edge.ts","src/components/tree-view/internal/tree-view/tree-view.scss?tag=ch-tree-view&encapsulation=shadow","src/components/tree-view/internal/tree-view/tree-view.tsx","src/components/tree-view/utils.ts","src/components/tree-view/internal/tree-view-drop/tree-view-drop.scss?tag=ch-tree-view-drop&encapsulation=shadow","src/components/tree-view/internal/tree-view-drop/tree-view-drop.tsx","src/components/tree-view/internal/tree-view-item/tree-view-item.scss?tag=ch-tree-view-item&encapsulation=shadow","src/components/tree-view/internal/tree-view-item/tree-view-item.tsx","src/components/tree-view/helpers.ts","src/components/tree-view/reload-items.ts","src/components/tree-view/update-item-property.ts","src/components/tree-view/tree-view-render.scss?tag=ch-tree-view-render&encapsulation=shadow","src/components/tree-view/tree-view-render.tsx"],"sourcesContent":["export const scrollToEdge = (\r\n  event: MouseEvent,\r\n  container: HTMLElement,\r\n  scrollSpeed: number,\r\n  scrollThreshold: number\r\n) => {\r\n  const mousePositionY = event.clientY - container.getBoundingClientRect().top;\r\n\r\n  const containerHeight = container.clientHeight;\r\n  const mouseAtTheTop = mousePositionY <= scrollThreshold;\r\n  const mouseAtTheBottom = mousePositionY > containerHeight - scrollThreshold;\r\n\r\n  if (mouseAtTheTop || mouseAtTheBottom) {\r\n    const scrollAmount = mouseAtTheTop\r\n      ? mousePositionY - scrollThreshold\r\n      : mousePositionY - (containerHeight - scrollThreshold);\r\n\r\n    // Adjust container scroll position\r\n    container.scrollTop += scrollAmount / scrollSpeed;\r\n  }\r\n};\r\n",":host {\r\n  display: contents;\r\n}\r\n\r\n:host(.rtl-direction) > .drag-info {\r\n  --rtl-offset: -100%;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//            Drag info\r\n// - - - - - - - - - - - - - - - -\r\n.drag-info {\r\n  --rtl-offset: 16px;\r\n\r\n  position: fixed;\r\n  left: 0; // Necessary since the custom vars are physical values\r\n  top: 0; // Necessary since the custom vars are physical values\r\n  transform: translate(\r\n    calc(var(--ch-tree-view-dragging-item-x) + var(--rtl-offset)),\r\n    calc(var(--ch-tree-view-dragging-item-y) + 8px)\r\n  );\r\n  pointer-events: none;\r\n  z-index: 1; // Necessary to show the element above the expandable buttons\r\n  animation: fade-in 10ms;\r\n}\r\n\r\n// Remove mouse actions when processing the drop of items\r\n// @todo: Remove keyboard actions\r\n.waiting-drop-processing {\r\n  cursor: wait;\r\n\r\n  ::slotted(*) {\r\n    pointer-events: none;\r\n  }\r\n}\r\n\r\n// Wait until the custom var values are updated to avoid flickering\r\n@keyframes fade-in {\r\n  0%,\r\n  100% {\r\n    opacity: 0;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Listen,\r\n  Method,\r\n  Prop,\r\n  State,\r\n  h,\r\n  readTask,\r\n  writeTask\r\n} from \"@stencil/core\";\r\n\r\nimport {\r\n  TreeViewDataTransferInfo,\r\n  TreeViewDropCheckInfo,\r\n  TreeViewDroppableZoneState,\r\n  TreeViewItemContextMenu,\r\n  TreeViewItemDragStartInfo,\r\n  TreeViewItemExpandedInfo,\r\n  TreeViewItemSelectedInfo,\r\n  TreeViewItemSelected,\r\n  TreeViewDropType\r\n} from \"./types\";\r\nimport {\r\n  focusComposedPath,\r\n  mouseEventModifierKey\r\n} from \"../../../common/helpers\";\r\nimport { scrollToEdge } from \"../../../../common/scroll-to-edge\";\r\nimport { GxDataTransferInfo } from \"../../../../common/types\";\r\nimport { ChTreeViewItemCustomEvent } from \"../../../../components\";\r\nimport { TREE_VIEW_PARTS_DICTIONARY } from \"../../../../common/reserverd-names\";\r\nimport {\r\n  isRTL,\r\n  subscribeToRTLChanges,\r\n  unsubscribeToRTLChanges\r\n} from \"../../../../common/utils\";\r\n\r\nconst TREE_ITEM_TAG_NAME = \"ch-tree-view-item\";\r\nconst TREE_DROP_TAG_NAME = \"ch-tree-view-drop\";\r\nconst TREE_TAG_NAME = \"ch-tree-view\";\r\n\r\n// Droppable zone states\r\nconst CHECKING: TreeViewDroppableZoneState = \"checking\";\r\nconst INVALID: TreeViewDroppableZoneState = \"invalid\";\r\nconst TEMPORAL_INVALID: TreeViewDroppableZoneState = \"temporal-invalid\";\r\nconst VALID: TreeViewDroppableZoneState = \"valid\";\r\n\r\n// Selectors\r\n// const CHECKED_ITEMS = `${TREE_ITEM_TAG_NAME}[checked]`;\r\nconst ITEM_SELECTOR = (treeItemId: string) =>\r\n  `${TREE_ITEM_TAG_NAME}[id=\"${treeItemId}\"]`;\r\n\r\nconst TEXT_FORMAT = \"text/plain\";\r\n\r\nconst ARROW_DOWN_KEY = \"ArrowDown\";\r\nconst ARROW_UP_KEY = \"ArrowUp\";\r\nconst EDIT_KEY = \"F2\";\r\n\r\ntype KeyEvents = typeof ARROW_DOWN_KEY | typeof ARROW_UP_KEY | typeof EDIT_KEY;\r\n\r\nconst isTreeDrop = (element: HTMLElement) =>\r\n  element.tagName.toLowerCase() === TREE_DROP_TAG_NAME;\r\n\r\nconst isTreeItem = (element: HTMLElement) =>\r\n  element.tagName.toLowerCase() === TREE_ITEM_TAG_NAME;\r\n\r\nconst isTreeItemOrTreeDrop = (elementTagName: string) =>\r\n  elementTagName === TREE_ITEM_TAG_NAME ||\r\n  elementTagName === TREE_DROP_TAG_NAME;\r\n\r\nconst getFocusedTreeItem = (): HTMLChTreeViewItemElement | undefined =>\r\n  focusComposedPath().find(isTreeItem) as HTMLChTreeViewItemElement;\r\n\r\nconst canMoveTreeItemFocus = (treeItem: HTMLChTreeViewItemElement): boolean =>\r\n  treeItem && !treeItem.editing;\r\n\r\nconst getDroppableZoneKey = (\r\n  newContainerId: string,\r\n  draggedItems: GxDataTransferInfo[],\r\n  dropType: TreeViewDropType\r\n) =>\r\n  `\"newContainerId\":\"${newContainerId}\",\"metadata\":\"${JSON.stringify(\r\n    draggedItems\r\n  )}\",\"dropType\":\"${dropType}\"`;\r\n\r\nconst POSITION_X_DRAG_CUSTOM_VAR = \"--ch-tree-view-dragging-item-x\";\r\nconst POSITION_Y_DRAG_CUSTOM_VAR = \"--ch-tree-view-dragging-item-y\";\r\n\r\nlet autoId = 0;\r\n\r\n/**\r\n * @part drag-preview - The element that contains the preview information for the current drag.\r\n */\r\n@Component({\r\n  tag: \"ch-tree-view\",\r\n  styleUrl: \"tree-view.scss\",\r\n  shadow: true\r\n})\r\nexport class ChTreeView {\r\n  // @todo TODO: Check if key codes works in Safari\r\n  #keyDownEvents: {\r\n    [key in KeyEvents]: (event: KeyboardEvent) => void;\r\n  } = {\r\n    [ARROW_DOWN_KEY]: event => {\r\n      const treeItem = getFocusedTreeItem();\r\n\r\n      if (!canMoveTreeItemFocus(treeItem)) {\r\n        return;\r\n      }\r\n      event.preventDefault();\r\n      treeItem.focusNextItem(mouseEventModifierKey(event));\r\n    },\r\n\r\n    [ARROW_UP_KEY]: event => {\r\n      const treeItem = getFocusedTreeItem();\r\n\r\n      if (!canMoveTreeItemFocus(treeItem)) {\r\n        return;\r\n      }\r\n      event.preventDefault();\r\n      treeItem.focusPreviousItem(mouseEventModifierKey(event));\r\n    },\r\n\r\n    [EDIT_KEY]: event => {\r\n      const treeItem = getFocusedTreeItem();\r\n\r\n      if (!treeItem || !treeItem.editable) {\r\n        return;\r\n      }\r\n\r\n      event.preventDefault();\r\n      treeItem.editing = true;\r\n    }\r\n  };\r\n\r\n  #draggingSelectedItems = false;\r\n  #needForRAF = true; // To prevent redundant RAF (request animation frame) calls\r\n  #lastDragEvent: MouseEvent;\r\n\r\n  #openSubTreeTimeout: NodeJS.Timeout;\r\n\r\n  /**\r\n   * Cache to avoid duplicate requests when checking the droppable zone in the\r\n   * same drag event.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #validDroppableZoneCache: Map<string, TreeViewDroppableZoneState> = new Map();\r\n  #dragStartTimestamp: number; // Useful to avoid race conditions where the server response is slow\r\n  #draggedItems: GxDataTransferInfo[];\r\n\r\n  /**\r\n   * Useful to identify the control and subscribe to RTL changes\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #treeViewId: string;\r\n\r\n  // Refs\r\n  #currentDraggedItem: HTMLChTreeViewItemElement;\r\n  #lastOpenSubTreeItem: HTMLChTreeViewItemElement | HTMLChTreeViewDropElement;\r\n\r\n  /**\r\n   * Text displayed when dragging an item.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #dragInfo: string;\r\n  #draggedIds: string[] = [];\r\n  #draggedParentIds: string[] = [];\r\n\r\n  @Element() el: HTMLChTreeViewElement;\r\n\r\n  @State() draggingInTheDocument = false;\r\n\r\n  @State() draggingInTree = false;\r\n\r\n  @State() rtlDirection = false;\r\n\r\n  /**\r\n   * Set this attribute if you want to allow multi selection of the items.\r\n   */\r\n  @Prop() readonly multiSelection: boolean = false;\r\n\r\n  /**\r\n   * This property lets you specify the time (in ms) that the mouse must be\r\n   * over in a subtree to open it when dragging.\r\n   */\r\n  @Prop() readonly openSubTreeCountdown: number = 750;\r\n\r\n  /**\r\n   * Callback that is executed to get the current selected items.\r\n   */\r\n  @Prop() readonly selectedItemsCallback: () => Map<\r\n    string,\r\n    TreeViewItemSelectedInfo\r\n  >;\r\n\r\n  /**\r\n   * `true` to scroll in the tree when dragging an item near the edges of the\r\n   * tree.\r\n   */\r\n  @Prop() readonly scrollToEdgeOnDrag: boolean = true;\r\n\r\n  /**\r\n   * This property lets you specify if the tree is waiting to process the drop\r\n   * of items.\r\n   */\r\n  @Prop() readonly waitDropProcessing: boolean = false;\r\n\r\n  /**\r\n   * Fired when an element attempts to enter in a droppable zone where the tree\r\n   * has no information about the validity of the drop.\r\n   */\r\n  @Event() droppableZoneEnter: EventEmitter<TreeViewDropCheckInfo>;\r\n\r\n  /**\r\n   * Fired when an item is expanded or collapsed.\r\n   */\r\n  @Event() expandedItemChange: EventEmitter<TreeViewItemExpandedInfo>;\r\n\r\n  /**\r\n   * Fired when an element displays its contextmenu.\r\n   */\r\n  @Event() itemContextmenu: EventEmitter<TreeViewItemContextMenu>;\r\n\r\n  /**\r\n   * Fired when the dragged items are dropped in another item of the tree.\r\n   */\r\n  @Event() itemsDropped: EventEmitter<TreeViewDataTransferInfo>;\r\n\r\n  /**\r\n   * Fired when the selected items change.\r\n   */\r\n  @Event() selectedItemsChange: EventEmitter<\r\n    Map<string, TreeViewItemSelectedInfo>\r\n  >;\r\n\r\n  @Listen(\"contextmenu\", { capture: true })\r\n  onContextMenu(event: PointerEvent) {\r\n    const treeItem = (event.target as HTMLElement).closest(TREE_ITEM_TAG_NAME);\r\n\r\n    if (!treeItem) {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n\r\n    this.itemContextmenu.emit({\r\n      id: treeItem.id,\r\n      itemRef: treeItem,\r\n      metadata: treeItem.metadata,\r\n      contextmenuEvent: event\r\n    });\r\n  }\r\n\r\n  // Set edit mode in items\r\n  @Listen(\"keydown\", { capture: true })\r\n  onKeyDown(event: KeyboardEvent) {\r\n    const keyHandler = this.#keyDownEvents[event.key];\r\n\r\n    if (keyHandler) {\r\n      keyHandler(event);\r\n    }\r\n  }\r\n\r\n  // We can't use capture, because the dataTransfer info would not be defined\r\n  // Also, we cant use capture and setTimeout with 0 seconds, because the\r\n  // getData method can only be accessed during the dragstart and drop event\r\n  @Listen(\"dragstart\", { passive: true, target: \"window\" })\r\n  onDragStart(event: DragEvent) {\r\n    // Reset the validity of the droppable zones with each new drag start\r\n    this.#validDroppableZoneCache.clear();\r\n\r\n    // If there is no data, the dragstart does not achieve the interface required\r\n    const data = event.dataTransfer.getData(TEXT_FORMAT);\r\n    if (data === \"\") {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Try to parse the data\r\n      const paredData = JSON.parse(data);\r\n\r\n      this.#draggedItems = paredData;\r\n      this.draggingInTheDocument = true;\r\n      this.#dragStartTimestamp = new Date().getTime();\r\n    } catch {\r\n      // Empty\r\n    }\r\n  }\r\n\r\n  @Listen(\"dragend\", { capture: true, passive: true, target: \"window\" })\r\n  onDragEnd() {\r\n    this.draggingInTheDocument = false;\r\n  }\r\n\r\n  @Listen(\"dragenter\", { capture: true, passive: true })\r\n  onDragEnter(event: DragEvent) {\r\n    this.#cancelSubTreeOpening(null, true);\r\n    event.stopPropagation();\r\n\r\n    // The event target can be either a tree item or a tree drop element\r\n    const eventTarget = event.target as\r\n      | HTMLChTreeViewItemElement\r\n      | HTMLChTreeViewDropElement;\r\n    const containerTargetTagName = eventTarget.tagName.toLowerCase();\r\n\r\n    // Check if it is a valid item\r\n    if (!isTreeItemOrTreeDrop(containerTargetTagName)) {\r\n      return;\r\n    }\r\n\r\n    const targetIsTreeItem = containerTargetTagName === TREE_ITEM_TAG_NAME;\r\n    const dragEnterInformation = this.#getDropTypeAndTreeItemTarget(\r\n      eventTarget,\r\n      targetIsTreeItem\r\n    );\r\n    const treeItemTarget = dragEnterInformation.treeItem;\r\n    const dropType = dragEnterInformation.dropType;\r\n\r\n    this.#lastOpenSubTreeItem = eventTarget;\r\n\r\n    // Only the tree view items can open its subtree when hovering\r\n    if (targetIsTreeItem) {\r\n      this.#openSubTreeAfterCountdown(treeItemTarget);\r\n    }\r\n\r\n    if (this.#validDroppableZone(event, treeItemTarget, dropType) === VALID) {\r\n      eventTarget.dragState = \"enter\";\r\n    }\r\n  }\r\n\r\n  @Listen(\"dragleave\", { capture: true, passive: true })\r\n  onDragLeave(event: DragEvent) {\r\n    const currentTarget = event.target as\r\n      | HTMLChTreeViewItemElement\r\n      | HTMLChTreeViewDropElement;\r\n\r\n    if (!isTreeItemOrTreeDrop(currentTarget.tagName.toLowerCase())) {\r\n      return;\r\n    }\r\n\r\n    currentTarget.dragState = \"none\";\r\n\r\n    if (isTreeItem(currentTarget)) {\r\n      this.#cancelSubTreeOpening(currentTarget as HTMLChTreeViewItemElement);\r\n    }\r\n  }\r\n\r\n  #getDropTypeAndTreeItemTarget = (\r\n    eventTarget: HTMLChTreeViewItemElement | HTMLChTreeViewDropElement,\r\n    targetIsTreeItem: boolean\r\n  ): {\r\n    treeItem: HTMLChTreeViewItemElement;\r\n    dropType: TreeViewDropType;\r\n  } => {\r\n    // Only the tree view items can open its subtree when hovering\r\n    if (targetIsTreeItem) {\r\n      return {\r\n        treeItem: eventTarget as HTMLChTreeViewItemElement,\r\n        dropType: \"above\"\r\n      };\r\n    }\r\n\r\n    // The drop is intended to be performed before or after the tree item\r\n    const dropType: TreeViewDropType = (\r\n      eventTarget as HTMLChTreeViewDropElement\r\n    ).type;\r\n\r\n    return {\r\n      // Depending on the position of the tree drop, we get the treeItem ref\r\n      treeItem: (dropType === \"before\"\r\n        ? eventTarget.nextElementSibling\r\n        : eventTarget.previousElementSibling) as HTMLChTreeViewItemElement,\r\n      dropType: (eventTarget as HTMLChTreeViewDropElement).type\r\n    };\r\n  };\r\n\r\n  #cancelSubTreeOpening = (\r\n    treeItemOrTreeDrop: HTMLChTreeViewItemElement | HTMLChTreeViewDropElement,\r\n    forceClear = false\r\n  ) => {\r\n    if (this.#lastOpenSubTreeItem === treeItemOrTreeDrop || forceClear) {\r\n      clearTimeout(this.#openSubTreeTimeout);\r\n      this.#lastOpenSubTreeItem = null;\r\n    }\r\n  };\r\n\r\n  @Listen(\"drop\")\r\n  onDrop(event: DragEvent) {\r\n    event.stopPropagation();\r\n\r\n    this.#cancelSubTreeOpening(null, true);\r\n    const eventTarget = event.target as\r\n      | HTMLChTreeViewItemElement\r\n      | HTMLChTreeViewDropElement;\r\n    const containerTargetTagName = eventTarget.tagName.toLowerCase();\r\n\r\n    // Check if it is a valid item\r\n    if (!isTreeItemOrTreeDrop(containerTargetTagName)) {\r\n      return;\r\n    }\r\n\r\n    // Remove drag enter mode\r\n    eventTarget.dragState = \"none\";\r\n\r\n    const targetIsTreeItem = containerTargetTagName === TREE_ITEM_TAG_NAME;\r\n    const dragEnterInformation = this.#getDropTypeAndTreeItemTarget(\r\n      eventTarget,\r\n      targetIsTreeItem\r\n    );\r\n    const treeItemTarget = dragEnterInformation.treeItem;\r\n    const dropType = dragEnterInformation.dropType;\r\n\r\n    // The droppable zone must be checked, even if it was marked as not valid\r\n    // @todo Try to drop an item with high delays in droppable zone checking\r\n    if (this.#validDroppableZone(event, treeItemTarget, dropType) !== VALID) {\r\n      return;\r\n    }\r\n\r\n    // TODO: Check dataTransfer format before parsing?\r\n    const draggedItems: GxDataTransferInfo[] = JSON.parse(\r\n      event.dataTransfer.getData(TEXT_FORMAT)\r\n    );\r\n\r\n    this.itemsDropped.emit({\r\n      newContainer: {\r\n        id: treeItemTarget.id,\r\n        metadata: treeItemTarget.metadata\r\n      },\r\n      draggingSelectedItems: this.#draggingSelectedItems,\r\n      draggedItems: draggedItems,\r\n      dropInTheSameTree: this.draggingInTree,\r\n      dropType: dropType\r\n    });\r\n  }\r\n\r\n  @Listen(\"itemDragStart\")\r\n  onItemDragStart(event: ChTreeViewItemCustomEvent<TreeViewItemDragStartInfo>) {\r\n    // Avoid bubbling as this event can listened in other components (e.g. ch-flexible-layout)\r\n    event.stopPropagation();\r\n\r\n    document.addEventListener(\"dragover\", this.#trackItemDrag, {\r\n      capture: true\r\n    });\r\n\r\n    this.#currentDraggedItem = event.target;\r\n    const allItemsCanBeDragged = this.#checkDragValidityAndUpdateDragInfo(\r\n      event.detail\r\n    );\r\n\r\n    if (!allItemsCanBeDragged) {\r\n      // This effect disables drop interactions in all page elements, so there\r\n      // is no need to capture and prevent the drop event in the window\r\n      event.detail.dragEvent.dataTransfer.effectAllowed = \"none\";\r\n      return;\r\n    }\r\n\r\n    this.draggingInTree = true;\r\n\r\n    if (this.scrollToEdgeOnDrag) {\r\n      this.#fixScrollPositionOnDrag();\r\n    }\r\n  }\r\n\r\n  @Listen(\"itemDragEnd\")\r\n  onItemDragEnd() {\r\n    this.draggingInTree = false;\r\n\r\n    document.removeEventListener(\"dragover\", this.#trackItemDrag, {\r\n      capture: true\r\n    });\r\n\r\n    // Reset not allowed droppable ids\r\n    this.#resetVariables();\r\n  }\r\n\r\n  @Listen(\"selectedItemChange\")\r\n  onSelectedItemChange(event: ChTreeViewItemCustomEvent<TreeViewItemSelected>) {\r\n    event.stopPropagation();\r\n    const selectedItemInfo = event.detail;\r\n    const selectedItemsInfo = this.selectedItemsCallback();\r\n\r\n    // If the Control key was not pressed or multi selection is disabled,\r\n    // remove all selected items\r\n    if (!selectedItemInfo.ctrlKeyPressed || !this.multiSelection) {\r\n      // Clear selected items\r\n      selectedItemsInfo.clear();\r\n    }\r\n\r\n    // If the item is selected, add it to list\r\n    if (selectedItemInfo.selected) {\r\n      selectedItemsInfo.set(selectedItemInfo.id, selectedItemInfo);\r\n    } else {\r\n      selectedItemsInfo.delete(selectedItemInfo.id);\r\n    }\r\n\r\n    // Sync with UI model\r\n    this.selectedItemsChange.emit(selectedItemsInfo);\r\n  }\r\n\r\n  /**\r\n   * Given an item id, it scrolls into the item's view.\r\n   */\r\n  @Method()\r\n  async scrollIntoVisible(treeItemId: string) {\r\n    readTask(() => {\r\n      const itemRef = this.el.querySelector(ITEM_SELECTOR(treeItemId));\r\n      if (!itemRef) {\r\n        return;\r\n      }\r\n\r\n      writeTask(() => {\r\n        itemRef.scrollIntoView();\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update the information about the valid droppable zones.\r\n   * @param requestTimestamp Time where the request to the server was made. Useful to avoid having old information.\r\n   * @param newContainerId ID of the container where the drag is trying to be made.\r\n   * @param draggedItems Information about the dragged items.\r\n   * @param validDrop Current state of the droppable zone.\r\n   */\r\n  @Method()\r\n  async updateValidDropZone(\r\n    requestTimestamp: number,\r\n    newContainerId: string,\r\n    draggedItems: GxDataTransferInfo[],\r\n    dropType: TreeViewDropType,\r\n    validDrop: boolean\r\n  ) {\r\n    if (\r\n      !this.draggingInTheDocument ||\r\n      requestTimestamp <= this.#dragStartTimestamp\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const droppableZoneKey = getDroppableZoneKey(\r\n      newContainerId,\r\n      draggedItems,\r\n      dropType\r\n    );\r\n    this.#validDroppableZoneCache.set(\r\n      droppableZoneKey,\r\n      validDrop ? VALID : INVALID\r\n    );\r\n\r\n    // Don't show droppable zones if the dragEnter is invalid or the last\r\n    // dragover was not performed in the same node that this method validates\r\n    if (!validDrop || !this.#lastOpenSubTreeItem) {\r\n      return;\r\n    }\r\n\r\n    const treeItemId = isTreeDrop(this.#lastOpenSubTreeItem)\r\n      ? (this.#lastOpenSubTreeItem as HTMLChTreeViewDropElement).treeItemId\r\n      : this.#lastOpenSubTreeItem.id;\r\n\r\n    const shouldUpdateDragEnterInCurrentContainer =\r\n      treeItemId === newContainerId;\r\n\r\n    if (shouldUpdateDragEnterInCurrentContainer) {\r\n      this.#lastOpenSubTreeItem.dragState = \"enter\";\r\n    }\r\n  }\r\n\r\n  #getTreeViewItemRef = itemId =>\r\n    this.el.querySelector(ITEM_SELECTOR(itemId)) as HTMLChTreeViewItemElement;\r\n\r\n  #validDroppableZone = (\r\n    event: DragEvent,\r\n    treeItemTarget: HTMLChTreeViewItemElement,\r\n    dropType: TreeViewDropType\r\n  ): TreeViewDroppableZoneState => {\r\n    const cacheKey = getDroppableZoneKey(\r\n      treeItemTarget.id,\r\n      this.#draggedItems,\r\n      dropType\r\n    );\r\n    let droppableZoneState = this.#validDroppableZoneCache.get(cacheKey);\r\n\r\n    // Invalidate the cache, because the item is no longer waiting for its\r\n    // content to be downloaded\r\n    if (\r\n      droppableZoneState === TEMPORAL_INVALID &&\r\n      !treeItemTarget.lazyLoad &&\r\n      !treeItemTarget.downloading\r\n    ) {\r\n      droppableZoneState = null;\r\n    }\r\n\r\n    // If there is a cached value, return the cached value\r\n    if (droppableZoneState != null) {\r\n      return droppableZoneState;\r\n    }\r\n\r\n    // Do not show drop zones if:\r\n    //   - The effect does not allow it.\r\n    //   - The drop is disabled in the container target when dragging \"above\".\r\n    //   - When dragging in the same tree, don't mark droppable zones if they are\r\n    //     the dragged items or their direct parents.\r\n    //\r\n    // There is no need to check the following case, because the tree drop is\r\n    // not even rendered:\r\n    //   - When dragging \"before\" and \"after\" an item and the direct parent\r\n    //     has drops disabled.\r\n    if (\r\n      event.dataTransfer.effectAllowed === \"none\" ||\r\n      (dropType === \"above\" && treeItemTarget.dropDisabled) ||\r\n      (this.draggingInTree &&\r\n        (this.#draggedIds.includes(treeItemTarget.id) ||\r\n          this.#draggedParentIds.includes(treeItemTarget.id)))\r\n    ) {\r\n      this.#validDroppableZoneCache.set(cacheKey, INVALID);\r\n      return INVALID;\r\n    }\r\n\r\n    // Disable \"above\" drops when items need to lazy load their content first\r\n    if (\r\n      dropType === \"above\" &&\r\n      (treeItemTarget.lazyLoad || treeItemTarget.downloading)\r\n    ) {\r\n      this.#validDroppableZoneCache.set(cacheKey, TEMPORAL_INVALID);\r\n      return TEMPORAL_INVALID;\r\n    }\r\n\r\n    // Otherwise, emit the event to check the droppable zone\r\n    this.#validDroppableZoneCache.set(cacheKey, CHECKING);\r\n    this.droppableZoneEnter.emit({\r\n      newContainer: {\r\n        id: treeItemTarget.id,\r\n        metadata: treeItemTarget.metadata\r\n      },\r\n      draggedItems: this.#draggedItems,\r\n      dropType: dropType\r\n    });\r\n    return CHECKING;\r\n  };\r\n\r\n  #openSubTreeAfterCountdown = (currentTarget: HTMLChTreeViewItemElement) => {\r\n    if (currentTarget.leaf || currentTarget.expanded) {\r\n      return;\r\n    }\r\n\r\n    this.#openSubTreeTimeout = setTimeout(() => {\r\n      currentTarget.expanded = true;\r\n      this.expandedItemChange.emit({ id: currentTarget.id, expanded: true });\r\n    }, this.openSubTreeCountdown);\r\n  };\r\n\r\n  #trackItemDrag = (event: DragEvent) => {\r\n    const draggingInATree =\r\n      (event.target as HTMLElement).closest(TREE_TAG_NAME) !== null;\r\n\r\n    // The Tree View must be the only element that processes the \"dragover\"\r\n    // event. Any other handler that processes this event can modify the\r\n    // `dropEffect` an thus break the drag and drop implementation\r\n    if (draggingInATree) {\r\n      event.stopImmediatePropagation();\r\n    }\r\n\r\n    event.preventDefault();\r\n    this.#lastDragEvent = event;\r\n\r\n    this.#updateDropEffect(event);\r\n\r\n    if (!this.#needForRAF) {\r\n      return;\r\n    }\r\n    this.#needForRAF = false; // No need to call RAF up until next frame\r\n\r\n    requestAnimationFrame(() => {\r\n      this.#needForRAF = true; // RAF now consumes the movement instruction so a new one can come\r\n\r\n      this.el.style.setProperty(\r\n        POSITION_X_DRAG_CUSTOM_VAR,\r\n        `${this.#lastDragEvent.clientX}px`\r\n      );\r\n      this.el.style.setProperty(\r\n        POSITION_Y_DRAG_CUSTOM_VAR,\r\n        `${this.#lastDragEvent.clientY}px`\r\n      );\r\n    });\r\n  };\r\n\r\n  #updateDropEffect = (event: DragEvent) => {\r\n    // Drag over was performed outside of the Tree View\r\n    if (!event.composedPath().includes(this.el)) {\r\n      return;\r\n    }\r\n\r\n    // We have to used composePath to find if an item is a target in the\r\n    // dragover event\r\n    const itemTarget = event.composedPath().find((element: HTMLElement) => {\r\n      if (!element.tagName) {\r\n        return false;\r\n      }\r\n\r\n      return (\r\n        isTreeItemOrTreeDrop(element.tagName.toLowerCase()) &&\r\n        element.closest(TREE_TAG_NAME) === this.el\r\n      );\r\n    }) as HTMLChTreeViewItemElement | HTMLChTreeViewDropElement;\r\n\r\n    const targetIsTreeItem =\r\n      itemTarget.tagName.toLowerCase() === TREE_ITEM_TAG_NAME;\r\n    const dragEnterInformation = this.#getDropTypeAndTreeItemTarget(\r\n      itemTarget,\r\n      targetIsTreeItem\r\n    );\r\n    const treeItemTarget = dragEnterInformation.treeItem;\r\n    const dropType = dragEnterInformation.dropType;\r\n\r\n    const droppableZoneState = this.#validDroppableZone(\r\n      event,\r\n      treeItemTarget,\r\n      dropType\r\n    );\r\n\r\n    if (\r\n      droppableZoneState === INVALID ||\r\n      droppableZoneState === TEMPORAL_INVALID\r\n    ) {\r\n      event.dataTransfer.dropEffect = \"none\";\r\n    }\r\n  };\r\n\r\n  #resetVariables = () => {\r\n    this.#draggedIds = [];\r\n    this.#draggedParentIds = [];\r\n  };\r\n\r\n  /**\r\n   * First, it check if all items can be dragged. If so, it updates the\r\n   * dataTransfer in the drag event to store the ids and metadata of the\r\n   * dragged items. Also it updates the visual information of the dragged\r\n   * items.\r\n   * @returns If all selected items can be dragged.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #checkDragValidityAndUpdateDragInfo = (\r\n    dragInfo: TreeViewItemDragStartInfo\r\n  ): boolean => {\r\n    const draggedElement = dragInfo.elem;\r\n\r\n    const selectedItemsInfo = this.selectedItemsCallback();\r\n    const isDraggingSelectedItems = selectedItemsInfo.has(draggedElement.id);\r\n    this.#draggingSelectedItems = isDraggingSelectedItems;\r\n\r\n    let dataTransferInfo: GxDataTransferInfo[] = [];\r\n    let dragIsEnabledForAllItems: boolean;\r\n\r\n    if (isDraggingSelectedItems) {\r\n      const selectedItemKeys = [...selectedItemsInfo.keys()];\r\n      const selectedItemValues = [...selectedItemsInfo.values()];\r\n      const selectedItemCount = selectedItemKeys.length;\r\n\r\n      dragIsEnabledForAllItems = selectedItemValues.every(\r\n        el => !this.#getTreeViewItemRef(el.id).dragDisabled\r\n      );\r\n\r\n      this.#draggedIds = selectedItemKeys;\r\n      dataTransferInfo = selectedItemValues.map(el => ({\r\n        id: el.id,\r\n        metadata: el.metadata\r\n      }));\r\n\r\n      this.#dragInfo =\r\n        selectedItemCount === 1\r\n          ? draggedElement.caption\r\n          : selectedItemCount.toString();\r\n    } else {\r\n      dragIsEnabledForAllItems = !draggedElement.dragDisabled;\r\n      dataTransferInfo = [\r\n        { id: draggedElement.id, metadata: draggedElement.metadata }\r\n      ];\r\n      this.#draggedIds = [draggedElement.id];\r\n      this.#dragInfo = draggedElement.caption;\r\n    }\r\n\r\n    this.#getDirectParentsOfDraggableItems(isDraggingSelectedItems);\r\n\r\n    // Update drag event info\r\n    const data = JSON.stringify(dataTransferInfo);\r\n    dragInfo.dragEvent.dataTransfer.setData(TEXT_FORMAT, data);\r\n\r\n    // We must keep the data binding and processing even if there is an item\r\n    // that can't be dragged, otherwise, other trees or element might behave\r\n    // unexpected when a dragstart event comes\r\n    return dragIsEnabledForAllItems;\r\n  };\r\n\r\n  #fixScrollPositionOnDrag = () => {\r\n    if (!this.draggingInTree || !this.#lastDragEvent) {\r\n      return;\r\n    }\r\n\r\n    requestAnimationFrame(() => {\r\n      scrollToEdge(this.#lastDragEvent, this.el, 10, 30);\r\n\r\n      requestAnimationFrame(this.#fixScrollPositionOnDrag);\r\n    });\r\n  };\r\n\r\n  #getDirectParentsOfDraggableItems = (draggingSelectedItems: boolean) => {\r\n    if (!draggingSelectedItems) {\r\n      const parentTreeItemElem = this.#currentDraggedItem.parentElement;\r\n\r\n      if (parentTreeItemElem.tagName.toLowerCase() === TREE_ITEM_TAG_NAME) {\r\n        this.#draggedParentIds.push(parentTreeItemElem.id);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    // Dragging selected items\r\n    const selectedItemsInfo = this.selectedItemsCallback();\r\n    selectedItemsInfo.forEach(selectedItem => {\r\n      const parentId = selectedItem.parentId;\r\n\r\n      // parentId === \"\" when the item is in the first level of the tree\r\n      if (parentId !== \"\") {\r\n        this.#draggedParentIds.push(parentId);\r\n      }\r\n    });\r\n  };\r\n\r\n  connectedCallback() {\r\n    this.#treeViewId = `ch-tree-view-id-${autoId++}`;\r\n\r\n    subscribeToRTLChanges(this.#treeViewId, (rtl: boolean) => {\r\n      this.rtlDirection = rtl;\r\n    });\r\n\r\n    // Initialize rtlDirection value\r\n    this.rtlDirection = isRTL();\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    unsubscribeToRTLChanges(this.#treeViewId);\r\n\r\n    this.#resetVariables();\r\n\r\n    // Remove dragover body event\r\n    this.onItemDragEnd();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host\r\n        class={{\r\n          \"dragging-item\": this.draggingInTheDocument,\r\n          \"not-dragging-item\": !this.draggingInTheDocument, // WA for some bugs in GeneXus' DSO\r\n          \"dragging-selected-items\":\r\n            this.draggingInTree && this.#draggingSelectedItems,\r\n          \"rtl-direction\": this.rtlDirection,\r\n          \"waiting-drop-processing\": this.waitDropProcessing\r\n        }}\r\n        exportparts={TREE_VIEW_PARTS_DICTIONARY.DRAG_PREVIEW}\r\n      >\r\n        <slot />\r\n\r\n        {this.draggingInTree && (\r\n          <span\r\n            aria-hidden=\"true\"\r\n            class=\"drag-info\"\r\n            part={TREE_VIEW_PARTS_DICTIONARY.DRAG_PREVIEW}\r\n          >\r\n            {this.#dragInfo}\r\n          </span>\r\n        )}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","import { forceUpdate } from \"@stencil/core\";\r\nimport { removeElement } from \"../../common/array\";\r\nimport {\r\n  TreeViewItemModel,\r\n  TreeViewItemModelExtended,\r\n  TreeViewRemoveItemsResult\r\n} from \"./types\";\r\nimport { TREE_VIEW_ITEM_PARTS_DICTIONARY } from \"../../common/reserverd-names\";\r\n\r\nexport const INITIAL_LEVEL = 0;\r\n\r\n// Parts\r\nexport const EVEN_LEVEL = \"even-level\";\r\nexport const ODD_LEVEL = \"odd-level\";\r\n\r\nexport const getTreeItemLevelPart = (evenLevel: boolean) =>\r\n  evenLevel\r\n    ? TREE_VIEW_ITEM_PARTS_DICTIONARY.EVEN_LEVEL\r\n    : TREE_VIEW_ITEM_PARTS_DICTIONARY.ODD_LEVEL;\r\n\r\nexport const getTreeItemExpandedPart = (expanded: boolean) =>\r\n  expanded\r\n    ? TREE_VIEW_ITEM_PARTS_DICTIONARY.EXPANDED\r\n    : TREE_VIEW_ITEM_PARTS_DICTIONARY.COLLAPSED;\r\n\r\nexport const removeTreeViewItems = (\r\n  items: string[] | undefined,\r\n  flattenedTreeModel: Map<string, TreeViewItemModelExtended>,\r\n  flattenedCheckboxTreeModel: Map<string, TreeViewItemModelExtended>,\r\n  selectedItems: Set<string>\r\n): TreeViewRemoveItemsResult => {\r\n  let atLeastOneElement = false;\r\n  let atLeastOneCheckbox = false;\r\n  let atLeastOneSelected = false;\r\n\r\n  items.forEach(itemId => {\r\n    const itemUIModel = flattenedTreeModel.get(itemId);\r\n\r\n    if (itemUIModel) {\r\n      const itemInfo = itemUIModel.item;\r\n      const parentArray = itemUIModel.parentItem.items;\r\n\r\n      // Remove subitems\r\n      if (itemInfo.leaf !== true && itemInfo.items?.length > 0) {\r\n        const subItemsId = itemInfo.items.map(item => item.id);\r\n\r\n        removeTreeViewItems(\r\n          subItemsId,\r\n          flattenedTreeModel,\r\n          flattenedCheckboxTreeModel,\r\n          selectedItems\r\n        );\r\n      }\r\n\r\n      // Remove item\r\n      atLeastOneElement ||= flattenedTreeModel.delete(itemId);\r\n      atLeastOneCheckbox ||= flattenedCheckboxTreeModel.delete(itemId);\r\n      atLeastOneSelected ||= selectedItems.delete(itemId);\r\n      removeElement(\r\n        parentArray,\r\n        parentArray.findIndex(element => element.id === itemId)\r\n      );\r\n    }\r\n  });\r\n\r\n  return {\r\n    atLeastOneElement: atLeastOneElement,\r\n    atLeastOneCheckbox: atLeastOneCheckbox,\r\n    atLeastOneSelected: atLeastOneSelected\r\n  };\r\n};\r\n\r\nconst resolveNewPromise = <T>(value: T): Promise<T> =>\r\n  new Promise(resolve => resolve(value));\r\n\r\n/**\r\n * Given an item id, it displays and scrolls into the item view.\r\n *\r\n * @returns If the operation was completed successfully.\r\n */\r\nexport const scrollIntoVisibleId = (\r\n  path: string,\r\n  flattenedTreeModel: Map<string, TreeViewItemModelExtended>\r\n): Promise<boolean> => {\r\n  const itemUIModel = flattenedTreeModel.get(path);\r\n\r\n  if (!itemUIModel) {\r\n    return resolveNewPromise(false);\r\n  }\r\n\r\n  let visitedNode = itemUIModel.parentItem as TreeViewItemModel;\r\n\r\n  // While the parent is not the root, update the UI Models\r\n  while (visitedNode && visitedNode.id != null) {\r\n    // Expand the item\r\n    visitedNode.expanded = true;\r\n\r\n    const visitedNodeUIModel = flattenedTreeModel.get(visitedNode.id);\r\n    visitedNode = visitedNodeUIModel.parentItem as TreeViewItemModel;\r\n  }\r\n\r\n  return resolveNewPromise(true);\r\n};\r\n\r\n/**\r\n * Given the path of the item (represent by a sorted array containing all ids\r\n * from the root to the item), it displays and scrolls into the item view.\r\n *\r\n * @returns If the operation was completed successfully.\r\n */\r\nexport const scrollIntoVisiblePath = async (\r\n  elementRef: HTMLChTreeViewRenderElement,\r\n  path: string[],\r\n  flattenedTreeModel: Map<string, TreeViewItemModelExtended>,\r\n  rootNode: TreeViewItemModel,\r\n  lazyLoadTreeItemsCallback: (\r\n    treeItemId: string\r\n  ) => Promise<TreeViewItemModel[]>\r\n): Promise<boolean> => {\r\n  const pathHasRepeatedElements = new Set(path).size !== path.length;\r\n\r\n  if (pathHasRepeatedElements) {\r\n    return false;\r\n  }\r\n\r\n  const indexOfLastItemInPath = path.length - 1;\r\n  let lastRenderedItemInPath = indexOfLastItemInPath;\r\n\r\n  // Start from the last item in the path\r\n  let itemUIModel = flattenedTreeModel.get(path[lastRenderedItemInPath]);\r\n\r\n  // Find the last item that is rendered\r\n  while (itemUIModel === undefined && lastRenderedItemInPath > 0) {\r\n    lastRenderedItemInPath--;\r\n    itemUIModel = flattenedTreeModel.get(path[lastRenderedItemInPath]);\r\n  }\r\n\r\n  if (!itemUIModel) {\r\n    return false;\r\n  }\r\n\r\n  const indexOfLastRenderItem = lastRenderedItemInPath;\r\n\r\n  // At this point, we have the index of the last render item. We must check if\r\n  // the rest of the path up to the root is valid\r\n  while (lastRenderedItemInPath >= 0) {\r\n    if (flattenedTreeModel.get(path[lastRenderedItemInPath]) === undefined) {\r\n      return false;\r\n    }\r\n\r\n    lastRenderedItemInPath--;\r\n  }\r\n\r\n  // Check if the first item in the path is the root, to completely validate\r\n  // the path\r\n  if (flattenedTreeModel.get(path[0]).parentItem !== rootNode) {\r\n    return false;\r\n  }\r\n\r\n  // - - - - - - - - - - - - - - - - - -\r\n  // At this point, we now that the path starts from the root and is valid up to\r\n  // the last rendered item\r\n  // root, node1, node2, ..., indexOfLastRenderItem, unloadedNode1, unloadedNode2, ..., nodeToScrollIntoVisible\r\n  // - - - - - - - - - - - - - - - - - -\r\n  const thereAreMoreItemsToLazyLoad =\r\n    indexOfLastRenderItem !== indexOfLastItemInPath;\r\n  const canNotLazyLoadRemainingPath =\r\n    thereAreMoreItemsToLazyLoad && !lazyLoadTreeItemsCallback;\r\n\r\n  if (canNotLazyLoadRemainingPath) {\r\n    return false;\r\n  }\r\n\r\n  // Expand all parent items\r\n  let parentUIModel = flattenedTreeModel.get(\r\n    path[indexOfLastRenderItem]\r\n  ).parentItem;\r\n\r\n  while (parentUIModel !== rootNode) {\r\n    parentUIModel.expanded = true;\r\n    parentUIModel = flattenedTreeModel.get(parentUIModel.id).parentItem;\r\n  }\r\n\r\n  forceUpdate(elementRef);\r\n\r\n  // Load the remaining path (unloadedNode1, unloadedNode2, ..., nodeToScrollIntoVisible),\r\n  // checking in each step if the next item to lazy load exists\r\n  let nextIndexToLazyLoad = indexOfLastRenderItem;\r\n\r\n  // The reloaded processing will end in the parent of the last item\r\n  while (nextIndexToLazyLoad < indexOfLastItemInPath) {\r\n    const itemId = path[nextIndexToLazyLoad];\r\n\r\n    const itemUIModel = flattenedTreeModel.get(itemId);\r\n\r\n    // Check if the rest of the path up to the last item is valid, if not,\r\n    // cancel the scrollIntoVisible operation\r\n    if (!itemUIModel) {\r\n      return false;\r\n    }\r\n\r\n    const itemInfo = itemUIModel.item;\r\n\r\n    // The remaining path is invalid, because there is an item that isn't a folder\r\n    if (itemInfo.leaf === true) {\r\n      return false;\r\n    }\r\n\r\n    // Expand the parent and set the downloading state\r\n    itemInfo.downloading = true;\r\n    itemInfo.expanded = true;\r\n    itemInfo.lazy = false;\r\n    forceUpdate(elementRef);\r\n\r\n    const result = await lazyLoadTreeItemsCallback(itemId);\r\n    await elementRef.loadLazyContent(itemId, result);\r\n\r\n    nextIndexToLazyLoad++;\r\n  }\r\n\r\n  return true;\r\n};\r\n",":host {\r\n  --ch-tree-view-drop--size: 8px;\r\n  display: grid;\r\n  position: relative;\r\n  transform: translateY(calc(var(--ch-tree-view-drop--size) * -0.5));\r\n}\r\n\r\n:host::before {\r\n  content: \"\";\r\n  display: flex;\r\n  position: absolute;\r\n  inset-inline: 0;\r\n  block-size: var(--ch-tree-view-drop--size);\r\n  // background-color: #9c9c9c6c;\r\n}\r\n\r\n:host::after {\r\n  display: flex;\r\n  position: absolute;\r\n  align-self: center;\r\n  inset-block-start: calc(var(--ch-tree-view-drop--size) * 0.25);\r\n  inset-inline: 0;\r\n  block-size: calc(var(--ch-tree-view-drop--size) * 0.5);\r\n  background-color: currentColor;\r\n  opacity: 0;\r\n}\r\n\r\n:host(.ch-tree-view-drop--drag-enter)::after {\r\n  content: \"\";\r\n  opacity: 1;\r\n}\r\n","import { Component, Host, Prop, h } from \"@stencil/core\";\r\nimport { INITIAL_LEVEL, getTreeItemLevelPart } from \"../../utils\";\r\nimport { DragState } from \"../tree-view-item/tree-view-item\";\r\nimport { TreeViewDropType } from \"../tree-view/types\";\r\n\r\nconst TREE_DROP_TAG_NAME = \"ch-tree-view-drop\";\r\n\r\n@Component({\r\n  tag: \"ch-tree-view-drop\",\r\n  styleUrl: \"tree-view-drop.scss\",\r\n  shadow: true\r\n})\r\nexport class ChTreeViewDrop {\r\n  /**\r\n   * This property lets you define the current state of the item when it's\r\n   * being dragged.\r\n   */\r\n  @Prop() readonly dragState: DragState = \"none\";\r\n\r\n  /**\r\n   * Level in the tree at which the item is placed.\r\n   */\r\n  @Prop() readonly level: number = INITIAL_LEVEL;\r\n\r\n  /**\r\n   * Specifies the id of the tree item that this element controls.\r\n   */\r\n  @Prop() readonly treeItemId: string;\r\n\r\n  /**\r\n   * Specifies the type of drop that is performed over the control.\r\n   */\r\n  @Prop() readonly type: Exclude<TreeViewDropType, \"above\"> = \"before\";\r\n\r\n  render() {\r\n    const canShowLines = this.level !== INITIAL_LEVEL;\r\n    const levelPart = getTreeItemLevelPart(this.level % 2 === 0);\r\n\r\n    return (\r\n      <Host\r\n        class={{\r\n          [\"gx-\" + levelPart]: canShowLines,\r\n          [TREE_DROP_TAG_NAME + \"--drag-enter\"]: this.dragState === \"enter\"\r\n        }}\r\n        style={{ \"--level\": `${this.level}` }}\r\n      ></Host>\r\n    );\r\n  }\r\n}\r\n","@import \"../../../../common/base\";\r\n@import \"../../../../common/icons\";\r\n\r\n@include box-sizing();\r\n\r\n:where(button) {\r\n  all: unset;\r\n  display: flex;\r\n\r\n  // Disallow selecting the text\r\n  user-select: none;\r\n\r\n  // Avoid zooming on double tap on iOS devices\r\n  touch-action: manipulation;\r\n\r\n  // Allow user drag\r\n  -webkit-user-drag: element;\r\n}\r\n\r\n:host {\r\n  display: grid;\r\n  grid-template-rows: min-content;\r\n  // overflow: hidden;\r\n}\r\n\r\n.header {\r\n  display: flex;\r\n  gap: var(--ch-tree-view-item-gap);\r\n  align-items: center;\r\n\r\n  &--disabled {\r\n    pointer-events: none;\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//              Line\r\n// - - - - - - - - - - - - - - - -\r\n.line {\r\n  $parent-padding-inline-start: \"var(--ch-tree-tab-size) * (var(--level) - 1) - var(--parent-offset, 0px) + var(--ch-tree-view-item-custom-padding-inline-start)\";\r\n  $correction: \"var(--ch-tree-view-item__expandable-button-size) * 0.5 + var(--ch-tree-view-item__line--inset-inline-start)\";\r\n\r\n  --inset-inline-start: calc(#{$parent-padding-inline-start} + #{$correction});\r\n\r\n  position: absolute;\r\n  inset-inline-start: var(--inset-inline-start);\r\n  inline-size: calc(\r\n    var(--ch-tree-view-item-indentation) - var(--inset-inline-start) -\r\n      var(--ch-tree-view-item__line--inset-inline-end)\r\n  );\r\n  block-size: 1px;\r\n\r\n  border: 0 dashed color-mix(in srgb, currentColor 65%, transparent);\r\n  border-block-end-width: 1px;\r\n  pointer-events: none; // Improve hover effect\r\n  content-visibility: hidden;\r\n  z-index: 1;\r\n}\r\n\r\n// Last line of the tree\r\n.last-all-line {\r\n  inset-block-start: 0;\r\n  height: calc(100% - var(--ch-tree-view-item-distance-to-checkbox));\r\n  border-inline-start-width: 1px;\r\n  border-end-start-radius: 2px;\r\n}\r\n\r\n.last-line {\r\n  inset-block-start: 0;\r\n  height: 100%;\r\n  border-inline-start-width: 1px;\r\n  border-style: solid;\r\n  border-block-end: unset;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//        Expandable button\r\n// - - - - - - - - - - - - - - - -\r\n.expandable-button,\r\n.expandable-button-decorative::before {\r\n  display: grid;\r\n  place-items: center;\r\n  inline-size: var(--ch-tree-view-item__expandable-button-size);\r\n  block-size: var(--ch-tree-view-item__expandable-button-size);\r\n  z-index: 1;\r\n  cursor: pointer;\r\n}\r\n\r\n.expandable-button {\r\n  &-decorative {\r\n    &::before {\r\n      content: \"\";\r\n      background-color: currentColor;\r\n      -webkit-mask: $expandable-icon 50% 50% / calc(100% - 4px) calc(100% - 4px)\r\n        no-repeat;\r\n\r\n      cursor: unset;\r\n    }\r\n\r\n    &--collapsed::before {\r\n      transform: rotate(-90deg); // TODO: Add RTL support\r\n    }\r\n  }\r\n\r\n  &::before {\r\n    content: \"\";\r\n    inline-size: calc(100% - 4px);\r\n    block-size: calc(100% - 4px);\r\n    background-color: currentColor;\r\n    -webkit-mask-size: calc(\r\n      var(--ch-tree-view-item__expandable-button-size) - 4px\r\n    );\r\n  }\r\n\r\n  &--collapsed::before {\r\n    -webkit-mask-image: url('data:image/svg+xml,<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14.15,8.5H8.54v5.61h-1V8.5H1.93v-1H7.54V1.89h1V7.5h5.61Z\"/></svg>');\r\n  }\r\n\r\n  &--expanded::before {\r\n    -webkit-mask-image: url('data:image/svg+xml,<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14.15,8.5H1.93v-1H14.15Z\"/></svg>');\r\n  }\r\n\r\n  &:focus-visible {\r\n    outline: 1px solid currentColor;\r\n  }\r\n}\r\n\r\n.checkbox {\r\n  // Necessary to avoid CLS when the ch-checkbox control is downloaded after\r\n  // the tree-view-item did render\r\n  inline-size: var(--ch-tree-view-item__checkbox-size);\r\n  --ch-checkbox__container-size: var(--ch-tree-view-item__checkbox-size);\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//             Action\r\n// - - - - - - - - - - - - - - - -\r\n.action {\r\n  display: grid;\r\n  grid-template: \"start-img text\" / max-content 1fr;\r\n  gap: var(--ch-tree-view-item-gap);\r\n  align-items: center;\r\n  block-size: 100%;\r\n  flex: 1;\r\n  cursor: pointer;\r\n\r\n  // This distinction is necessary to avoid displaying a separation at the end\r\n  // of the input when editing the caption\r\n  &--end-img {\r\n    grid-template: \"start-img text end-img\" / max-content 1fr max-content;\r\n  }\r\n}\r\n\r\n.edit-caption {\r\n  grid-area: text;\r\n  inline-size: 100%;\r\n  block-size: 100%;\r\n  padding: 0;\r\n  margin: 0;\r\n  background-color: unset;\r\n  border: unset;\r\n  color: unset;\r\n  font: unset;\r\n  outline: unset;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//             Images\r\n// - - - - - - - - - - - - - - - -\r\n.pseudo-img--start::before,\r\n.pseudo-img--end::after,\r\n.img {\r\n  display: block;\r\n  inline-size: var(--ch-tree-view-item__image-size);\r\n  block-size: var(--ch-tree-view-item__image-size);\r\n  content-visibility: auto;\r\n  contain-intrinsic-size: auto var(--ch-tree-view-item__image-size);\r\n}\r\n\r\n.pseudo-img--start::before,\r\n.start-img {\r\n  content: \"\";\r\n  grid-area: start-img;\r\n}\r\n\r\n.pseudo-img--end::after,\r\n.end-img {\r\n  content: \"\";\r\n  grid-area: end-img;\r\n}\r\n\r\n// Background\r\n.start-img-type--background::before {\r\n  background: no-repeat center / 100% var(--ch-start-img);\r\n}\r\n.end-img-type--background::after {\r\n  background: no-repeat center / 100% var(--ch-end-img);\r\n}\r\n\r\n// Mask\r\n.start-img-type--mask::before {\r\n  -webkit-mask: var(--ch-start-img) 50% 50% / 100% 100% no-repeat;\r\n  background-color: currentColor;\r\n}\r\n.end-img-type--mask::after {\r\n  -webkit-mask: var(--ch-end-img) 50% 50% / 100% 100% no-repeat;\r\n  background-color: currentColor;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//           Downloading\r\n// - - - - - - - - - - - - - - - -\r\n.downloading {\r\n  $delay-to-show-downloading: 75ms;\r\n\r\n  inline-size: 0.75em;\r\n  block-size: 0.75em;\r\n  // The \"2px\" separation is necessary to avoid issues with the horizontal scrollbar in Firefox\r\n  margin-inline: 8px 2px;\r\n  border: 2px solid currentColor;\r\n  border-inline-start-color: transparent;\r\n  border-radius: 50%;\r\n  opacity: 0.75;\r\n  animation: spin 1s linear infinite,\r\n    avoid-flickering $delay-to-show-downloading;\r\n}\r\n\r\n@keyframes avoid-flickering {\r\n  0%,\r\n  100% {\r\n    display: none;\r\n  }\r\n}\r\n\r\n@keyframes spin {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//       Expandable content\r\n// - - - - - - - - - - - - - - - -\r\n.expandable {\r\n  display: grid;\r\n  grid-auto-rows: min-content;\r\n  position: relative;\r\n\r\n  &--lazy-loaded {\r\n    content-visibility: auto;\r\n    contain-intrinsic-size: auto 100px;\r\n  }\r\n}\r\n\r\n.expandable--collapsed {\r\n  display: none;\r\n  overflow: hidden;\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Method,\r\n  Prop,\r\n  Watch,\r\n  h,\r\n  writeTask\r\n} from \"@stencil/core\";\r\nimport {\r\n  TreeViewItemDragStartInfo,\r\n  TreeViewLines,\r\n  TreeViewItemCheckedInfo,\r\n  TreeViewItemNewCaption,\r\n  TreeViewItemOpenReferenceInfo,\r\n  TreeViewItemSelected\r\n} from \"../tree-view/types\";\r\nimport { mouseEventModifierKey } from \"../../../common/helpers\";\r\nimport {\r\n  ChCheckboxCustomEvent,\r\n  ChTreeViewItemCustomEvent\r\n} from \"../../../../components\";\r\nimport {\r\n  isPseudoElementImg,\r\n  removeDragImage,\r\n  tokenMap\r\n} from \"../../../../common/utils\";\r\nimport {\r\n  INITIAL_LEVEL,\r\n  getTreeItemExpandedPart,\r\n  getTreeItemLevelPart\r\n} from \"../../utils\";\r\nimport { ImageRender } from \"../../../../common/types\";\r\nimport {\r\n  TREE_VIEW_ITEM_CHECKBOX_EXPORT_PARTS,\r\n  TREE_VIEW_ITEM_EXPORT_PARTS,\r\n  TREE_VIEW_ITEM_PARTS_DICTIONARY,\r\n  TREE_VIEW_PARTS_DICTIONARY\r\n} from \"../../../../common/reserverd-names\";\r\n\r\n// Drag and drop\r\nexport type DragState = \"enter\" | \"none\" | \"start\";\r\n\r\nconst DISTANCE_TO_CHECKBOX_CUSTOM_VAR =\r\n  \"--ch-tree-view-item-distance-to-checkbox\";\r\n\r\n// Selectors\r\nconst TREE_ITEM_TAG_NAME = \"ch-tree-view-item\";\r\n\r\nconst DIRECT_TREE_ITEM_CHILDREN = `:scope>${TREE_ITEM_TAG_NAME}`;\r\nconst FIRST_ENABLED_SUB_ITEM = `${TREE_ITEM_TAG_NAME}:not([disabled])`;\r\nconst LAST_SUB_ITEM = `:scope>${TREE_ITEM_TAG_NAME}:last-child`;\r\n\r\n// Custom classes\r\nconst DENY_DROP_CLASS = `item-deny-drop`;\r\n\r\n// Custom parts\r\nconst START_IMAGE_PARTS = `${TREE_VIEW_ITEM_PARTS_DICTIONARY.IMAGE} ${TREE_VIEW_ITEM_PARTS_DICTIONARY.START_IMAGE}`;\r\nconst END_IMAGE_PARTS = `${TREE_VIEW_ITEM_PARTS_DICTIONARY.IMAGE} ${TREE_VIEW_ITEM_PARTS_DICTIONARY.END_IMAGE}`;\r\n\r\n// Keys\r\nconst EXPANDABLE_ID = \"expandable\";\r\nconst ENTER_KEY = \"Enter\";\r\nconst ESCAPE_KEY = \"Escape\";\r\n\r\n/**\r\n * @part item__action - A sub element of the header (item__header part) that contains the main information related to the item (startImage, caption/edit-caption, endImage and downloading).\r\n *\r\n * @part item__checkbox - The host element of the checkbox.\r\n * @part item__checkbox-container - The container that serves as a wrapper for the `input` and the `option` parts of the checkbox.\r\n * @part item__checkbox-input - The input element that implements the interactions for the checkbox.\r\n * @part item__checkbox-option - The actual \"input\" that is rendered above the `item__checkbox-input` part of the checkbox. This part has `position: absolute` and `pointer-events: none`.\r\n *\r\n * @part item__downloading - The spinner element that is rendered when the control is lazy loading its content. This element is rendered at the end of the `item__action` part.\r\n *\r\n * @part item__edit-caption - The input element that is rendered when the control is editing its caption. When rendered this element replaces the caption of the `item__action` part.\r\n *\r\n * @part item__expandable-button - The actionable expandable button element that is rendered when the control has subitems and the expandable button is interactive (`leaf !== true` and `expandableButton === \"action\"`). When rendered this element is placed at the start of the `item__action` part.\r\n *\r\n * @part item__group - The container element for the subitems of the control that is rendered when the content has been lazy loaded (`leaf !== true` and `lazyLoad !== true`).\r\n *\r\n * @part item__header - The container for all elements -excepts the subitems (`item__group` part)- of the control. It contains the `item__expandable-button`, `item_checkbox` and `item__action` parts.\r\n *\r\n * @part item__img - The img element that is rendered when the control has images (`startImgSrc` is defined and/or `endImgSrc` is defined).\r\n *\r\n * @part item__line - The element that is rendered to display the relationship between the control and its parent. Rendered if `level !== 0` and `showLines !== \"none\"`.\r\n *\r\n * @part disabled - Present in the `item__header`, `item__expandable-button`, `item__checkbox-input`, `item__checkbox-option` and `item__checkbox-container` parts when the control is disabled (`disabled` === `true`).\r\n *\r\n * @part expanded - Present in the `item__action`, `item__expandable-button` and `item__group` parts when the control is expanded (`expanded` === `true`).\r\n * @part collapsed - Present in the `item__action`, `item__expandable-button` and `item__group` parts when the control is collapsed (`expanded` !== `true`).\r\n *\r\n * @part expand-button - Present in the `item__header` part when the control has an expandable button (`level !== 0`, `leaf !== true` and `expandableButton !== \"no\"`).\r\n *\r\n * @part even-level - Present in the `item__group` and `item__header` parts when the control is in an even level (`level % 2 === 0`).\r\n * @part odd-level - Present in the `item__group` and `item__header` parts when the control is in an odd level (`level % 2 !== 0`).\r\n *\r\n * @part last-line - Present in the `item__line` part if the control is the last control of its parent item in `showLines = \"last\"` mode (`showLines === \"last\"`, `level !== 0` and `lastItem === true`).\r\n *\r\n * @part lazy-loaded - Present in the `item__group` part when the content of the control has been loaded (`leaf !== true`, `lazyLoad !== true` and `downloading !== true`).\r\n *\r\n * @part start-img - Present in the `item__img` part when the control has an start image element (`startImgSrc` is defined and `startImgType` === \"img\").\r\n * @part end-img - Present in the `item__img` part when the control has an end image element (`endImgSrc` is defined and `endImgType` === \"img\").\r\n *\r\n * @part editing - Present in the `item__header` and `item__action` parts when the control is in edit mode (`editable === true` and `editing === true`).\r\n * @part not-editing - Present in the `item__header` and `item__action` parts when the control isn't in edit mode (`editable !== true` or `editing !== true`).\r\n *\r\n * @part selected - Present in the `item__header` part when the control is selected (`selected` === `true`).\r\n * @part not-selected - Present in the `item__header` part when the control isn't selected (`selected` !== `true`).\r\n *\r\n * @part checked - Present in the `item__checkbox-input`, `item__checkbox-option` and `item__checkbox-container` parts when the control is checked and not indeterminate (`checked` === `true` and `indeterminate !== true`).\r\n * @part indeterminate - Present in the `item__checkbox-input`, `item__checkbox-option` and `item__checkbox-container` parts when the control is indeterminate (`indeterminate` === `true`).\r\n * @part unchecked - Present in the `item__checkbox-input`, `item__checkbox-option` and `item__checkbox-container` parts when the control is unchecked and not indeterminate (`checked` !== `true` and `indeterminate !== true`).\r\n *\r\n * @part drag-enter - Present in the `item__header` part when the control has `dragState === \"enter\"`.\r\n */\r\n@Component({\r\n  tag: \"ch-tree-view-item\",\r\n  styleUrl: \"tree-view-item.scss\",\r\n  shadow: true\r\n})\r\nexport class ChTreeViewItem {\r\n  #watcher: ResizeObserver;\r\n\r\n  /**\r\n   * Useful to ignore the checkbox change when it was committed from a children.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #ignoreCheckboxChange = false;\r\n\r\n  // Refs\r\n  #headerRef: HTMLButtonElement;\r\n  #inputRef: HTMLInputElement;\r\n\r\n  @Element() el: HTMLChTreeViewItemElement;\r\n\r\n  /**\r\n   * This attributes specifies the caption of the control\r\n   */\r\n  @Prop() readonly caption: string;\r\n\r\n  /**\r\n   * Set this attribute if you want display a checkbox in the control.\r\n   */\r\n  @Prop() readonly checkbox: boolean = false;\r\n\r\n  /**\r\n   * Set this attribute if you want the checkbox to be checked by default.\r\n   * Only works if `checkbox = true`\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) checked = false;\r\n  @Watch(\"checked\")\r\n  updateChildrenCheckedValue(newValue: boolean) {\r\n    if (!this.toggleCheckboxes || this.leaf || this.#ignoreCheckboxChange) {\r\n      this.#ignoreCheckboxChange = false;\r\n      return;\r\n    }\r\n\r\n    const treeItems = this.#getDirectTreeItems();\r\n\r\n    treeItems.forEach(treeItem => {\r\n      if (treeItem.checked !== newValue || treeItem.indeterminate !== false) {\r\n        treeItem.updateChecked(newValue, false);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set this attribute if you want to set a custom render for the control, by\r\n   * passing a slot.\r\n   */\r\n  @Prop() readonly customRender: boolean = false;\r\n\r\n  /**\r\n   * This attribute lets you specify if the element is disabled.\r\n   * If disabled, it will not fire any user interaction related event\r\n   * (for example, click event).\r\n   */\r\n  @Prop({ reflect: true }) readonly disabled: boolean = false;\r\n\r\n  /**\r\n   * This attribute lets you specify if the drag operation is disabled in the\r\n   * control. If `true`, the control can't be dragged.\r\n   */\r\n  @Prop() readonly dragDisabled: boolean = false;\r\n\r\n  /**\r\n   * This attribute lets you specify if the drop operation is disabled in the\r\n   * control. If `true`, the control won't accept any drops.\r\n   */\r\n  @Prop() readonly dropDisabled: boolean = false;\r\n\r\n  /**\r\n   * This property lets you define the current state of the item when it's\r\n   * being dragged.\r\n   */\r\n  @Prop({ mutable: true }) dragState: DragState = \"none\";\r\n\r\n  /**\r\n   * This attribute lets you specify when items are being lazy loaded in the\r\n   * control.\r\n   */\r\n  @Prop({ mutable: true }) downloading = false;\r\n\r\n  /**\r\n   * This attribute lets you specify if the edit operation is enabled in the\r\n   * control. If `true`, the control can edit its caption in place.\r\n   */\r\n  @Prop() readonly editable: boolean;\r\n\r\n  /**\r\n   * Set this attribute when the item is in edit mode\r\n   */\r\n  @Prop({ mutable: true }) editing = false;\r\n  @Watch(\"editing\")\r\n  editingChanged(isEditing: boolean) {\r\n    if (!isEditing) {\r\n      return;\r\n    }\r\n\r\n    document.addEventListener(\"click\", this.#removeEditModeOnClick, {\r\n      capture: true\r\n    });\r\n\r\n    // Wait until the input is rendered to focus it\r\n    writeTask(() => {\r\n      requestAnimationFrame(() => {\r\n        if (this.#inputRef) {\r\n          this.#inputRef.focus();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Specifies the src of the end image.\r\n   */\r\n  @Prop() readonly endImgSrc: string;\r\n\r\n  /**\r\n   * Specifies how the end image will be rendered.\r\n   */\r\n  @Prop() readonly endImgType: ImageRender = \"background\";\r\n\r\n  /**\r\n   * Specifies what kind of expandable button is displayed.\r\n   * Only works if `leaf === false`.\r\n   *  - `\"expandableButton\"`: Expandable button that allows to expand/collapse\r\n   *     the items of the control.\r\n   *  - `\"decorative\"`: Only a decorative icon is rendered to display the state\r\n   *     of the item.\r\n   */\r\n  @Prop() readonly expandableButton: \"action\" | \"decorative\" | \"no\" =\r\n    \"decorative\";\r\n\r\n  /**\r\n   * `true` to expand the control on click interaction. If `false`, with mouse\r\n   * interaction the control will only be expanded on double click.\r\n   */\r\n  @Prop() readonly expandOnClick: boolean = true;\r\n\r\n  /**\r\n   * If the item has a sub-tree, this attribute determines if the subtree is\r\n   * displayed.\r\n   */\r\n  @Prop({ mutable: true }) expanded = false;\r\n  @Watch(\"expanded\")\r\n  expandedChanged(isExpanded: boolean) {\r\n    // Wait until all properties are updated before lazy loading. Otherwise, the\r\n    // lazyLoad property could be updated just after the executing of the function\r\n    setTimeout(() => {\r\n      this.#lazyLoadItems(isExpanded);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This attribute specifies if the control is the last items in its subtree\r\n   */\r\n  @Prop() readonly lastItem: boolean = false;\r\n  @Watch(\"lastItem\")\r\n  lastItemChanged(isLastItem: boolean) {\r\n    if (isLastItem && this.showLines) {\r\n      // Use RAF to set the observer after the render method has completed\r\n      requestAnimationFrame(() => {\r\n        this.#setResizeObserver();\r\n      });\r\n    } else {\r\n      this.#disconnectObserver();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine if the items are lazy loaded when opening the first time the\r\n   * control.\r\n   */\r\n  @Prop({ mutable: true }) lazyLoad = false;\r\n\r\n  /**\r\n   * The presence of this attribute determine whether the item contains a\r\n   * subtree. `true` if the item does not have a subtree.\r\n   */\r\n  @Prop() readonly leaf: boolean = false;\r\n\r\n  /**\r\n   * Level in the tree at which the item is placed.\r\n   */\r\n  @Prop() readonly level: number = INITIAL_LEVEL;\r\n\r\n  /**\r\n   * `true` if the checkbox's value is indeterminate.\r\n   */\r\n  @Prop({ mutable: true }) indeterminate = false;\r\n\r\n  /**\r\n   * This attribute represents additional info for the control that is included\r\n   * when dragging the item.\r\n   */\r\n  @Prop() readonly metadata: string;\r\n\r\n  /**\r\n   * Specifies a set of parts to use in every DOM element of the control.\r\n   */\r\n  @Prop() readonly parts?: string;\r\n  @Watch(\"parts\")\r\n  partsChanged(newParts: string) {\r\n    this.#setExportParts(newParts);\r\n  }\r\n\r\n  /**\r\n   * This attribute lets you specify if the item is selected\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) selected = false;\r\n\r\n  /**\r\n   * `true` to show the downloading spinner when lazy loading the sub items of\r\n   * the control.\r\n   */\r\n  @Prop() readonly showDownloadingSpinner: boolean = true;\r\n\r\n  /**\r\n   * `true` to display the relation between tree items and tree lists using\r\n   * lines.\r\n   */\r\n  @Prop() readonly showLines: TreeViewLines = \"none\";\r\n  @Watch(\"showLines\")\r\n  showLinesChanged(newShowLines: TreeViewLines) {\r\n    if (newShowLines && this.lastItem) {\r\n      this.#setResizeObserver();\r\n    } else {\r\n      this.#disconnectObserver();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Specifies the src of the start image.\r\n   */\r\n  @Prop() readonly startImgSrc: string;\r\n\r\n  /**\r\n   * Specifies how the start image will be rendered.\r\n   */\r\n  @Prop() readonly startImgType: ImageRender = \"background\";\r\n\r\n  /**\r\n   * Set this attribute if you want all the children item's checkboxes to be\r\n   * checked when the parent item checkbox is checked, or to be unchecked when\r\n   * the parent item checkbox is unchecked.\r\n   */\r\n  @Prop() readonly toggleCheckboxes: boolean = false;\r\n  @Watch(\"toggleCheckboxes\")\r\n  handleToggleCheckboxesChange(newToggleCheckboxesValue: boolean) {\r\n    if (newToggleCheckboxesValue) {\r\n      this.el.addEventListener(\r\n        \"checkboxChange\",\r\n        this.#handleCheckBoxChangeInItems\r\n      );\r\n    } else {\r\n      this.el.removeEventListener(\r\n        \"checkboxChange\",\r\n        this.#handleCheckBoxChangeInItems\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired when the checkbox value of the control is changed.\r\n   */\r\n  @Event() checkboxChange: EventEmitter<TreeViewItemCheckedInfo>;\r\n\r\n  /**\r\n   * Fired when the checkbox value of the control is changed. This event only\r\n   * applies when the control has `toggleCheckboxes = true`\r\n   */\r\n  @Event() checkboxToggleChange: EventEmitter<TreeViewItemCheckedInfo>;\r\n\r\n  /**\r\n   * Fired when the item is being dragged.\r\n   */\r\n  @Event() itemDragStart: EventEmitter<TreeViewItemDragStartInfo>;\r\n\r\n  /**\r\n   * Fired when the item is no longer being dragged.\r\n   */\r\n  @Event() itemDragEnd: EventEmitter;\r\n\r\n  /**\r\n   * Fired when the lazy control is expanded an its content must be loaded.\r\n   */\r\n  @Event() loadLazyContent: EventEmitter<string>;\r\n\r\n  /**\r\n   * Fired when the item is asking to modify its caption.\r\n   */\r\n  @Event() modifyCaption: EventEmitter<TreeViewItemNewCaption>;\r\n\r\n  /**\r\n   * Fired when the user interacts with the control in a way that its reference\r\n   * must be opened.\r\n   */\r\n  @Event() openReference: EventEmitter<TreeViewItemOpenReferenceInfo>;\r\n\r\n  /**\r\n   * Fired when the selected state is updated by user interaction on the\r\n   * control.\r\n   */\r\n  @Event() selectedItemChange: EventEmitter<TreeViewItemSelected>;\r\n\r\n  /**\r\n   * Focus the next item in the tree. If the control is expanded, it focuses\r\n   * the first subitem in its tree.\r\n   */\r\n  @Method()\r\n  async focusNextItem(ctrlKeyPressed: boolean) {\r\n    // Focus the first subitem if expanded\r\n    if (!this.leaf && this.expanded) {\r\n      const subItem = this.el.querySelector(\r\n        FIRST_ENABLED_SUB_ITEM\r\n      ) as HTMLChTreeViewItemElement;\r\n\r\n      // The tree item could be empty or downloading subitem, so it is uncertain\r\n      // if the query won't fail\r\n      if (subItem) {\r\n        subItem.setFocus(ctrlKeyPressed);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Otherwise, focus the next sibling\r\n    this.focusNextSibling(ctrlKeyPressed);\r\n  }\r\n\r\n  /**\r\n   * Focus the next sibling item in the tree.\r\n   */\r\n  @Method()\r\n  async focusNextSibling(ctrlKeyPressed: boolean) {\r\n    const nextSiblingItem = this.el\r\n      .nextElementSibling as HTMLChTreeViewItemElement;\r\n\r\n    // Focus the next sibling, if exists\r\n    if (nextSiblingItem) {\r\n      // If the next sibling is disabled, ask for its next sibling\r\n      if (nextSiblingItem.disabled) {\r\n        nextSiblingItem.focusNextItem(ctrlKeyPressed);\r\n      } else {\r\n        nextSiblingItem.setFocus(ctrlKeyPressed);\r\n      }\r\n      return;\r\n    }\r\n\r\n    // The item is the last one of the tree at the first level\r\n    if (this.level === INITIAL_LEVEL) {\r\n      return;\r\n    }\r\n\r\n    // Otherwise, ask the parent to focus the next sibling\r\n    const parentItem = this.el.parentElement as HTMLChTreeViewItemElement;\r\n    parentItem.focusNextSibling(ctrlKeyPressed);\r\n  }\r\n\r\n  /**\r\n   * Focus the previous item in the tree. If the previous item is expanded, it focuses\r\n   * the last subitem in its tree.\r\n   */\r\n  @Method()\r\n  async focusPreviousItem(ctrlKeyPressed: boolean) {\r\n    const previousSiblingItem = this.el\r\n      .previousElementSibling as HTMLChTreeViewItemElement;\r\n\r\n    // Focus last item of the previous sibling\r\n    if (previousSiblingItem) {\r\n      previousSiblingItem.focusLastItem(ctrlKeyPressed);\r\n      return;\r\n    }\r\n\r\n    // The item is the first one of the tree at the first level\r\n    if (this.level === INITIAL_LEVEL) {\r\n      return;\r\n    }\r\n\r\n    // Otherwise, set focus in the parent element\r\n    const parentItem = this.el.parentElement as HTMLChTreeViewItemElement;\r\n\r\n    // Check if the parent is not disabled\r\n    if (parentItem.disabled) {\r\n      parentItem.focusPreviousItem(ctrlKeyPressed);\r\n      return;\r\n    }\r\n\r\n    parentItem.setFocus(ctrlKeyPressed);\r\n  }\r\n\r\n  /**\r\n   * Focus the last item in its subtree. If the control is not expanded, it\r\n   * focus the control.\r\n   */\r\n  @Method()\r\n  async focusLastItem(ctrlKeyPressed: boolean) {\r\n    // Focus the last subitem if expanded and not lazy loading\r\n    if (!this.leaf && this.expanded) {\r\n      const lastSubItem = this.el.querySelector(\r\n        LAST_SUB_ITEM\r\n      ) as HTMLChTreeViewItemElement;\r\n\r\n      // The tree item could be empty or downloading subitem, so it is uncertain\r\n      // if the query won't fail\r\n      if (lastSubItem) {\r\n        lastSubItem.focusLastItem(ctrlKeyPressed);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // If the last item is disabled, try to focus the previous sibling\r\n    if (this.disabled) {\r\n      this.focusPreviousItem(ctrlKeyPressed);\r\n      return;\r\n    }\r\n\r\n    // Otherwise, it focuses the control\r\n    this.setFocus(ctrlKeyPressed);\r\n  }\r\n\r\n  /**\r\n   * Set focus in the control.\r\n   */\r\n  @Method()\r\n  async setFocus(ctrlKeyPressed: boolean) {\r\n    this.#headerRef.focus();\r\n\r\n    // Normal navigation auto selects the item.\r\n    if (!ctrlKeyPressed) {\r\n      this.#setSelected();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update `checked` and `indeterminate` properties.\r\n   */\r\n  @Method()\r\n  async updateChecked(newChecked: boolean, newIndeterminate: boolean) {\r\n    this.checked = newChecked;\r\n    this.indeterminate = newIndeterminate;\r\n\r\n    // Emit the event to sync with the UI model, even if the item does not\r\n    // have toggleCheckboxes property\r\n    this.checkboxToggleChange.emit({\r\n      id: this.el.id,\r\n      checked: newChecked,\r\n      indeterminate: newIndeterminate\r\n    });\r\n  }\r\n\r\n  #getDirectTreeItems = (): HTMLChTreeViewItemElement[] =>\r\n    Array.from(\r\n      this.el.querySelectorAll(DIRECT_TREE_ITEM_CHILDREN)\r\n    ) as HTMLChTreeViewItemElement[];\r\n\r\n  #setResizeObserver = () => {\r\n    this.#watcher = new ResizeObserver(() => {\r\n      const distanceToCheckbox =\r\n        this.el.getBoundingClientRect().height -\r\n        this.#headerRef.getBoundingClientRect().height / 2;\r\n\r\n      this.el.style.setProperty(\r\n        DISTANCE_TO_CHECKBOX_CUSTOM_VAR,\r\n        distanceToCheckbox + \"px\"\r\n      );\r\n    });\r\n\r\n    this.#watcher.observe(this.el);\r\n    this.#watcher.observe(this.#headerRef);\r\n  };\r\n\r\n  #disconnectObserver = () => {\r\n    if (!this.#watcher) {\r\n      return;\r\n    }\r\n    this.#watcher.disconnect();\r\n    this.#watcher = null;\r\n  };\r\n\r\n  #checkIfShouldRemoveEditMode = (event: KeyboardEvent) => {\r\n    event.stopPropagation();\r\n\r\n    if (event.code !== ENTER_KEY && event.code !== ESCAPE_KEY) {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n    const commitEdition = event.code === ENTER_KEY;\r\n    this.#removeEditMode(true, commitEdition)();\r\n  };\r\n\r\n  #removeEditModeOnClick = (event: PointerEvent) => {\r\n    // The click is executed outside the input and the pointer type is defined,\r\n    // meaning that the button click was not triggered by the Enter or Space keys\r\n    if (!event.composedPath().includes(this.#inputRef) && event.pointerType) {\r\n      this.#removeEditMode(false)();\r\n    }\r\n  };\r\n\r\n  #removeEditMode =\r\n    (shouldFocusHeader: boolean, commitEdition = false) =>\r\n    () => {\r\n      // When pressing the enter key in the input, the removeEditMode event is\r\n      // triggered twice (due to the headerRef.focus() triggering the onBlur\r\n      // event in the input), so we need to check if the edit mode was disabled\r\n      if (!this.editing) {\r\n        return;\r\n      }\r\n      this.editing = false;\r\n\r\n      document.removeEventListener(\"click\", this.#removeEditModeOnClick, {\r\n        capture: true\r\n      });\r\n\r\n      const newCaption = this.#inputRef.value;\r\n\r\n      if (commitEdition && newCaption.trim() !== \"\") {\r\n        this.modifyCaption.emit({\r\n          id: this.el.id,\r\n          caption: newCaption\r\n        });\r\n      }\r\n\r\n      if (shouldFocusHeader) {\r\n        this.#headerRef.focus();\r\n      }\r\n    };\r\n\r\n  #toggleExpand = (event: MouseEvent) => {\r\n    event.stopPropagation();\r\n\r\n    if (!this.leaf) {\r\n      this.expanded = !this.expanded;\r\n    }\r\n\r\n    this.selected = true;\r\n    this.selectedItemChange.emit(\r\n      this.#getSelectedInfo(mouseEventModifierKey(event), true)\r\n    );\r\n  };\r\n\r\n  #lazyLoadItems = (expanded: boolean) => {\r\n    if (!this.lazyLoad || !expanded) {\r\n      return;\r\n    }\r\n\r\n    // Load items\r\n    this.lazyLoad = false;\r\n    this.downloading = true;\r\n\r\n    this.loadLazyContent.emit(this.el.id);\r\n  };\r\n\r\n  #toggleSelected = () => {\r\n    const selected = !this.selected;\r\n    this.selected = selected;\r\n\r\n    this.selectedItemChange.emit(this.#getSelectedInfo(true, selected));\r\n  };\r\n\r\n  #setSelected = () => {\r\n    this.selected = true;\r\n    this.selectedItemChange.emit(this.#getSelectedInfo(false, true));\r\n  };\r\n\r\n  #toggleOrSelect = (event: MouseEvent) => {\r\n    // Ctrl key\r\n    if (mouseEventModifierKey(event)) {\r\n      this.#toggleSelected();\r\n      return;\r\n    }\r\n\r\n    // Double click was triggered, don't update the selection or expand\r\n    if (event.detail >= 2) {\r\n      return;\r\n    }\r\n\r\n    // Expand on click interaction\r\n    if (this.expandOnClick) {\r\n      this.#toggleExpand(event);\r\n    }\r\n    // Click only selects the item\r\n    else {\r\n      this.#setSelected();\r\n    }\r\n  };\r\n\r\n  #getSelectedInfo = (\r\n    ctrlKeyPressed: boolean,\r\n    selected: boolean\r\n  ): TreeViewItemSelected => ({\r\n    ctrlKeyPressed: ctrlKeyPressed,\r\n    expanded: this.expanded,\r\n    id: this.el.id,\r\n    metadata: this.metadata,\r\n    parentId: this.el.parentElement?.id, // TODO: Improve this\r\n    selected: selected\r\n  });\r\n\r\n  #handleActionDblClick = (event: PointerEvent) => {\r\n    event.stopPropagation();\r\n\r\n    if (mouseEventModifierKey(event)) {\r\n      this.#toggleSelected();\r\n      return;\r\n    }\r\n\r\n    this.#emitOpenReference();\r\n\r\n    // The Control key is not pressed, so the control can be expanded if double\r\n    // click expands the item\r\n    if (!this.leaf && !this.expandOnClick) {\r\n      this.#toggleExpand(event);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Event triggered by the following actions on the main button:\r\n   *   - Click\r\n   *   - Enter keydown\r\n   *   - Space keydown and keyup\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #handleActionClick = (event: PointerEvent) => {\r\n    event.stopPropagation();\r\n\r\n    // Don't perform actions when editing\r\n    if (this.editing) {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n\r\n    // Click event\r\n    if (event.pointerType) {\r\n      this.#toggleOrSelect(event);\r\n      return;\r\n    }\r\n\r\n    // The action was provoked by the keyboard, emit openReference event\r\n    this.#emitOpenReference();\r\n\r\n    // Enter or space\r\n    this.#toggleExpand(event);\r\n  };\r\n\r\n  /**\r\n   * Event triggered by key events on the main button.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #handleActionKeyDown = (event: KeyboardEvent) => {\r\n    // Only toggle if the Enter key was pressed with the Ctrl key\r\n    if (mouseEventModifierKey(event) && event.code === ENTER_KEY) {\r\n      event.stopPropagation();\r\n      this.#toggleSelected();\r\n    }\r\n  };\r\n\r\n  #emitOpenReference = () => {\r\n    this.openReference.emit({\r\n      id: this.el.id,\r\n      leaf: this.leaf,\r\n      metadata: this.metadata\r\n    });\r\n  };\r\n\r\n  #handleCheckedChange = (event: ChCheckboxCustomEvent<any> & InputEvent) => {\r\n    event.stopPropagation();\r\n    const chCheckboxRef = event.target;\r\n\r\n    const checked = chCheckboxRef.checkedValue === chCheckboxRef.value;\r\n    this.checked = checked;\r\n    this.indeterminate = false; // Changing the checked value makes it no longer indeterminate\r\n\r\n    this.checkboxChange.emit({\r\n      id: this.el.id,\r\n      checked: this.checked,\r\n      indeterminate: false\r\n    });\r\n  };\r\n\r\n  #handleCheckBoxChangeInItems = (\r\n    event: ChTreeViewItemCustomEvent<TreeViewItemCheckedInfo>\r\n  ) => {\r\n    // No need to update the checkbox value based on the children checkbox\r\n    if (this.el === event.target) {\r\n      return;\r\n    }\r\n\r\n    const updatedCheck = event.detail.checked;\r\n    const treeItems = this.#getDirectTreeItems();\r\n\r\n    // Check if all the items have the same value as the updated item\r\n    const allItemsHaveTheSameCheckedValue = treeItems.every(\r\n      treeItem => treeItem.checked === updatedCheck\r\n    );\r\n\r\n    const eventMustBeEmitted =\r\n      this.checked !== updatedCheck ||\r\n      this.indeterminate !== !allItemsHaveTheSameCheckedValue;\r\n\r\n    this.#ignoreCheckboxChange = this.checked !== updatedCheck;\r\n    this.checked = updatedCheck;\r\n    this.indeterminate = !allItemsHaveTheSameCheckedValue;\r\n\r\n    // Sync with the UI Model\r\n    if (eventMustBeEmitted) {\r\n      this.checkboxToggleChange.emit({\r\n        id: this.el.id,\r\n        checked: updatedCheck,\r\n        indeterminate: !allItemsHaveTheSameCheckedValue\r\n      });\r\n    }\r\n  };\r\n\r\n  #renderImg = (cssClass: string, src: string, imageType: ImageRender) =>\r\n    imageType === \"img\" &&\r\n    src && (\r\n      <img\r\n        aria-hidden=\"true\"\r\n        class={cssClass}\r\n        part={cssClass}\r\n        alt=\"\"\r\n        src={src}\r\n        loading=\"lazy\"\r\n      />\r\n    );\r\n\r\n  #handleDragStart = (event: DragEvent) => {\r\n    // Disallow drag when editing the caption\r\n    if (this.editing) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      return;\r\n    }\r\n\r\n    removeDragImage(event);\r\n    event.dataTransfer.effectAllowed = \"move\";\r\n\r\n    this.dragState = \"start\";\r\n    this.itemDragStart.emit({\r\n      elem: this.el,\r\n      dragEvent: event\r\n    });\r\n  };\r\n\r\n  #handleDragEnd = () => {\r\n    // event.preventDefault();\r\n\r\n    // this.el.style.cursor = null;\r\n    this.dragState = \"none\";\r\n    this.itemDragEnd.emit();\r\n  };\r\n\r\n  #setExportParts = (exportparts: string | undefined) => {\r\n    if (exportparts) {\r\n      this.el.setAttribute(\r\n        \"exportparts\",\r\n        // Replace sequential empty characters with a comma\r\n        `${TREE_VIEW_ITEM_EXPORT_PARTS},${exportparts.replace(/\\s+/g, \",\")}`\r\n      );\r\n    } else {\r\n      this.el.setAttribute(\"exportparts\", TREE_VIEW_ITEM_EXPORT_PARTS);\r\n    }\r\n  };\r\n\r\n  connectedCallback() {\r\n    if (this.toggleCheckboxes) {\r\n      this.el.addEventListener(\r\n        \"checkboxChange\",\r\n        this.#handleCheckBoxChangeInItems\r\n      );\r\n    }\r\n\r\n    // Static attributes that we including in the Host functional component to\r\n    // eliminate additional overhead\r\n    this.el.setAttribute(\"role\", \"treeitem\");\r\n    this.el.setAttribute(\"aria-level\", `${this.level + 1}`);\r\n    this.el.style.setProperty(\"--level\", `${this.level}`);\r\n    this.#setExportParts(this.parts);\r\n  }\r\n\r\n  componentWillLoad() {\r\n    // Check if must lazy load\r\n    this.#lazyLoadItems(this.expanded);\r\n  }\r\n\r\n  componentDidLoad() {\r\n    if (this.lastItem && this.showLines) {\r\n      this.#setResizeObserver();\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    // If it was disconnected on edit mode, remove the body event handler\r\n    if (this.editing) {\r\n      this.#removeEditMode(false);\r\n    }\r\n\r\n    this.#disconnectObserver();\r\n\r\n    this.el.removeEventListener(\r\n      \"checkboxChange\",\r\n      this.#handleCheckBoxChangeInItems\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const evenLevel = this.level % 2 === 0;\r\n\r\n    const hasContent = !this.leaf && !this.lazyLoad;\r\n\r\n    const canShowLines = this.level !== INITIAL_LEVEL;\r\n    const showAllLines = this.showLines === \"all\" && canShowLines;\r\n    const showLastLine =\r\n      this.showLines === \"last\" && canShowLines && this.lastItem;\r\n\r\n    const levelPart = getTreeItemLevelPart(evenLevel);\r\n    const expandedPart = getTreeItemExpandedPart(this.expanded);\r\n\r\n    const pseudoStartImage = isPseudoElementImg(\r\n      this.startImgSrc,\r\n      this.startImgType\r\n    );\r\n    const pseudoEndImage = isPseudoElementImg(this.endImgSrc, this.endImgType);\r\n\r\n    const hasParts = !!this.parts;\r\n\r\n    return (\r\n      <Host\r\n        aria-selected={this.selected ? \"true\" : null}\r\n        class={this.leaf ? DENY_DROP_CLASS : null}\r\n        part={tokenMap({\r\n          [TREE_VIEW_PARTS_DICTIONARY.ITEM]: true,\r\n          [TREE_VIEW_PARTS_DICTIONARY.DRAG_ENTER]: this.dragState === \"enter\",\r\n          [this.parts]: hasParts\r\n        })}\r\n      >\r\n        <button\r\n          aria-controls={hasContent ? EXPANDABLE_ID : null}\r\n          aria-expanded={hasContent ? this.expanded.toString() : null}\r\n          class={{\r\n            header: true,\r\n            \"header--selected\": this.selected,\r\n            \"header--disabled\": this.disabled,\r\n\r\n            \"expandable-button-decorative\":\r\n              !this.leaf && this.expandableButton === \"decorative\",\r\n            \"expandable-button-decorative--collapsed\":\r\n              !this.leaf &&\r\n              this.expandableButton === \"decorative\" &&\r\n              !this.expanded\r\n          }}\r\n          part={tokenMap({\r\n            [TREE_VIEW_ITEM_PARTS_DICTIONARY.HEADER]: true,\r\n            [TREE_VIEW_ITEM_PARTS_DICTIONARY.DISABLED]: this.disabled,\r\n            [TREE_VIEW_ITEM_PARTS_DICTIONARY.DRAG_ENTER]:\r\n              this.dragState === \"enter\",\r\n            [TREE_VIEW_ITEM_PARTS_DICTIONARY.SELECTED]: this.selected,\r\n            [TREE_VIEW_ITEM_PARTS_DICTIONARY.NOT_SELECTED]: !this.selected,\r\n            [TREE_VIEW_ITEM_PARTS_DICTIONARY.EXPAND_BUTTON]:\r\n              canShowLines && !this.leaf && this.expandableButton !== \"no\",\r\n            [this.editing\r\n              ? TREE_VIEW_ITEM_PARTS_DICTIONARY.EDITING\r\n              : TREE_VIEW_ITEM_PARTS_DICTIONARY.NOT_EDITING]: true,\r\n            [levelPart]: canShowLines,\r\n            [this.parts]: hasParts\r\n          })}\r\n          type=\"button\"\r\n          disabled={this.disabled}\r\n          onClick={this.#handleActionClick}\r\n          onKeyDown={!this.editing ? this.#handleActionKeyDown : null}\r\n          // Drag and drop\r\n          draggable={!this.dragDisabled}\r\n          onDragStart={this.#handleDragStart}\r\n          onDragEnd={\r\n            !this.dragDisabled && this.dragState === \"start\"\r\n              ? this.#handleDragEnd\r\n              : null\r\n          }\r\n          ref={el => (this.#headerRef = el)}\r\n        >\r\n          {!this.leaf && this.expandableButton === \"action\" && (\r\n            <button\r\n              key=\"expandable-button\"\r\n              type=\"button\"\r\n              class={{\r\n                \"expandable-button\": true,\r\n                \"expandable-button--expanded\": this.expanded,\r\n                \"expandable-button--collapsed\": !this.expanded\r\n              }}\r\n              part={tokenMap({\r\n                [TREE_VIEW_ITEM_PARTS_DICTIONARY.EXPANDABLE_BUTTON]: true,\r\n                [TREE_VIEW_ITEM_PARTS_DICTIONARY.DISABLED]: this.disabled,\r\n                [expandedPart]: true,\r\n                [this.parts]: hasParts\r\n              })}\r\n              disabled={this.disabled}\r\n              onClick={this.#toggleExpand}\r\n            ></button>\r\n          )}\r\n\r\n          {this.checkbox && (\r\n            <ch-checkbox\r\n              key=\"checkbox\"\r\n              accessibleName={this.caption}\r\n              class=\"checkbox\"\r\n              exportparts={TREE_VIEW_ITEM_CHECKBOX_EXPORT_PARTS}\r\n              part={\r\n                hasParts\r\n                  ? `${TREE_VIEW_ITEM_PARTS_DICTIONARY.CHECKBOX} ${this.parts}`\r\n                  : TREE_VIEW_ITEM_PARTS_DICTIONARY.CHECKBOX\r\n              }\r\n              checkedValue=\"true\"\r\n              disabled={this.disabled}\r\n              indeterminate={this.indeterminate}\r\n              unCheckedValue=\"false\"\r\n              value={`${this.checked}`}\r\n              onInput={this.#handleCheckedChange}\r\n            ></ch-checkbox>\r\n          )}\r\n\r\n          {this.customRender ? (\r\n            <slot name=\"custom-content\" />\r\n          ) : (\r\n            [\r\n              <div\r\n                class={{\r\n                  action: true,\r\n                  \"action--end-img\": !!this.endImgSrc,\r\n\r\n                  [`start-img-type--${this.startImgType} pseudo-img--start`]:\r\n                    pseudoStartImage,\r\n                  [`end-img-type--${this.endImgType} pseudo-img--end`]:\r\n                    pseudoEndImage\r\n                }}\r\n                part={tokenMap({\r\n                  [TREE_VIEW_ITEM_PARTS_DICTIONARY.ACTION]: true,\r\n                  [this.editing\r\n                    ? TREE_VIEW_ITEM_PARTS_DICTIONARY.EDITING\r\n                    : TREE_VIEW_ITEM_PARTS_DICTIONARY.NOT_EDITING]: true,\r\n                  [expandedPart]: !this.leaf,\r\n                  [this.parts]: hasParts\r\n                })}\r\n                style={{\r\n                  \"--ch-start-img\": pseudoStartImage\r\n                    ? `url(\"${this.startImgSrc}\")`\r\n                    : null,\r\n                  \"--ch-end-img\": pseudoEndImage\r\n                    ? `url(\"${this.endImgSrc}\")`\r\n                    : null\r\n                }}\r\n                onDblClick={!this.editing ? this.#handleActionDblClick : null}\r\n              >\r\n                {this.#renderImg(\r\n                  hasParts\r\n                    ? `${START_IMAGE_PARTS} ${this.parts}`\r\n                    : START_IMAGE_PARTS,\r\n                  this.startImgSrc,\r\n                  this.startImgType\r\n                )}\r\n\r\n                {this.editable && this.editing ? (\r\n                  <input\r\n                    key=\"edit-caption\"\r\n                    class=\"edit-caption\"\r\n                    part={\r\n                      hasParts\r\n                        ? `${TREE_VIEW_ITEM_PARTS_DICTIONARY.EDIT_CAPTION} ${this.parts}`\r\n                        : TREE_VIEW_ITEM_PARTS_DICTIONARY.EDIT_CAPTION\r\n                    }\r\n                    disabled={this.disabled}\r\n                    type=\"text\"\r\n                    value={this.caption}\r\n                    onBlur={this.#removeEditMode(false)}\r\n                    onKeyDown={this.#checkIfShouldRemoveEditMode}\r\n                    ref={el => (this.#inputRef = el)}\r\n                  />\r\n                ) : (\r\n                  this.caption\r\n                )}\r\n\r\n                {this.#renderImg(\r\n                  hasParts\r\n                    ? `${END_IMAGE_PARTS} ${this.parts}`\r\n                    : END_IMAGE_PARTS,\r\n                  this.endImgSrc,\r\n                  this.endImgType\r\n                )}\r\n              </div>,\r\n\r\n              this.showDownloadingSpinner && !this.leaf && this.downloading && (\r\n                <div\r\n                  class=\"downloading\"\r\n                  part={\r\n                    hasParts\r\n                      ? `${TREE_VIEW_ITEM_PARTS_DICTIONARY.DOWNLOADING} ${this.parts}`\r\n                      : TREE_VIEW_ITEM_PARTS_DICTIONARY.DOWNLOADING\r\n                  }\r\n                ></div>\r\n              )\r\n            ]\r\n          )}\r\n\r\n          {(showAllLines || showLastLine) && (\r\n            <div\r\n              key=\"line\"\r\n              class={{\r\n                line: true,\r\n                \"last-all-line\": showAllLines && this.lastItem,\r\n                \"last-line\": showLastLine\r\n              }}\r\n              part={tokenMap({\r\n                [TREE_VIEW_ITEM_PARTS_DICTIONARY.LINE]: true,\r\n                [TREE_VIEW_ITEM_PARTS_DICTIONARY.LAST_LINE]: this.lastItem,\r\n                [this.parts]: hasParts\r\n              })}\r\n            ></div>\r\n          )}\r\n        </button>\r\n\r\n        {hasContent && (\r\n          <div\r\n            role=\"group\"\r\n            aria-busy={(!!this.downloading).toString()}\r\n            aria-live={this.downloading ? \"polite\" : null}\r\n            id={EXPANDABLE_ID}\r\n            class={{\r\n              expandable: true,\r\n              \"expandable--collapsed\": !this.expanded,\r\n              \"expandable--lazy-loaded\": !this.downloading,\r\n\r\n              \"expandable--even\": canShowLines && evenLevel,\r\n              \"expandable--odd\": canShowLines && !evenLevel\r\n            }}\r\n            part={tokenMap({\r\n              [TREE_VIEW_ITEM_PARTS_DICTIONARY.GROUP]: true,\r\n              [TREE_VIEW_ITEM_PARTS_DICTIONARY.LAZY_LOADED]: !this.downloading,\r\n              [expandedPart]: true,\r\n              [levelPart]: canShowLines,\r\n              [this.parts]: hasParts\r\n            })}\r\n          >\r\n            <slot />\r\n          </div>\r\n        )}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","import {\r\n  TreeViewFilterInfo,\r\n  TreeViewFilterOptions,\r\n  TreeViewFilterType,\r\n  TreeViewItemModel\r\n} from \"./types\";\r\n\r\nexport const itemHasCheckbox = (\r\n  item: TreeViewItemModel,\r\n  defaultCheckbox: boolean\r\n) => item.checkbox ?? defaultCheckbox;\r\n\r\nconst filterWithCase = (\r\n  stringToFilter: string,\r\n  filter: string,\r\n  matchCase?: boolean\r\n) =>\r\n  matchCase\r\n    ? stringToFilter.includes(filter)\r\n    : stringToFilter.toLowerCase().includes(filter.toLowerCase());\r\n\r\nconst filterWithString = (\r\n  stringToFilter: string,\r\n  filter: string,\r\n  filterOptions: TreeViewFilterOptions\r\n) =>\r\n  filterOptions?.regularExpression\r\n    ? stringToFilter.match(filter) !== null\r\n    : filterWithCase(stringToFilter, filter, filterOptions?.matchCase);\r\n\r\nconst filterDictionary: {\r\n  [key in TreeViewFilterType]: (\r\n    item: TreeViewItemModel,\r\n    filterInfo: TreeViewFilterInfo\r\n  ) => boolean;\r\n} = {\r\n  caption: (item, filterInfo) =>\r\n    filterInfo.filter\r\n      ? filterWithString(\r\n          item.caption ?? \"\",\r\n          filterInfo.filter,\r\n          filterInfo.filterOptions\r\n        )\r\n      : true,\r\n\r\n  checked: (item, filterInfo) =>\r\n    itemHasCheckbox(item, filterInfo.defaultCheckbox) &&\r\n    !item.indeterminate &&\r\n    (item.checked ?? filterInfo.defaultChecked),\r\n\r\n  list: (item, filterInfo) => filterInfo.filterSet.has(item.id),\r\n\r\n  metadata: (item, filterInfo) =>\r\n    filterInfo.filter\r\n      ? filterWithString(\r\n          item.metadata ?? \"\",\r\n          filterInfo.filter,\r\n          filterInfo.filterOptions\r\n        )\r\n      : true,\r\n\r\n  none: () => true,\r\n\r\n  unchecked: (item, filterInfo) =>\r\n    itemHasCheckbox(item, filterInfo.defaultCheckbox) &&\r\n    !item.indeterminate &&\r\n    !(item.checked ?? filterInfo.defaultChecked)\r\n};\r\n\r\nexport const computeFilter = (\r\n  filterType: TreeViewFilterType,\r\n  item: TreeViewItemModel,\r\n  filterInfo: TreeViewFilterInfo\r\n): boolean =>\r\n  filterInfo.filterOptions?.hideMatchesAndShowNonMatches === true\r\n    ? !filterDictionary[filterType](item, filterInfo)\r\n    : filterDictionary[filterType](item, filterInfo);\r\n\r\nexport type TreeViewItemSimplifiedModel = {\r\n  id: string;\r\n  items: TreeViewItemSimplifiedModel[];\r\n};\r\n\r\nexport function simplifyModel(\r\n  model: TreeViewItemModel\r\n): TreeViewItemSimplifiedModel[] {\r\n  const items = model.items;\r\n\r\n  if (!items) {\r\n    return [];\r\n  }\r\n\r\n  const simplifiedModel: TreeViewItemSimplifiedModel[] = items.map(item => ({\r\n    id: item.id,\r\n    items: simplifyModel(item)\r\n  }));\r\n\r\n  return simplifiedModel;\r\n}\r\n\r\nexport const prettyPrint = (value: any) => JSON.stringify(value, undefined, 2);\r\n","import {\r\n  LazyLoadTreeItemsCallback,\r\n  TreeViewItemModel,\r\n  TreeViewItemModelExtended\r\n} from \"./types\";\r\n\r\nexport const reloadItems = async (\r\n  elementRef: HTMLChTreeViewRenderElement,\r\n  itemId: string,\r\n  flattenedTreeModel: Map<string, TreeViewItemModelExtended>,\r\n  lazyLoadTreeItemsCallback: LazyLoadTreeItemsCallback,\r\n  loadLazyContent: (\r\n    itemId: string,\r\n    items?: TreeViewItemModel[]\r\n  ) => Promise<void>,\r\n  removeItems: (items: string[]) => void,\r\n  beforeProperties?: Partial<TreeViewItemModel>,\r\n  afterProperties?: Partial<TreeViewItemModel>\r\n): Promise<boolean> => {\r\n  const itemToReloadUIModel = flattenedTreeModel.get(itemId);\r\n\r\n  if (\r\n    !lazyLoadTreeItemsCallback ||\r\n    !itemToReloadUIModel ||\r\n    itemToReloadUIModel.item.leaf === true\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  const noProperties = !beforeProperties && !afterProperties;\r\n  if (noProperties) {\r\n    beforeProperties = { downloading: true };\r\n    afterProperties = { downloading: false };\r\n  }\r\n\r\n  if (beforeProperties) {\r\n    elementRef.updateItemsProperties([itemId], beforeProperties);\r\n  }\r\n\r\n  const newItems = await lazyLoadTreeItemsCallback(itemId);\r\n\r\n  // Store previous ids in a Set for efficient access\r\n  const oldItemsSet = new Set(\r\n    itemToReloadUIModel.item.items.map(item => item.id)\r\n  );\r\n\r\n  const reloadNewItemsQueue: string[] = [];\r\n\r\n  // Reconcile the state of old items to new ones\r\n  newItems.forEach(newItem => {\r\n    const newItemOldUIModel = flattenedTreeModel.get(newItem.id);\r\n\r\n    // If the item previously existed in the client\r\n    if (newItemOldUIModel && oldItemsSet.has(newItem.id)) {\r\n      const newItemOldInfo = newItemOldUIModel.item;\r\n\r\n      // Reconciliate the state\r\n      newItem.checked = newItemOldInfo.checked;\r\n      newItem.expanded = newItemOldInfo.expanded;\r\n      newItem.indeterminate = newItemOldInfo.indeterminate;\r\n      newItem.selected = newItemOldInfo.selected;\r\n\r\n      const newItemWasLazyLoaded =\r\n        newItem.lazy && newItemOldInfo.lazy === false;\r\n\r\n      if (newItemWasLazyLoaded) {\r\n        newItem.lazy = false;\r\n\r\n        // Don't remove items until the child item is reloaded\r\n        newItem.items = newItemOldInfo.items;\r\n\r\n        // Add the item to be reloaded after its parent has finished its reload\r\n        reloadNewItemsQueue.push(newItem.id);\r\n      }\r\n\r\n      // Remove the item from the set to properly count items that no longer\r\n      // exist in the node\r\n      oldItemsSet.delete(newItem.id);\r\n    }\r\n  });\r\n\r\n  // Remove all the items that no longer exists in the node\r\n  if (oldItemsSet.size > 0) {\r\n    removeItems([...oldItemsSet.keys()]);\r\n  }\r\n\r\n  // Update the items of the reloaded node\r\n  await loadLazyContent(itemId, newItems);\r\n\r\n  if (afterProperties) {\r\n    elementRef.updateItemsProperties([itemId], afterProperties);\r\n  }\r\n\r\n  // Reload child items that were lazy loaded\r\n  await Promise.allSettled(\r\n    reloadNewItemsQueue.map(itemToReload =>\r\n      reloadItems(\r\n        elementRef,\r\n        itemToReload,\r\n        flattenedTreeModel,\r\n        lazyLoadTreeItemsCallback,\r\n        loadLazyContent,\r\n        removeItems\r\n      )\r\n    )\r\n  );\r\n\r\n  return true;\r\n};\r\n","import { itemHasCheckbox } from \"./helpers\";\r\nimport { TreeViewItemModel, TreeViewItemModelExtended } from \"./types\";\r\n\r\nexport const updateItemProperty = (\r\n  itemId: string,\r\n  properties: Partial<TreeViewItemModel>,\r\n  flattenedTreeModel: Map<string, TreeViewItemModelExtended>,\r\n  newSelectedItems: Set<string>,\r\n  newCheckboxItems: Map<string, TreeViewItemModelExtended>,\r\n  defaultCheckbox: boolean\r\n) => {\r\n  const itemUIModel = flattenedTreeModel.get(itemId);\r\n  if (!itemUIModel) {\r\n    return;\r\n  }\r\n\r\n  const itemInfo = itemUIModel.item;\r\n\r\n  Object.keys(properties).forEach(propertyName => {\r\n    if (properties[propertyName] !== undefined) {\r\n      itemInfo[propertyName] = properties[propertyName];\r\n    }\r\n  });\r\n\r\n  // Accumulate selection/deselection\r\n  if (properties.selected) {\r\n    newSelectedItems.add(itemId);\r\n  } else if (properties.selected === false) {\r\n    newSelectedItems.delete(itemId);\r\n  }\r\n\r\n  // Accumulate/remove items with checkbox\r\n  if (itemHasCheckbox(itemInfo, defaultCheckbox)) {\r\n    newCheckboxItems.set(itemId, itemUIModel);\r\n  } else {\r\n    newCheckboxItems.delete(itemId);\r\n  }\r\n};\r\n","@import \"../../common/base\";\r\n\r\n:host {\r\n  /**\r\n   * @prop --ch-tree-view-item-custom-padding-inline-start:\r\n   * Specifies an additional value for the padding-inline-start of the items\r\n   * without breaking the indentation of the items.\r\n   * @default 0px\r\n   */\r\n  --ch-tree-view-item-custom-padding-inline-start: 0px;\r\n\r\n  /**\r\n   * @prop --ch-tree-view-item-gap:\r\n   * Specifies the spacing between the images, checkbox, text and the\r\n   * expandable button of the items.\r\n   * @default 0px\r\n   */\r\n  --ch-tree-view-item-gap: 0px;\r\n\r\n  /**\r\n   * @prop --ch-tree-view-item__checkbox-size:\r\n   * Specifies the checkbox size of the items.\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-tree-view-item__checkbox-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-tree-view-item__checkbox-size:\r\n   * Specifies the expandable button size of the items.\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-tree-view-item__expandable-button-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-tree-view-item__image-size:\r\n   * Specifies the box size that contains the start or end images of the items.\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-tree-view-item__image-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-tree-view-item__line--inset-inline-start:\r\n   * Specifies an additional separation that only applies for the inline start\r\n   * position of the item's line.\r\n   * @default 0px\r\n   */\r\n  --ch-tree-view-item__line--inset-inline-start: 0px;\r\n\r\n  /**\r\n   * @prop --ch-tree-view-item__line--inset-inline-end:\r\n   * Specifies the separation that only applies for the inline end position of\r\n   * the item's line. This separation visually shows a gap between the line and\r\n   * the item's header.\r\n   * @default 0px\r\n   */\r\n  --ch-tree-view-item__line--inset-inline-end: 0px;\r\n\r\n  --ch-tree-tab-size: calc(\r\n    var(--ch-tree-view-item__image-size) +\r\n      var(--ch-tree-view-item__expandable-button-size) +\r\n      (var(--ch-tree-view-item-gap) * 2)\r\n  );\r\n\r\n  display: grid;\r\n  grid-auto-rows: max-content;\r\n  block-size: 100%;\r\n  overflow: auto;\r\n  contain: size;\r\n}\r\n\r\n// Reset useful droppable areas\r\n.dragging-item ch-tree-view-item {\r\n  pointer-events: var(--ch-tree-view-pointer-events, all);\r\n}\r\n\r\n// Remove un-useful droppable areas\r\n.dragging-item .item-deny-drop {\r\n  pointer-events: none;\r\n}\r\n\r\n// Remove droppable areas on selected items\r\n.dragging-selected-items ch-tree-view-item[selected] {\r\n  --ch-tree-view-pointer-events: none;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//        Item indentation\r\n// - - - - - - - - - - - - - - - -\r\n::part(item__header),\r\nch-tree-view-drop {\r\n  --own-offset: 0px;\r\n\r\n  --ch-tree-view-item-indentation: calc(\r\n    var(--ch-tree-tab-size) * var(--level) - var(--own-offset) -\r\n      var(--parent-offset, 0px) +\r\n      var(--ch-tree-view-item-custom-padding-inline-start)\r\n  );\r\n}\r\n\r\n::part(item__header expand-button),\r\nch-tree-view-drop {\r\n  --own-offset: calc(\r\n    var(--ch-tree-view-item__expandable-button-size) +\r\n      var(--ch-tree-view-item-gap)\r\n  );\r\n}\r\n\r\n// Even level\r\n::part(item__header even-level),\r\nch-tree-view-drop.gx-even-level {\r\n  --parent-offset: var(--parent-offset-odd);\r\n}\r\n\r\n// Odd level\r\n::part(item__header odd-level),\r\nch-tree-view-drop.gx-odd-level {\r\n  --parent-offset: var(--parent-offset-even);\r\n}\r\n\r\nch-tree-view-drop {\r\n  margin-inline-start: var(--ch-tree-view-item-indentation);\r\n}\r\n\r\n::part(item__header) {\r\n  padding-inline-start: var(--ch-tree-view-item-indentation);\r\n}\r\n\r\n::part(item__group even-level) {\r\n  --parent-offset-even: calc(\r\n    var(--ch-tree-view-item__expandable-button-size) +\r\n      var(--ch-tree-view-item-gap) + var(--parent-offset-odd, 0px)\r\n  );\r\n}\r\n\r\n::part(item__group odd-level) {\r\n  --parent-offset-odd: calc(\r\n    var(--ch-tree-view-item__expandable-button-size) +\r\n      var(--ch-tree-view-item-gap) + var(--parent-offset-even, 0px)\r\n  );\r\n}\r\n\r\nch-tree-view-item {\r\n  // Improve the position of the first-child to avoid clipping the droppable\r\n  // area, since the parent has content-visibility: \"auto\" which creates a new\r\n  // containing block\r\n  & > ch-tree-view-drop:first-child {\r\n    transform: translateY(0);\r\n\r\n    &::after {\r\n      inset-block-start: 0px;\r\n    }\r\n  }\r\n\r\n  // Improve collision with the end drop (level N + 1) of a group and the next\r\n  // drop in the level N\r\n  & > ch-tree-view-drop:last-child {\r\n    transform: translateY(calc(var(--ch-tree-view-drop--size) * -1));\r\n\r\n    &::after {\r\n      inset-block-start: calc(var(--ch-tree-view-drop--size) * 0.5);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  h,\r\n  Prop,\r\n  Listen,\r\n  Watch,\r\n  State,\r\n  forceUpdate,\r\n  Method,\r\n  Host\r\n} from \"@stencil/core\";\r\nimport {\r\n  TreeViewDataTransferInfo,\r\n  TreeViewDropCheckInfo,\r\n  TreeViewItemContextMenu,\r\n  TreeViewLines,\r\n  TreeViewItemCheckedInfo,\r\n  TreeViewItemExpandedInfo,\r\n  TreeViewItemNewCaption,\r\n  TreeViewItemOpenReferenceInfo,\r\n  TreeViewItemSelectedInfo,\r\n  TreeViewDropType\r\n} from \"./internal/tree-view/types\";\r\nimport {\r\n  LazyLoadTreeItemsCallback,\r\n  TreeViewFilterInfo,\r\n  TreeViewFilterOptions,\r\n  TreeViewFilterType,\r\n  TreeViewImagePathCallback,\r\n  TreeViewItemModel,\r\n  TreeViewItemModelExtended,\r\n  TreeViewModel,\r\n  TreeViewOperationStatusModifyCaption,\r\n  TreeViewRemoveItemsResult\r\n} from \"./types\";\r\nimport {\r\n  ChTreeViewCustomEvent,\r\n  ChTreeViewItemCustomEvent\r\n} from \"../../components\";\r\nimport { GxDataTransferInfo } from \"../../common/types\";\r\nimport { computeFilter, itemHasCheckbox } from \"./helpers\";\r\nimport {\r\n  GXRender,\r\n  TreeViewGXItemModel,\r\n  fromGxImageToURL\r\n} from \"./genexus-implementation\";\r\nimport {\r\n  removeTreeViewItems,\r\n  scrollIntoVisibleId,\r\n  scrollIntoVisiblePath\r\n} from \"./utils\";\r\nimport { reloadItems } from \"./reload-items\";\r\nimport { updateItemProperty } from \"./update-item-property\";\r\nimport { insertIntoIndex, removeElement } from \"../../common/array\";\r\nimport {\r\n  removeSubscription,\r\n  subscribe,\r\n  syncStateWithObservableAncestors\r\n} from \"../sidebar/expanded-change-obervables\";\r\n\r\nlet autoId = 0;\r\n\r\nconst ROOT_ID = null;\r\n\r\nconst DEFAULT_DRAG_DISABLED_VALUE = false;\r\nconst DEFAULT_DROP_DISABLED_VALUE = false;\r\nconst DEFAULT_EDITABLE_ITEMS_VALUE = true;\r\nconst DEFAULT_EXPANDED_VALUE = false;\r\nconst DEFAULT_INDETERMINATE_VALUE = false;\r\nconst DEFAULT_LAZY_VALUE = false;\r\nconst DEFAULT_ORDER_VALUE = 0;\r\nconst DEFAULT_SELECTED_VALUE = false;\r\n\r\n// There are a filter applied and, if the type is \"caption\" or\r\n// \"metadata\", the filter property must be set\r\nconst treeViewHasFilters = (filterType: TreeViewFilterType, filter: string) =>\r\n  filterType !== \"none\" &&\r\n  ((filterType !== \"caption\" && filterType !== \"metadata\") ||\r\n    (filter != null && filter.trim() !== \"\"));\r\n\r\nconst defaultGetImagePath: TreeViewImagePathCallback = (\r\n  imgSrc: string,\r\n  treeState: ChTreeViewRender,\r\n  useGxRender?: boolean\r\n) =>\r\n  useGxRender\r\n    ? fromGxImageToURL(\r\n        imgSrc,\r\n        treeState.gxSettings,\r\n        treeState.gxImageConstructor\r\n      )\r\n    : imgSrc;\r\n\r\n// GeneXus implementation\r\nconst gxDragDisabled = (\r\n  itemModel: TreeViewGXItemModel,\r\n  treeState: ChTreeViewRender\r\n) =>\r\n  itemModel.dragEnabled != null\r\n    ? !itemModel.dragEnabled\r\n    : treeState.dragDisabled;\r\n\r\n// GeneXus implementation\r\nconst gxDropDisabled = (\r\n  itemModel: TreeViewGXItemModel,\r\n  treeState: ChTreeViewRender\r\n) =>\r\n  itemModel.dropEnabled != null\r\n    ? !itemModel.dropEnabled\r\n    : treeState.dropDisabled;\r\n\r\nconst isDropDisabled = (\r\n  itemModel: TreeViewGXItemModel,\r\n  treeState: ChTreeViewRender,\r\n  useGxRender: boolean\r\n) =>\r\n  useGxRender\r\n    ? gxDropDisabled(itemModel, treeState)\r\n    : (itemModel as GXRender<false>).dropDisabled ?? treeState.dropDisabled;\r\n\r\nconst treeDropId = (treeItemId: string) => `ch-tree-view-drop__${treeItemId}`;\r\n\r\nconst defaultRenderItem = <T extends true | false>(\r\n  itemModel: GXRender<T>,\r\n  treeState: ChTreeViewRender,\r\n  treeHasFilter: boolean,\r\n  lastItem: boolean,\r\n  level: number,\r\n  dropBeforeAndAfterEnabled: boolean,\r\n  useGxRender = false\r\n) =>\r\n  (treeState.filterType === \"none\" || itemModel.render !== false) && [\r\n    dropBeforeAndAfterEnabled && (\r\n      <ch-tree-view-drop\r\n        id={treeDropId(itemModel.id)}\r\n        level={level}\r\n        treeItemId={itemModel.id}\r\n        type=\"before\"\r\n      ></ch-tree-view-drop>\r\n    ),\r\n\r\n    <ch-tree-view-item\r\n      key={itemModel.id}\r\n      id={itemModel.id}\r\n      caption={itemModel.caption}\r\n      checkbox={itemModel.checkbox ?? treeState.checkbox}\r\n      checked={itemModel.checked ?? treeState.checked}\r\n      disabled={\r\n        useGxRender\r\n          ? (itemModel as GXRender<true>).enabled === false\r\n          : (itemModel as GXRender<false>).disabled\r\n      }\r\n      downloading={itemModel.downloading}\r\n      dragDisabled={\r\n        useGxRender\r\n          ? gxDragDisabled(itemModel, treeState)\r\n          : (itemModel as GXRender<false>).dragDisabled ??\r\n            treeState.dragDisabled\r\n      }\r\n      dropDisabled={isDropDisabled(itemModel, treeState, useGxRender)}\r\n      editable={itemModel.editable ?? treeState.editableItems}\r\n      endImgSrc={treeState.getImagePathCallback(\r\n        itemModel.endImgSrc,\r\n        treeState,\r\n        useGxRender\r\n      )}\r\n      endImgType={itemModel.endImgType ?? \"background\"}\r\n      expanded={itemModel.expanded}\r\n      expandableButton={treeState.expandableButton}\r\n      expandOnClick={treeState.expandOnClick}\r\n      indeterminate={itemModel.indeterminate}\r\n      lastItem={lastItem}\r\n      lazyLoad={itemModel.lazy}\r\n      leaf={itemModel.leaf}\r\n      level={level}\r\n      metadata={itemModel.metadata}\r\n      parts={itemModel.parts}\r\n      selected={itemModel.selected}\r\n      showLines={treeState.showLines}\r\n      toggleCheckboxes={\r\n        itemModel.toggleCheckboxes ?? treeState.toggleCheckboxes\r\n      }\r\n      startImgSrc={treeState.getImagePathCallback(\r\n        itemModel.startImgSrc,\r\n        treeState,\r\n        useGxRender\r\n      )}\r\n      startImgType={itemModel.startImgType ?? \"background\"}\r\n    >\r\n      {treeState.expanded &&\r\n        !itemModel.leaf &&\r\n        itemModel.items != null &&\r\n        itemModel.items.map((subModel, index) =>\r\n          treeState.renderItem(\r\n            subModel,\r\n            treeState,\r\n            treeHasFilter,\r\n            treeState.showLines !== \"none\" &&\r\n              // If there is a filter applied in the current list, use the\r\n              // lastItemId value to calculate the last item\r\n              (treeHasFilter && itemModel.lastItemId !== undefined\r\n                ? subModel.id === itemModel.lastItemId\r\n                : index === itemModel.items.length - 1),\r\n            level + 1,\r\n\r\n            // When dragging \"before\" and \"after\" an item and the direct parent\r\n            // has drops disabled, don't render the ch-tree-view-drop elements.\r\n            treeState.dropMode !== \"above\" &&\r\n              isDropDisabled(itemModel, treeState, useGxRender) !== true,\r\n            useGxRender\r\n          )\r\n        )}\r\n    </ch-tree-view-item>,\r\n\r\n    dropBeforeAndAfterEnabled && lastItem && (\r\n      <ch-tree-view-drop\r\n        id={treeDropId(itemModel.id) + \"-after\"}\r\n        level={level}\r\n        treeItemId={itemModel.id}\r\n        type=\"after\"\r\n      ></ch-tree-view-drop>\r\n    )\r\n  ];\r\n\r\nconst defaultSortItemsCallback = (subModel: TreeViewModel): void => {\r\n  subModel.sort((a, b) => {\r\n    if (a.order < b.order) {\r\n      return -1;\r\n    }\r\n\r\n    if (a.order > b.order) {\r\n      return 0;\r\n    }\r\n\r\n    return a.caption <= b.caption ? -1 : 0;\r\n  });\r\n};\r\n\r\ntype ImmediateFilter = \"immediate\" | \"debounced\" | undefined;\r\n\r\n/**\r\n * @part drag-preview - The element that contains the preview information for the current drag.\r\n *\r\n * @part item - The host element of the each item.\r\n *\r\n * @part item__action - A sub element of the header (item__header part) that contains the main information related to the item (startImage, caption/edit-caption, endImage and downloading).\r\n *\r\n * @part item__checkbox - The host element of the item's checkbox.\r\n * @part item__checkbox-container - The container that serves as a wrapper for the `input` and the `option` parts of the checkbox.\r\n * @part item__checkbox-input - The input element that implements the interactions for the checkbox.\r\n * @part item__checkbox-option - The actual \"input\" that is rendered above the `item__checkbox-input` part of the checkbox. This part has `position: absolute` and `pointer-events: none`.\r\n *\r\n * @part item__downloading - The spinner element that is rendered when an item is lazy loading its content. This element is rendered at the end of the `item__action` part.\r\n *\r\n * @part item__edit-caption - The input element that is rendered when an item is editing its caption. When rendered this element replaces the caption of the `item__action` part.\r\n *\r\n * @part item__expandable-button - The actionable expandable button element that is rendered when an item has subitems and the expandable button is interactive (`leaf !== true` and `expandableButton === \"action\"`). When rendered this element is placed at the start of the `item__action` part.\r\n *\r\n * @part item__group - The container element for the subitems that is rendered when the content of an item has been lazy loaded.\r\n *\r\n * @part item__header - The container for all elements -excepts the subitems (`item__group` part)- of an item. It contains the `item__expandable-button`, `item_checkbox` and `item__action` parts.\r\n *\r\n * @part item__img - The img element that is rendered when an item has images (`startImgSrc` is defined and/or `endImgSrc` is defined).\r\n *\r\n * @part item__line - The element that is rendered to display the relationship between the an item and its parent. Rendered if the item is not in the first level and `showLines !== \"none\"`.\r\n *\r\n * @part disabled - Present in the `item__header`, `item__expandable-button`, `item__checkbox-input`, `item__checkbox-option` and `item__checkbox-container` parts when the item is disabled (`disabled` === `true`).\r\n *\r\n * @part expanded - Present in the `item__action`, `item__expandable-button` and `item__group` parts when the item is expanded (`expanded` === `true`).\r\n * @part collapsed - Present in the `item__action`, `item__expandable-button` and `item__group` parts when the item is collapsed (`expanded` !== `true`).\r\n *\r\n * @part expand-button - Present in the `item__header` part when the item has an expandable button (`level !== 0`, `leaf !== true` and `expandableButton !== \"no\"`).\r\n *\r\n * @part even-level - Present in the `item__group` and `item__header` parts when the item is in an even level.\r\n * @part odd-level - Present in the `item__group` and `item__header` parts when the item is in an odd level.\r\n *\r\n * @part last-line - Present in the `item__line` part if the item is the last item of its parent item in `showLines = \"last\"` mode (`showLines === \"last\"`, `level !== 0` and `lastItem === true`).\r\n *\r\n * @part lazy-loaded - Present in the `item__group` part when the content of the item has been loaded.\r\n *\r\n * @part start-img - Present in the `item__img` part when the item has an start image element (`startImgSrc` is defined and `startImgType` === \"img\").\r\n * @part end-img - Present in the `item__img` part when the item has an end image element (`endImgSrc` is defined and `endImgType` === \"img\").\r\n *\r\n * @part editing - Present in the `item__header` and `item__action` parts when the item is in edit mode.\r\n * @part not-editing - Present in the `item__header` and `item__action` parts when the item isn't in edit mode.\r\n *\r\n * @part selected - Present in the `item__header` part when the item is selected (`selected` === `true`).\r\n * @part not-selected - Present in the `item__header` part when the item isn't selected (`selected` !== `true`).\r\n *\r\n * @part checked - Present in the `item__checkbox-input`, `item__checkbox-option` and `item__checkbox-container` parts when the item is checked and not indeterminate (`checked` === `true` and `indeterminate !== true`).\r\n * @part indeterminate - Present in the `item__checkbox-input`, `item__checkbox-option` and `item__checkbox-container` parts when the item is indeterminate (`indeterminate` === `true`).\r\n * @part unchecked - Present in the `item__checkbox-input`, `item__checkbox-option` and `item__checkbox-container` parts when the item is unchecked and not indeterminate (`checked` !== `true` and `indeterminate !== true`).\r\n *\r\n * @part drag-enter - Present in the `item` and `item__header` parts when a valid drop operation is over the item.\r\n */\r\n@Component({\r\n  tag: \"ch-tree-view-render\",\r\n  styleUrl: \"tree-view-render.scss\",\r\n  shadow: true\r\n})\r\nexport class ChTreeViewRender {\r\n  // UI Models\r\n  #flattenedTreeModel: Map<string, TreeViewItemModelExtended> = new Map();\r\n  #flattenedCheckboxTreeModel: Map<string, TreeViewItemModelExtended> =\r\n    new Map();\r\n  #selectedItems: Set<string> = new Set();\r\n\r\n  #selectedChangeScheduled = false;\r\n\r\n  #checkedChangeScheduled = false;\r\n\r\n  #rootNode: TreeViewItemModel;\r\n\r\n  // Filters info\r\n  #applyFilters = false;\r\n  #immediateFilter: ImmediateFilter;\r\n  #filterTimeout: NodeJS.Timeout;\r\n  #filterListAsSet: Set<string>;\r\n\r\n  /**\r\n   * This ID is used to identify the Tree View. Necessary to subscribe for\r\n   * expand/collapse changes in the ancestor nodes.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #treeViewId: string;\r\n\r\n  // Refs\r\n  #treeRef: HTMLChTreeViewElement;\r\n\r\n  @Element() el: HTMLChTreeViewRenderElement;\r\n\r\n  @State() expanded: boolean = true;\r\n\r\n  /**\r\n   * This property lets you specify if the tree is waiting to process the drop\r\n   * of items.\r\n   */\r\n  @State() waitDropProcessing = false;\r\n\r\n  /**\r\n   * Set this attribute if you want display a checkbox in all items by default.\r\n   */\r\n  @Prop() readonly checkbox: boolean = false;\r\n\r\n  /**\r\n   * Set this attribute if you want the checkbox to be checked in all items by\r\n   * default.\r\n   * Only works if `checkbox = true`\r\n   */\r\n  @Prop() readonly checked: boolean = false;\r\n\r\n  /**\r\n   * Callback that is executed when an element tries to drop in another item of\r\n   * the tree. Returns whether the drop is valid.\r\n   */\r\n  @Prop() readonly checkDroppableZoneCallback: (\r\n    dropInformation: TreeViewDropCheckInfo\r\n  ) => Promise<boolean>;\r\n\r\n  /**\r\n   * This attribute lets you specify if the drag operation is disabled in all\r\n   * items by default. If `true`, the items can't be dragged.\r\n   */\r\n  @Prop() readonly dragDisabled: boolean = DEFAULT_DRAG_DISABLED_VALUE;\r\n\r\n  /**\r\n   * This attribute lets you specify if the drop operation is disabled in all\r\n   * items by default. If `true`, the items won't accept any drops.\r\n   */\r\n  @Prop() readonly dropDisabled: boolean = DEFAULT_DROP_DISABLED_VALUE;\r\n\r\n  /**\r\n   * Callback that is executed when a list of items request to be dropped into\r\n   * another item.\r\n   */\r\n  @Prop() readonly dropItemsCallback: (\r\n    dataTransferInfo: TreeViewDataTransferInfo\r\n  ) => Promise<{ acceptDrop: boolean; model?: TreeViewModel }>;\r\n\r\n  /**\r\n   * This attribute lets you specify which kind of drop operation can be\r\n   * effected in the items.\r\n   */\r\n  @Prop() readonly dropMode: \"above\" | \"before-and-after\" | \"all\" = \"above\";\r\n\r\n  /**\r\n   * This attribute lets you specify if the edit operation is enabled in all\r\n   * items by default. If `true`, the items can edit its caption in place.\r\n   */\r\n  @Prop() readonly editableItems: boolean = DEFAULT_EDITABLE_ITEMS_VALUE;\r\n\r\n  /**\r\n   * Specifies what kind of expandable button is displayed in the items by\r\n   * default.\r\n   *  - `\"expandableButton\"`: Expandable button that allows to expand/collapse\r\n   *     the items of the control.\r\n   *  - `\"decorative\"`: Only a decorative icon is rendered to display the state\r\n   *     of the item.\r\n   */\r\n  @Prop() readonly expandableButton: \"action\" | \"decorative\" | \"no\" =\r\n    \"decorative\";\r\n\r\n  /**\r\n   * Specifies if a tree-view-item is expanded on click interaction. If `true`\r\n   * the tree-view-item is expanded on click interaction. If `false`, with\r\n   * mouse interaction the tree-view-item will only be expanded on double click.\r\n   */\r\n  @Prop() readonly expandOnClick: boolean = true;\r\n\r\n  /**\r\n   * This property lets you determine the expression that will be applied to the\r\n   * filter.\r\n   * Only works if `filterType = \"caption\" | \"metadata\"`.\r\n   */\r\n  @Prop() readonly filter: string;\r\n  @Watch(\"filter\")\r\n  filterChanged() {\r\n    if (this.filterType === \"caption\" || this.filterType === \"metadata\") {\r\n      this.#scheduleFilterProcessing();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This property lets you determine the debounce time (in ms) that the\r\n   * control waits until it processes the changes to the filter property.\r\n   * Consecutive changes to the `filter` property between this range, reset the\r\n   * timeout to process the filter.\r\n   * Only works if `filterType = \"caption\" | \"metadata\"`.\r\n   */\r\n  @Prop() readonly filterDebounce: number = 250;\r\n  @Watch(\"filterDebounce\")\r\n  filterDebounceChanged() {\r\n    if (this.filterType === \"caption\" || this.filterType === \"metadata\") {\r\n      this.#scheduleFilterProcessing();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This property lets you determine the list of items that will be filtered.\r\n   * Only works if `filterType = \"list\"`.\r\n   */\r\n  @Prop() readonly filterList: string[] = [];\r\n  @Watch(\"filterList\")\r\n  filterListChanged() {\r\n    // Use a Set to efficiently check for ids\r\n    this.#filterListAsSet = new Set(this.filterList);\r\n\r\n    if (this.filterType === \"list\") {\r\n      this.#scheduleFilterProcessing();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This property lets you determine the options that will be applied to the\r\n   * filter.\r\n   */\r\n  @Prop() readonly filterOptions: TreeViewFilterOptions = {};\r\n  @Watch(\"filterOptions\")\r\n  filterOptionsChanged() {\r\n    this.#scheduleFilterProcessing();\r\n  }\r\n\r\n  /**\r\n   * This attribute lets you define what kind of filter is applied to items.\r\n   * Only items that satisfy the filter predicate will be displayed.\r\n   *\r\n   * | Value       | Details                                                                                        |\r\n   * | ----------- | ---------------------------------------------------------------------------------------------- |\r\n   * | `checked`   | Show only the items that have a checkbox and are checked.                                      |\r\n   * | `unchecked` | Show only the items that have a checkbox and are not checked.                                  |\r\n   * | `caption`   | Show only the items whose `caption` satisfies the regex determinate by the `filter` property.  |\r\n   * | `metadata`  | Show only the items whose `metadata` satisfies the regex determinate by the `filter` property. |\r\n   * | `list`      | Show only the items that are contained in the array determinate by the `filterList` property.  |\r\n   * | `none`      | Show all items.                                                                                |\r\n   */\r\n  @Prop() readonly filterType: TreeViewFilterType = \"none\";\r\n  @Watch(\"filterType\")\r\n  filterTypeChanged() {\r\n    this.#scheduleFilterProcessing();\r\n  }\r\n\r\n  /**\r\n   * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.\r\n   */\r\n  @Prop() readonly gxImageConstructor: (name: string) => any;\r\n\r\n  /**\r\n   * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.\r\n   */\r\n  @Prop() readonly gxSettings: any;\r\n\r\n  /**\r\n   * This property specifies a callback that is executed when the path for an\r\n   * item image needs to be resolved. With this callback, there is no need to\r\n   * re-implement item rendering (`renderItem` property) just to change the\r\n   * path used for the images.\r\n   */\r\n  @Prop() readonly getImagePathCallback: TreeViewImagePathCallback =\r\n    defaultGetImagePath;\r\n\r\n  /**\r\n   * Callback that is executed when a item request to load its subitems.\r\n   */\r\n  @Prop() readonly lazyLoadTreeItemsCallback: LazyLoadTreeItemsCallback;\r\n\r\n  /**\r\n   * Callback that is executed when a item request to modify its caption.\r\n   */\r\n  @Prop() readonly modifyItemCaptionCallback: (\r\n    treeItemId: string,\r\n    newCaption: string\r\n  ) => Promise<TreeViewOperationStatusModifyCaption>;\r\n\r\n  /**\r\n   * Set this attribute if you want to allow multi selection of the items.\r\n   */\r\n  @Prop() readonly multiSelection: boolean = false;\r\n  @Watch(\"multiSelection\")\r\n  multiSelectionChanged(newMultiSelection: boolean) {\r\n    // MultiSelection is disabled. We must select the last updated item\r\n    if (!newMultiSelection) {\r\n      this.#removeAllSelectedItemsExceptForTheLast(this.#selectedItems);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This property lets you define the model of the ch-tree-view-render control.\r\n   */\r\n  @Prop() readonly model: TreeViewModel = [];\r\n  @Watch(\"model\")\r\n  modelChanged() {\r\n    this.#flattenModel();\r\n  }\r\n\r\n  /**\r\n   * This property allows us to implement custom rendering of tree items.\r\n   */\r\n  @Prop() readonly renderItem: (\r\n    itemModel: TreeViewItemModel | any,\r\n    treeState: ChTreeViewRender,\r\n    treeHasFilter: boolean,\r\n    lastItem: boolean,\r\n    level: number,\r\n    dropBeforeAndAfterEnabled: boolean,\r\n    useGxRender?: boolean\r\n  ) => any = defaultRenderItem;\r\n\r\n  /**\r\n   * `true` to display the relation between tree items and tree lists using\r\n   * lines.\r\n   */\r\n  @Prop() readonly showLines: TreeViewLines = \"none\";\r\n\r\n  /**\r\n   * Callback that is executed when the `model` is changed to order its items.\r\n   */\r\n  @Prop() readonly sortItemsCallback: (subModel: TreeViewModel) => void =\r\n    defaultSortItemsCallback;\r\n\r\n  /**\r\n   * Set this attribute if you want all the children item's checkboxes to be\r\n   * checked when the parent item checkbox is checked, or to be unchecked when\r\n   * the parent item checkbox is unchecked.\r\n   * This attribute will be used in all items by default.\r\n   */\r\n  @Prop() readonly toggleCheckboxes: boolean = false;\r\n\r\n  /**\r\n   * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.\r\n   */\r\n  @Prop() readonly useGxRender: boolean = false;\r\n\r\n  /**\r\n   * Fired when the checked items change.\r\n   * This event does take into account the currently filtered items.\r\n   */\r\n  @Event() checkedItemsChange: EventEmitter<\r\n    Map<string, TreeViewItemModelExtended>\r\n  >;\r\n\r\n  /**\r\n   * Fired when an element displays its contextmenu.\r\n   */\r\n  @Event() itemContextmenu: EventEmitter<TreeViewItemContextMenu>;\r\n\r\n  /**\r\n   * Fired when the user interacts with an item in a way that its reference\r\n   * must be opened.\r\n   */\r\n  @Event() itemOpenReference: EventEmitter<TreeViewItemOpenReferenceInfo>;\r\n\r\n  /**\r\n   * Fired when the selected items change.\r\n   * This event can be fired by the following conditions:\r\n   *   1. A user changes the selected items interacting with the Tree View.\r\n   *\r\n   *   2. The `multiSelection` value is changed from `true` to `false`.\r\n   *\r\n   *   3. A selected item is no longer rendered because it does not satisfies a\r\n   *      filter condition.\r\n   *\r\n   *   4. TODO: The `treeModel` property is updated and contains different selected\r\n   *      items. Even if it does not contains different selected items, this\r\n   *      event is fired because the selected items can have a different path\r\n   *      than before the `treeModel` update.\r\n   *\r\n   *   5. The `updateItemsProperties` method is executed, changing the item\r\n   *      selection.\r\n   *\r\n   *   6. A selected item is removed.\r\n   *\r\n   *   7. TODO: A selected item is moved into a new parent with drag and drop.\r\n   *      In this case, since the detail of the event contains the information\r\n   *      of the parent, this event must be fired to update the information.\r\n   *\r\n   *   8. Executing `scrollIntoVisible` method and updating the selected value\r\n   *      of the scrolled item.\r\n   *\r\n   *   9. TODO: An external item is dropped into the Tree View and the item is\r\n   *      selected.\r\n   *\r\n   *  10. TODO: Lazy loading content that has selected items?\r\n   *\r\n   * Thing that does not fire this event:\r\n   *   - TODO: Renaming a selected item.\r\n   *\r\n   *   - TODO: Applying a filter that keeps all selected items rendered.\r\n   */\r\n  @Event() selectedItemsChange: EventEmitter<TreeViewItemModelExtended[]>;\r\n\r\n  /**\r\n   * Given the drop accepting, the data transfer info and the external items,\r\n   * it process the drops of the items in the tree.\r\n   */\r\n  @Method()\r\n  async dropItems(\r\n    acceptDrop: boolean,\r\n    dataTransferInfo: TreeViewDataTransferInfo,\r\n    model?: TreeViewModel\r\n  ) {\r\n    if (!acceptDrop) {\r\n      return;\r\n    }\r\n\r\n    const newParentId = dataTransferInfo.newContainer.id;\r\n    const newParentUIModel = this.#flattenedTreeModel.get(newParentId);\r\n    const dropType = dataTransferInfo.dropType;\r\n\r\n    // When the dropType is \"before\" or \"after\", the target node must be\r\n    // the parent\r\n    const actualParent =\r\n      dropType === \"above\"\r\n        ? newParentUIModel.item\r\n        : newParentUIModel.parentItem;\r\n\r\n    // Only move the items to the new parent, keeping the state\r\n    if (dataTransferInfo.dropInTheSameTree) {\r\n      let specificIndexToInsert: { index: number } = undefined;\r\n\r\n      if (dropType !== \"above\") {\r\n        specificIndexToInsert = {\r\n          index: actualParent.items.findIndex(\r\n            item => item.id === dataTransferInfo.newContainer.id\r\n          )\r\n        };\r\n\r\n        if (dropType === \"after\") {\r\n          specificIndexToInsert.index++;\r\n        }\r\n      }\r\n\r\n      // Add the UI models to the new container and remove the UI models from\r\n      // the old containers\r\n      dataTransferInfo.draggedItems.forEach(\r\n        this.#moveItemToNewParent(actualParent, specificIndexToInsert)\r\n      );\r\n\r\n      // When the selected items are moved, the tree must update its internal\r\n      // state to not have undefined references\r\n      if (dataTransferInfo.draggingSelectedItems) {\r\n        this.#scheduleSelectedItemsChange();\r\n      }\r\n    }\r\n    // Add the new items\r\n    else {\r\n      if (model == null) {\r\n        return;\r\n      }\r\n\r\n      // Add new items to the parent\r\n      actualParent.items.push(...model);\r\n\r\n      // Flatten the new UI models\r\n      model.forEach(this.#flattenItemUIModel(actualParent));\r\n    }\r\n\r\n    this.#sortItems(actualParent.items);\r\n\r\n    // Open the item to visualize the new subitems\r\n    actualParent.expanded = true;\r\n\r\n    // Re-sync checked items\r\n    this.#scheduleCheckedItemsChange();\r\n\r\n    // Update filters\r\n    this.#scheduleFilterProcessing();\r\n\r\n    // Force re-render\r\n    forceUpdate(this);\r\n  }\r\n\r\n  /**\r\n   * Given a list of ids, it returns an array of the items that exists in the\r\n   * given list.\r\n   */\r\n  @Method()\r\n  async getItemsInfo(itemsId: string[]): Promise<TreeViewItemModelExtended[]> {\r\n    return this.#getItemsInfo(itemsId);\r\n  }\r\n\r\n  #getItemsInfo = (itemsId: string[]): TreeViewItemModelExtended[] => {\r\n    const treeViewItemsInfo: TreeViewItemModelExtended[] = [];\r\n\r\n    itemsId.forEach(itemId => {\r\n      const itemUIModel = this.#flattenedTreeModel.get(itemId);\r\n\r\n      if (itemUIModel) {\r\n        treeViewItemsInfo.push(itemUIModel);\r\n      }\r\n    });\r\n\r\n    return treeViewItemsInfo;\r\n  };\r\n\r\n  /**\r\n   * Given an item id, an array of items to add, the download status and the\r\n   * lazy state, updates the item's UI Model.\r\n   */\r\n  @Method()\r\n  async loadLazyContent(\r\n    itemId: string,\r\n    model?: TreeViewModel,\r\n    downloading = false,\r\n    lazy = false\r\n  ) {\r\n    const itemToLazyLoadContent = this.#flattenedTreeModel.get(itemId).item;\r\n\r\n    // Establish that the content was lazy loaded\r\n    itemToLazyLoadContent.downloading = downloading;\r\n    itemToLazyLoadContent.lazy = lazy;\r\n\r\n    // Check if there is items to add\r\n    if (model == null) {\r\n      return;\r\n    }\r\n\r\n    // @todo What happens in the server when dropping items on a lazy node?\r\n    itemToLazyLoadContent.items = model;\r\n\r\n    this.#sortItems(itemToLazyLoadContent.items);\r\n    this.#flattenSubModel(itemToLazyLoadContent);\r\n\r\n    // Re-sync checked items\r\n    this.#scheduleCheckedItemsChange();\r\n\r\n    // Update filters\r\n    this.#scheduleFilterProcessing();\r\n\r\n    // Force re-render\r\n    forceUpdate(this);\r\n  }\r\n\r\n  /**\r\n   * Given a list of ids, removes the items and their children in the tree.\r\n   */\r\n  @Method()\r\n  async removeItems(items: string[]) {\r\n    const removeItemsResult: TreeViewRemoveItemsResult = removeTreeViewItems(\r\n      items,\r\n      this.#flattenedTreeModel,\r\n      this.#flattenedCheckboxTreeModel,\r\n      this.#selectedItems\r\n    );\r\n\r\n    if (!this.#treeHasFilters()) {\r\n      // Update selected items\r\n      if (removeItemsResult.atLeastOneSelected) {\r\n        this.#updateSelectedItems();\r\n      }\r\n\r\n      // Re-sync checked items\r\n      if (removeItemsResult.atLeastOneCheckbox) {\r\n        this.#scheduleCheckedItemsChange();\r\n      }\r\n    }\r\n\r\n    // Force re-render\r\n    if (removeItemsResult.atLeastOneElement) {\r\n      forceUpdate(this);\r\n\r\n      // Update filters\r\n      this.#scheduleFilterProcessing(\"immediate\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given an item id and the additional properties to update before and after\r\n   * reload, it reloads the items of the `itemId` node by using the\r\n   * `lazyLoadTreeItemsCallback` property.\r\n   */\r\n  @Method()\r\n  async reloadItems(\r\n    itemId: string,\r\n    beforeProperties?: Partial<TreeViewItemModel>,\r\n    afterProperties?: Partial<TreeViewItemModel>\r\n  ): Promise<boolean> {\r\n    const success = await reloadItems(\r\n      this.el,\r\n      itemId,\r\n      this.#flattenedTreeModel,\r\n      this.lazyLoadTreeItemsCallback,\r\n      (itemId, items) => this.loadLazyContent(itemId, items),\r\n      (items: string[]) => this.removeItems(items),\r\n      beforeProperties,\r\n      afterProperties\r\n    );\r\n\r\n    return success;\r\n  }\r\n\r\n  /**\r\n   * Given the path of the item (represent by a sorted array containing all ids\r\n   * from the root to the item) and the additional properties to update after,\r\n   * it displays and scrolls into the item view.\r\n   * The path can also be a string representing the id of the item to scroll\r\n   * into.\r\n   *\r\n   * When using a path, this method will fail if:\r\n   *   - The path does not start from the root element.\r\n   *   - The path contains a cycle.\r\n   *   - The path does not correspond to a valid path on the server:\r\n   *     - One of the item of the path, except for the last one, is a leaf.\r\n   *     - An item in the path does not exists on the server.\r\n   *     - The path has repeated items.\r\n   *     - And so on.\r\n   */\r\n  @Method()\r\n  async scrollIntoVisible(\r\n    path: string | string[],\r\n    afterProperties?: Partial<TreeViewItemModel>\r\n  ): Promise<boolean> {\r\n    const hasOnlyTheItemId = typeof path === \"string\";\r\n\r\n    const success = await (hasOnlyTheItemId\r\n      ? scrollIntoVisibleId(path, this.#flattenedTreeModel)\r\n      : scrollIntoVisiblePath(\r\n          this.el,\r\n          path,\r\n          this.#flattenedTreeModel,\r\n          this.#rootNode,\r\n          this.lazyLoadTreeItemsCallback\r\n        ));\r\n\r\n    if (!success) {\r\n      return false;\r\n    }\r\n    const itemId = hasOnlyTheItemId ? path : path[path.length - 1];\r\n\r\n    // Expand all parent items\r\n    let parentInfo = this.#flattenedTreeModel.get(itemId).parentItem;\r\n    while (parentInfo !== this.#rootNode) {\r\n      parentInfo.expanded = true;\r\n      parentInfo = this.#flattenedTreeModel.get(parentInfo.id).parentItem;\r\n    }\r\n\r\n    if (afterProperties) {\r\n      this.updateItemsProperties([itemId], afterProperties);\r\n    }\r\n\r\n    forceUpdate(this);\r\n\r\n    // Scroll into the itemId view, after rendering has completed\r\n    requestAnimationFrame(() => {\r\n      this.#treeRef.scrollIntoVisible(itemId);\r\n    });\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * This method is used to toggle a tree item by the tree item id/ids.\r\n   *\r\n   * @param treeItemIds An array id the tree items to be toggled.\r\n   * @param expand A boolean indicating that the tree item should be expanded or collapsed. (optional)\r\n   * @returns The modified items after the method was called.\r\n   */\r\n  @Method()\r\n  async toggleItems(\r\n    treeItemIds: string[],\r\n    expand?: boolean\r\n  ): Promise<TreeViewItemExpandedInfo[]> {\r\n    if (!treeItemIds) {\r\n      return [];\r\n    }\r\n\r\n    const modifiedTreeItems: TreeViewItemExpandedInfo[] = [];\r\n\r\n    treeItemIds.forEach(treeItemId => {\r\n      const itemInfo = this.#flattenedTreeModel.get(treeItemId).item;\r\n\r\n      if (itemInfo) {\r\n        itemInfo.expanded = expand ?? !itemInfo.expanded;\r\n\r\n        modifiedTreeItems.push({\r\n          id: itemInfo.id,\r\n          expanded: itemInfo.expanded\r\n        });\r\n      }\r\n    });\r\n    // Force re-render\r\n    forceUpdate(this);\r\n\r\n    return modifiedTreeItems;\r\n  }\r\n\r\n  /**\r\n   * Given a subset of item's properties, it updates all item UI models.\r\n   */\r\n  @Method()\r\n  async updateAllItemsProperties(properties: {\r\n    expanded?: boolean;\r\n    checked?: boolean;\r\n  }) {\r\n    [...this.#flattenedTreeModel.values()].forEach(itemUIModel => {\r\n      if (properties.expanded != null) {\r\n        itemUIModel.item.expanded = properties.expanded;\r\n      }\r\n\r\n      if (properties.checked != null) {\r\n        itemUIModel.item.checked = properties.checked;\r\n        itemUIModel.item.indeterminate = false;\r\n      }\r\n    });\r\n\r\n    // Update filters\r\n    if (properties.checked != null) {\r\n      this.#scheduleFilterProcessing();\r\n    }\r\n\r\n    forceUpdate(this);\r\n  }\r\n\r\n  /**\r\n   * Given a item list and the properties to update, it updates the properties\r\n   * of the items in the list.\r\n   */\r\n  @Method()\r\n  async updateItemsProperties(\r\n    items: string[],\r\n    properties: Partial<TreeViewItemModel>\r\n  ) {\r\n    // Set to check if there are new selected items\r\n    const newSelectedItems = new Set(this.#selectedItems);\r\n\r\n    // Map to check if there are new items with checkbox\r\n    const newCheckboxItems: Map<string, TreeViewItemModelExtended> = new Map(\r\n      this.#flattenedCheckboxTreeModel\r\n    );\r\n\r\n    items.forEach(itemId => {\r\n      updateItemProperty(\r\n        itemId,\r\n        properties,\r\n        this.#flattenedTreeModel,\r\n        newSelectedItems,\r\n        newCheckboxItems,\r\n        this.checkbox\r\n      );\r\n    });\r\n\r\n    // MultiSelection is disabled. We must select the last updated item\r\n    if (!this.multiSelection) {\r\n      this.#removeAllSelectedItemsExceptForTheLast(newSelectedItems);\r\n    }\r\n\r\n    // Update filters if necessary\r\n    if (this.#treeHasFilters()) {\r\n      this.#scheduleFilterProcessing();\r\n    } else {\r\n      this.#checkIfThereAreDifferentItemsWithCheckbox(newCheckboxItems);\r\n      this.#checkIfThereAreDifferentSelectedItems(newSelectedItems);\r\n    }\r\n\r\n    forceUpdate(this);\r\n  }\r\n\r\n  /**\r\n   * Update the information about the valid droppable zones.\r\n   * @param requestTimestamp Time where the request to the server was made. Useful to avoid having old information.\r\n   * @param newContainerId ID of the container where the drag is trying to be made.\r\n   * @param draggedItems Information about the dragged items.\r\n   * @param validDrop Current state of the droppable zone.\r\n   * @param dropType Type of drop that wants to be effected\r\n   */\r\n  @Method()\r\n  async updateValidDropZone(\r\n    requestTimestamp: number,\r\n    newContainerId: string,\r\n    draggedItems: GxDataTransferInfo[],\r\n    dropType: TreeViewDropType,\r\n    validDrop: boolean\r\n  ) {\r\n    this.#treeRef.updateValidDropZone(\r\n      requestTimestamp,\r\n      newContainerId,\r\n      draggedItems,\r\n      dropType,\r\n      validDrop\r\n    );\r\n  }\r\n\r\n  @Listen(\"checkboxChange\")\r\n  @Listen(\"checkboxToggleChange\")\r\n  onCheckboxChange(event: ChTreeViewItemCustomEvent<TreeViewItemCheckedInfo>) {\r\n    event.stopPropagation();\r\n\r\n    const detail = event.detail;\r\n    const treeItemId = detail.id;\r\n    const itemUIModel = this.#flattenedCheckboxTreeModel.get(treeItemId);\r\n\r\n    // In some cases, when the `treeModel` and `checked` properties are updated\r\n    // outside of the tree control, some events are fired with undefined references\r\n    if (!itemUIModel) {\r\n      return;\r\n    }\r\n    const itemInfo = itemUIModel.item;\r\n\r\n    itemInfo.checked = detail.checked;\r\n    itemInfo.indeterminate = detail.indeterminate;\r\n\r\n    this.#scheduleCheckedItemsChange();\r\n\r\n    // Update filters\r\n    if (this.filterType === \"checked\" || this.filterType === \"unchecked\") {\r\n      this.#scheduleFilterProcessing();\r\n    }\r\n\r\n    // Force re-render\r\n    forceUpdate(this);\r\n  }\r\n\r\n  @Listen(\"loadLazyContent\")\r\n  onLoadLazyContent(event: ChTreeViewItemCustomEvent<string>) {\r\n    if (!this.lazyLoadTreeItemsCallback) {\r\n      return;\r\n    }\r\n    event.stopPropagation();\r\n\r\n    const treeItemId = event.detail;\r\n    const promise = this.lazyLoadTreeItemsCallback(treeItemId);\r\n    event.target.downloading = true;\r\n\r\n    promise.then(result => {\r\n      this.loadLazyContent(treeItemId, result);\r\n    });\r\n  }\r\n\r\n  @Listen(\"modifyCaption\")\r\n  onModifyCaption(event: ChTreeViewItemCustomEvent<TreeViewItemNewCaption>) {\r\n    if (!this.modifyItemCaptionCallback) {\r\n      return;\r\n    }\r\n    event.stopPropagation();\r\n\r\n    const itemRef = event.target;\r\n    const itemId = event.detail.id;\r\n    const itemUIModel = this.#flattenedTreeModel.get(itemId);\r\n    const itemInfo = itemUIModel.item;\r\n    const newCaption = event.detail.caption;\r\n    const oldCaption = itemInfo.caption;\r\n\r\n    // Optimistic UI: Update the caption in the UI Model before the change is\r\n    // completed in the server\r\n    itemInfo.caption = newCaption;\r\n\r\n    // Due to performance reasons, we don't make a shallow copy of the\r\n    // treeModel to force a re-render\r\n    itemRef.caption = newCaption;\r\n\r\n    const promise = this.modifyItemCaptionCallback(itemId, newCaption);\r\n\r\n    promise.then(status => {\r\n      if (status.success) {\r\n        this.#sortItems(itemUIModel.parentItem.items);\r\n\r\n        // Update filters\r\n        this.#scheduleFilterProcessing();\r\n\r\n        // Force re-render\r\n        forceUpdate(this);\r\n      } else {\r\n        itemRef.caption = oldCaption;\r\n        itemInfo.caption = oldCaption;\r\n\r\n        // Do something with the error message\r\n      }\r\n    });\r\n  }\r\n\r\n  @Listen(\"openReference\", { capture: true })\r\n  onOpenReference(\r\n    event: ChTreeViewItemCustomEvent<TreeViewItemOpenReferenceInfo>\r\n  ) {\r\n    event.stopPropagation();\r\n    this.itemOpenReference.emit(event.detail);\r\n  }\r\n\r\n  #handleDroppableZoneEnter = (\r\n    event: ChTreeViewCustomEvent<TreeViewDropCheckInfo>\r\n  ) => {\r\n    if (!this.checkDroppableZoneCallback) {\r\n      return;\r\n    }\r\n    event.stopPropagation();\r\n\r\n    // Suppose the request is made immediately by executing the callback\r\n    const requestTimestamp = new Date().getTime();\r\n\r\n    const dropInformation = event.detail;\r\n    const promise = this.checkDroppableZoneCallback(dropInformation);\r\n\r\n    promise.then(validDrop => {\r\n      this.updateValidDropZone(\r\n        requestTimestamp,\r\n        dropInformation.newContainer.id,\r\n        dropInformation.draggedItems,\r\n        dropInformation.dropType,\r\n        validDrop\r\n      );\r\n    });\r\n  };\r\n\r\n  #handleSelectedItemsChange = (\r\n    event: ChTreeViewCustomEvent<Map<string, TreeViewItemSelectedInfo>>\r\n  ) => {\r\n    event.stopPropagation();\r\n    const itemsToProcess = new Map(event.detail);\r\n\r\n    const previousSelectedItems = this.#selectedItems;\r\n\r\n    // Remove no longer selected items\r\n    previousSelectedItems.forEach(selectedItemId => {\r\n      const itemUIModel = this.#flattenedTreeModel.get(selectedItemId).item;\r\n      const itemIsStillSelected = itemsToProcess.get(selectedItemId);\r\n\r\n      // The item does not need to be added. Remove it from the processed list\r\n      if (itemIsStillSelected) {\r\n        itemUIModel.expanded = itemIsStillSelected.expanded; // Update expanded state\r\n        itemsToProcess.delete(selectedItemId);\r\n      }\r\n      // The item must be un-selected in the UI Model\r\n      else {\r\n        itemUIModel.selected = false;\r\n        previousSelectedItems.delete(selectedItemId);\r\n      }\r\n    });\r\n\r\n    // Add new selected items\r\n    itemsToProcess.forEach((newSelectedItemInfo, itemId) => {\r\n      const newSelectedItem = this.#flattenedTreeModel.get(itemId).item;\r\n      newSelectedItem.selected = true;\r\n      newSelectedItem.expanded = newSelectedItemInfo.expanded;\r\n\r\n      previousSelectedItems.add(itemId);\r\n    });\r\n\r\n    // Queue re-render to avoid issues about synchronization the Virtual DOM\r\n    // with the real DOM\r\n    forceUpdate(this);\r\n\r\n    this.#updateSelectedItems();\r\n  };\r\n\r\n  #handleExpandedItemChange = (\r\n    event: ChTreeViewCustomEvent<TreeViewItemExpandedInfo>\r\n  ) => {\r\n    const detail = event.detail;\r\n    const itemInfo = this.#flattenedTreeModel.get(detail.id).item;\r\n    itemInfo.expanded = detail.expanded;\r\n  };\r\n\r\n  #handleItemContextmenu = (\r\n    event: ChTreeViewCustomEvent<TreeViewItemContextMenu>\r\n  ) => {\r\n    event.stopPropagation();\r\n    this.itemContextmenu.emit(event.detail);\r\n  };\r\n\r\n  #handleItemsDropped = (\r\n    event: ChTreeViewCustomEvent<TreeViewDataTransferInfo>\r\n  ) => {\r\n    const dataTransferInfo = event.detail;\r\n    const newContainer = dataTransferInfo.newContainer;\r\n    const newParentId = newContainer.id;\r\n\r\n    // Check if the parent exists in the UI Model\r\n    if (!this.#flattenedTreeModel.get(newParentId)) {\r\n      return;\r\n    }\r\n\r\n    const draggedItems: GxDataTransferInfo[] = dataTransferInfo.draggedItems;\r\n\r\n    if (draggedItems.length === 0 || !this.dropItemsCallback) {\r\n      return;\r\n    }\r\n    event.stopPropagation();\r\n\r\n    const promise = this.dropItemsCallback(dataTransferInfo);\r\n    this.waitDropProcessing = true;\r\n\r\n    promise.then(async response => {\r\n      this.dropItems(response.acceptDrop, dataTransferInfo, response.model);\r\n      this.waitDropProcessing = false;\r\n    });\r\n  };\r\n\r\n  #removeAllSelectedItemsExceptForTheLast = (\r\n    currentSelectedItems: Set<string>\r\n  ) => {\r\n    if (currentSelectedItems.size > 1) {\r\n      const selectedItemsArray = [...currentSelectedItems.values()];\r\n      const lastItemIndex = currentSelectedItems.size - 1;\r\n\r\n      // Deselect all items except the last\r\n      for (let index = 0; index < lastItemIndex; index++) {\r\n        const itemId = selectedItemsArray[index];\r\n\r\n        this.#flattenedTreeModel.get(itemId).item.selected = false;\r\n      }\r\n\r\n      // Create a new Set with only the last item\r\n      currentSelectedItems.clear();\r\n      currentSelectedItems.add(selectedItemsArray[lastItemIndex]);\r\n\r\n      this.#scheduleSelectedItemsChange();\r\n    }\r\n  };\r\n\r\n  #moveItemToNewParent =\r\n    (newParentItem: TreeViewItemModel, specificIndex?: { index: number }) =>\r\n    (dataTransferInfo: GxDataTransferInfo, index: number) => {\r\n      const itemUIModelExtended = this.#flattenedTreeModel.get(\r\n        dataTransferInfo.id\r\n      );\r\n      const item = itemUIModelExtended.item;\r\n      const oldParentItem = itemUIModelExtended.parentItem;\r\n\r\n      const oldIndex = oldParentItem.items.findIndex(el => el.id === item.id);\r\n\r\n      // Remove the UI model from the previous parent. The equality function\r\n      // must be by index, not by object reference\r\n      removeElement(oldParentItem.items, oldIndex);\r\n\r\n      // The item must be inserted in a specific position, because the dropMode\r\n      // has \"before\" and \"after\" enabled\r\n      if (specificIndex !== undefined) {\r\n        let newIndex = specificIndex.index + index;\r\n\r\n        // The item is moved in the same parent, so no new items are added\r\n        // The specificIndex must be decreased to balance the increment\r\n        if (oldParentItem.id === newParentItem.id && oldIndex < newIndex) {\r\n          newIndex--;\r\n          specificIndex.index--;\r\n        }\r\n\r\n        insertIntoIndex(newParentItem.items, item, newIndex);\r\n      }\r\n      // Add the UI Model to the new parent by pushing it at the end\r\n      else {\r\n        newParentItem.items.push(item);\r\n      }\r\n\r\n      // Reference the new parent in the item\r\n      itemUIModelExtended.parentItem = newParentItem;\r\n    };\r\n\r\n  #flattenSubModel = (model: TreeViewItemModel) => {\r\n    const items = model.items;\r\n\r\n    if (!items) {\r\n      // Make sure that subtrees don't have an undefined array\r\n      if (model.leaf !== true) {\r\n        model.items = [];\r\n      }\r\n      return;\r\n    }\r\n    this.#sortItems(items);\r\n\r\n    items.forEach(this.#flattenItemUIModel(model));\r\n  };\r\n\r\n  #flattenItemUIModel =\r\n    (parentModel: TreeViewItemModel) => (item: TreeViewItemModel) => {\r\n      this.#flattenedTreeModel.set(item.id, {\r\n        parentItem: parentModel,\r\n        item: item\r\n      });\r\n\r\n      // Add the items that have a checkbox in a separate Map\r\n      if (this.#itemHasCheckbox(item)) {\r\n        this.#flattenedCheckboxTreeModel.set(item.id, {\r\n          parentItem: parentModel,\r\n          item: item\r\n        });\r\n      }\r\n\r\n      // Make sure the properties are with their default values to avoid issues\r\n      // when reusing DOM nodes\r\n      item.expanded ??= DEFAULT_EXPANDED_VALUE;\r\n      item.indeterminate ??= DEFAULT_INDETERMINATE_VALUE;\r\n      item.lazy ??= DEFAULT_LAZY_VALUE;\r\n      item.order ??= DEFAULT_ORDER_VALUE;\r\n      item.selected ??= DEFAULT_SELECTED_VALUE;\r\n\r\n      if (item.selected) {\r\n        this.#selectedItems.add(item.id);\r\n      }\r\n\r\n      this.#flattenSubModel(item);\r\n    };\r\n\r\n  #itemHasCheckbox = (item: TreeViewItemModel) =>\r\n    itemHasCheckbox(item, this.checkbox);\r\n\r\n  #treeHasFilters = () => treeViewHasFilters(this.filterType, this.filter);\r\n\r\n  #sortItems = (model: TreeViewModel) => {\r\n    // Ensure that items are sorted if the dropMode enables it\r\n    if (this.dropMode === \"above\" && this.sortItemsCallback) {\r\n      this.sortItemsCallback(model);\r\n    }\r\n  };\r\n\r\n  #flattenModel = () => {\r\n    this.#flattenedTreeModel.clear();\r\n    this.#flattenedCheckboxTreeModel.clear();\r\n    this.#selectedItems.clear();\r\n\r\n    this.#rootNode = { id: ROOT_ID, caption: ROOT_ID, items: this.model };\r\n    this.#flattenSubModel(this.#rootNode);\r\n\r\n    // Re-sync filters\r\n    this.#scheduleFilterProcessing();\r\n\r\n    // The model was updated at runtime, so we need to update the references\r\n    // Re-sync selected items\r\n    this.#scheduleSelectedItemsChange();\r\n\r\n    // Re-sync checked items\r\n    this.#scheduleCheckedItemsChange();\r\n  };\r\n\r\n  #filterSubModel = (\r\n    item: TreeViewItemModel,\r\n    filterInfo: TreeViewFilterInfo,\r\n    currentSelectedItems: Set<string>,\r\n    currentCheckboxItems: Map<string, TreeViewItemModelExtended>\r\n  ): boolean => {\r\n    let aSubItemIsRendered = false;\r\n\r\n    // Check if a subitem is rendered\r\n    if (item.leaf !== true && item.items != null) {\r\n      let lastItemId = undefined;\r\n\r\n      item.items.forEach(subItem => {\r\n        const itemSatisfiesFilter = this.#filterSubModel(\r\n          subItem,\r\n          filterInfo,\r\n          currentSelectedItems,\r\n          currentCheckboxItems\r\n        );\r\n        aSubItemIsRendered ||= itemSatisfiesFilter;\r\n\r\n        if (itemSatisfiesFilter) {\r\n          lastItemId = subItem.id;\r\n        }\r\n      });\r\n\r\n      item.lastItemId = lastItemId;\r\n    }\r\n\r\n    // The current item is rendered if it satisfies the filter condition or a\r\n    // subitem exists that needs to be rendered\r\n    const satisfiesFilter =\r\n      aSubItemIsRendered || computeFilter(this.filterType, item, filterInfo);\r\n\r\n    item.render = satisfiesFilter; // Update item render\r\n\r\n    // Update selected and checkbox items\r\n    if (satisfiesFilter && item.id !== ROOT_ID) {\r\n      if (item.selected) {\r\n        currentSelectedItems.add(item.id);\r\n      }\r\n\r\n      if (this.#itemHasCheckbox(item)) {\r\n        const itemUIModel = this.#flattenedTreeModel.get(item.id);\r\n        currentCheckboxItems.set(item.id, itemUIModel);\r\n      }\r\n    }\r\n\r\n    return satisfiesFilter;\r\n  };\r\n\r\n  #scheduleCheckedItemsChange = () => {\r\n    this.#checkedChangeScheduled = true;\r\n  };\r\n\r\n  #scheduleSelectedItemsChange = () => {\r\n    this.#selectedChangeScheduled = true;\r\n  };\r\n\r\n  #updateSelectedItems = () => {\r\n    const selectedItemsInfo = this.#getItemsInfo([\r\n      ...this.#selectedItems.keys()\r\n    ]);\r\n    this.selectedItemsChange.emit(selectedItemsInfo);\r\n  };\r\n\r\n  #updateCheckedItems = () => {\r\n    // New copy of the checked items\r\n    const allItemsWithCheckbox: Map<string, TreeViewItemModelExtended> =\r\n      new Map(this.#flattenedCheckboxTreeModel);\r\n\r\n    // Update the checked value if not defined\r\n    allItemsWithCheckbox.forEach(itemUIModel => {\r\n      itemUIModel.item.checked ??= this.checked;\r\n    });\r\n\r\n    this.checkedItemsChange.emit(allItemsWithCheckbox);\r\n  };\r\n\r\n  #scheduleFilterProcessing = (immediateFilter?: ImmediateFilter) => {\r\n    this.#applyFilters = true;\r\n\r\n    if (immediateFilter !== undefined) {\r\n      this.#immediateFilter ??= immediateFilter;\r\n    }\r\n  };\r\n\r\n  #checkIfThereAreDifferentItemsWithCheckbox = (\r\n    newCheckboxItems: Map<string, TreeViewItemModelExtended>\r\n  ) => {\r\n    if (newCheckboxItems.size !== this.#flattenedCheckboxTreeModel.size) {\r\n      this.#checkedChangeScheduled = true;\r\n    }\r\n    // Check if the items in each Map have the same id\r\n    else {\r\n      this.#flattenedCheckboxTreeModel.forEach((_, itemId) => {\r\n        // Found a value that don't belong to the checkboxItems with filters,\r\n        // schedule checkedItemsChange\r\n        if (!newCheckboxItems.has(itemId)) {\r\n          // Schedule checkedItemsChange\r\n          this.#checkedChangeScheduled = true;\r\n        }\r\n      });\r\n    }\r\n\r\n    // The previous checkbox items will now be the selected items with filter\r\n    this.#flattenedCheckboxTreeModel = newCheckboxItems;\r\n  };\r\n\r\n  #checkIfThereAreDifferentSelectedItems = (newSelectedItems: Set<string>) => {\r\n    if (newSelectedItems.size !== this.#selectedItems.size) {\r\n      this.#selectedChangeScheduled = true;\r\n    }\r\n    // Check if the items in each Set have the same id\r\n    else {\r\n      this.#selectedItems.forEach(itemId => {\r\n        // Found a value that don't belong to the selectedItems with filters,\r\n        // deselect the item\r\n        if (!newSelectedItems.has(itemId)) {\r\n          this.#flattenedTreeModel.get(itemId).item.selected = false;\r\n\r\n          // Schedule selectedItemsChange\r\n          this.#selectedChangeScheduled = true;\r\n        }\r\n      });\r\n    }\r\n\r\n    // The previous selected items will now be the selected items with filter\r\n    this.#selectedItems = newSelectedItems;\r\n  };\r\n\r\n  #updateFilters = () => {\r\n    if (this.filterType === \"none\") {\r\n      // Check if there are more items with checkbox\r\n      const itemsWithCheckbox: Map<string, TreeViewItemModelExtended> =\r\n        new Map();\r\n\r\n      this.#flattenedTreeModel.forEach((itemUIModel, itemId) => {\r\n        if (this.#itemHasCheckbox(itemUIModel.item)) {\r\n          itemsWithCheckbox.set(itemId, itemUIModel);\r\n        }\r\n      });\r\n\r\n      this.#checkIfThereAreDifferentItemsWithCheckbox(itemsWithCheckbox);\r\n      this.#validateCheckedAndSelectedItems();\r\n\r\n      return;\r\n    }\r\n\r\n    // Remove queued filter processing\r\n    clearTimeout(this.#filterTimeout);\r\n\r\n    const processWithDebounce =\r\n      this.filterDebounce > 0 &&\r\n      (this.filterType === \"caption\" || this.filterType === \"metadata\");\r\n\r\n    const filterFunction = () => {\r\n      const currentSelectedItems: Set<string> = new Set();\r\n      const currentCheckedItems: Map<string, TreeViewItemModelExtended> =\r\n        new Map();\r\n\r\n      this.#filterSubModel(\r\n        {\r\n          id: ROOT_ID,\r\n          caption: ROOT_ID,\r\n          items: this.model\r\n        },\r\n        {\r\n          defaultCheckbox: this.checkbox,\r\n          defaultChecked: this.checked,\r\n          filter: this.filter,\r\n          filterOptions: this.filterOptions,\r\n          filterSet: this.#filterListAsSet\r\n        },\r\n        currentSelectedItems,\r\n        currentCheckedItems\r\n      );\r\n\r\n      // It validates if there are differences between the items with checkbox\r\n      // and the selected items. If there are, emit the corresponding updates.\r\n      this.#checkIfThereAreDifferentSelectedItems(currentSelectedItems);\r\n      this.#checkIfThereAreDifferentItemsWithCheckbox(currentCheckedItems);\r\n\r\n      this.#validateCheckedAndSelectedItems();\r\n    };\r\n\r\n    // Check if should filter with debounce\r\n    if (processWithDebounce && this.#immediateFilter !== \"immediate\") {\r\n      this.#filterTimeout = setTimeout(() => {\r\n        this.#immediateFilter = undefined;\r\n        filterFunction();\r\n        forceUpdate(this); // After the filter processing is completed, force a re-render\r\n      }, this.filterDebounce);\r\n    }\r\n    // No debounce\r\n    else {\r\n      this.#immediateFilter = undefined;\r\n      filterFunction();\r\n    }\r\n  };\r\n\r\n  #validateCheckedAndSelectedItems = () => {\r\n    if (this.#checkedChangeScheduled) {\r\n      this.#updateCheckedItems();\r\n      this.#checkedChangeScheduled = false;\r\n    }\r\n\r\n    if (this.#selectedChangeScheduled) {\r\n      this.#selectedChangeScheduled = false;\r\n\r\n      // Update the selected items in the ch-tree-view control\r\n      this.#updateSelectedItems();\r\n    }\r\n  };\r\n\r\n  #getSelectedItemsCallback = () => {\r\n    const selectedItemsInfo: Map<string, TreeViewItemSelectedInfo> = new Map();\r\n\r\n    this.#selectedItems.forEach(itemId => {\r\n      const itemUIModel = this.#flattenedTreeModel.get(itemId);\r\n      const itemInfo = itemUIModel.item;\r\n\r\n      selectedItemsInfo.set(itemId, {\r\n        id: itemInfo.id,\r\n        expanded: itemInfo.expanded,\r\n        metadata: itemInfo.metadata,\r\n        parentId: itemUIModel.parentItem.id\r\n      });\r\n    });\r\n\r\n    return selectedItemsInfo;\r\n  };\r\n\r\n  connectedCallback() {\r\n    this.#treeViewId ||= `ch-tree-view-render-${autoId++}`;\r\n\r\n    // Subscribe to expand/collapse changes in the ancestor nodes\r\n    subscribe(this.#treeViewId, {\r\n      getSubscriberRef: () => this.el,\r\n      observerCallback: expanded => {\r\n        this.expanded = expanded;\r\n      }\r\n    });\r\n\r\n    // Initialize the state\r\n    syncStateWithObservableAncestors(this.#treeViewId);\r\n\r\n    // Accessibility\r\n    this.el.setAttribute(\"role\", \"tree\");\r\n  }\r\n\r\n  componentWillLoad() {\r\n    this.#flattenModel();\r\n  }\r\n\r\n  componentWillRender() {\r\n    if (\r\n      !this.#selectedChangeScheduled &&\r\n      !this.#checkedChangeScheduled &&\r\n      !this.#applyFilters\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // If the filters must be applied, we must let the filters decided which\r\n    // are the selected and checked items\r\n    if (this.#applyFilters) {\r\n      this.#updateFilters();\r\n      this.#applyFilters = false;\r\n      return;\r\n    }\r\n\r\n    this.#validateCheckedAndSelectedItems();\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    removeSubscription(this.#treeViewId);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host aria-multiselectable={this.multiSelection.toString()}>\r\n        <ch-tree-view\r\n          multiSelection={this.multiSelection}\r\n          selectedItemsCallback={this.#getSelectedItemsCallback}\r\n          waitDropProcessing={this.waitDropProcessing}\r\n          onDroppableZoneEnter={this.#handleDroppableZoneEnter}\r\n          onExpandedItemChange={this.#handleExpandedItemChange}\r\n          onItemContextmenu={this.#handleItemContextmenu}\r\n          onItemsDropped={this.#handleItemsDropped}\r\n          onSelectedItemsChange={this.#handleSelectedItemsChange}\r\n          ref={el => (this.#treeRef = el)}\r\n        >\r\n          {this.model.map((itemModel, index) =>\r\n            this.renderItem(\r\n              itemModel,\r\n              this,\r\n              this.#treeHasFilters(),\r\n              this.showLines !== \"none\" && index === this.model.length - 1,\r\n              0,\r\n              this.dropMode !== \"above\" && this.dropDisabled !== true,\r\n              this.useGxRender\r\n            )\r\n          )}\r\n        </ch-tree-view>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}