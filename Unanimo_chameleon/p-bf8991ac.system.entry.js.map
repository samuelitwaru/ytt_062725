{"version":3,"names":["sliderCss","ChSliderStyle0","DEFAULT_PERCENTAGE_VALUE_WHEN_MIN_EQUALS_MAX","ChSlider","exports","_a","_accessibleNameFromExternalLabel","set","this","_lastModifiedValue","_valuePositionRAF","SyncWithRAF","_handleChange","event","stopPropagation","value","target","_this","Number","change","emit","_handleInput","__classPrivateFieldSet","__classPrivateFieldGet","perform","_updateValue","input","_ensureValueIsInBetween","minValue","maxValue","Math","min","max","_getValuePercentage","selectedValue","class_1","prototype","handleValueChange","newValue","internals","setFormValue","toString","disconnectedCallback","cancel","connectedCallback","labels","accessibleName","length","textContent","trim","render","actualMaxValue","actualValue","call","valueInPercentage","h","Host","key","class","_b","disabled","type","step","onChange","onInput","part","concat","style"],"sources":["src/components/slider/slider.scss?tag=ch-slider&encapsulation=shadow","src/components/slider/slider.tsx"],"sourcesContent":["@import \"../../common/_base\";\r\n\r\n@include input-reset();\r\n@include box-sizing();\r\n\r\n:host {\r\n  /**\r\n   * @prop --ch-slider-thumb-background-color:\r\n   * Specifies the background-color of the thumb. \r\n   * @default currentColor\r\n   */\r\n  --ch-slider-thumb-background-color: currentColor;\r\n\r\n  /**\r\n    * @prop --ch-slider-thumb-size:\r\n    * Specifies the size of the thumb. \r\n    * @default clamp(8px, 1.5em, 24px)\r\n    */\r\n  --ch-slider-thumb-size: clamp(8px, 1.5em, 24px);\r\n\r\n  /**\r\n   * @prop --ch-slider-track-block-size:\r\n   * Specifies the block size of the track. \r\n   * @default clamp(3px, 0.25em, 16px)\r\n   */\r\n  --ch-slider-track-block-size: clamp(3px, 0.25em, 16px);\r\n\r\n  /**\r\n   * @prop --ch-slider-track__selected-background-color:\r\n   * Specifies the background-color of the selected portion of the track. \r\n   * @default color-mix(in srgb, currentColor 15%, transparent)\r\n   */\r\n  --ch-slider-track__selected-background-color: color-mix(\r\n    in srgb,\r\n    currentColor 15%,\r\n    transparent\r\n  );\r\n\r\n  /**\r\n   * @prop --ch-slider-track__unselected-background-color:\r\n   * Specifies the background-color of the unselected portion of the track. \r\n   * @default color-mix(in srgb, currentColor 15%, transparent)\r\n   */\r\n  --ch-slider-track__unselected-background-color: color-mix(\r\n    in srgb,\r\n    currentColor 15%,\r\n    transparent\r\n  );\r\n\r\n  display: inline-grid;\r\n}\r\n\r\n.position-absolute-wrapper {\r\n  display: grid;\r\n  position: relative;\r\n  block-size: fit-content;\r\n}\r\n\r\n.slider {\r\n  display: grid;\r\n  block-size: var(--ch-slider-track-block-size);\r\n  cursor: pointer;\r\n\r\n  // Reset browser defaults\r\n  appearance: none;\r\n  opacity: 0;\r\n\r\n  // - - - - - - - - - - - - - - - -\r\n  //           Thumb reset\r\n  // - - - - - - - - - - - - - - - -\r\n  &::-webkit-slider-thumb {\r\n    appearance: none;\r\n    inline-size: var(--ch-slider-thumb-size);\r\n    block-size: var(--ch-slider-thumb-size);\r\n    opacity: 0;\r\n  }\r\n\r\n  &::-moz-range-thumb {\r\n    appearance: none;\r\n    inline-size: var(--ch-slider-thumb-size);\r\n    block-size: var(--ch-slider-thumb-size);\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//              Track\r\n// - - - - - - - - - - - - - - - -\r\n.track {\r\n  display: flex;\r\n  position: absolute;\r\n  inline-size: 100%;\r\n  block-size: var(--ch-slider-track-block-size);\r\n  overflow: hidden;\r\n  pointer-events: none; // Remove pointer-events to allow the hidden input to be interactive\r\n}\r\n\r\n.track__selected {\r\n  background-color: var(--ch-slider-track__selected-background-color);\r\n  inline-size: var(--slider-selected-value);\r\n  block-size: 100%;\r\n}\r\n\r\n.track__unselected {\r\n  background-color: var(--ch-slider-track__unselected-background-color);\r\n  inline-size: var(--slider-unselected-value);\r\n  block-size: 100%;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//              Thumb\r\n// - - - - - - - - - - - - - - - -\r\n.thumb {\r\n  position: absolute;\r\n  inset-block-start: 50%;\r\n  inset-inline-start: calc(\r\n    var(--slider-thumb-position) - var(--ch-slider-thumb-size) *\r\n      var(--slider-value)\r\n  );\r\n  transform: translateY(-50%);\r\n\r\n  inline-size: var(--ch-slider-thumb-size);\r\n  block-size: var(--ch-slider-thumb-size);\r\n  background-color: var(--ch-slider-thumb-background-color);\r\n  border-radius: 50%;\r\n  pointer-events: none; // Remove pointer-events to allow the hidden input to be interactive\r\n}\r\n","import {\r\n  AttachInternals,\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  Watch,\r\n  h\r\n} from \"@stencil/core\";\r\n\r\nimport { AccessibleNameComponent } from \"../../common/interfaces\";\r\nimport { SyncWithRAF } from \"../../common/sync-with-frames\";\r\n\r\nconst DEFAULT_PERCENTAGE_VALUE_WHEN_MIN_EQUALS_MAX = 0;\r\n\r\n/**\r\n * The slider control is a input where the user selects a value from within a given range.\r\n *\r\n * @part track - The track of the slider element.\r\n * @part thumb - The thumb of the slider element.\r\n *\r\n * @part track__selected - Represents the portion of the track that is selected, that is, the portion of the track that starts at the min value and goes to the current value.\r\n * @part track__unselected - Represents the portion of the track that is not selected, that is, the portion of the track that starts at the current value and goes to the max value.\r\n *\r\n * @part disabled - Present in all parts when the control is disabled (`disabled` === `true`).\r\n */\r\n@Component({\r\n  formAssociated: true,\r\n  shadow: { delegatesFocus: true },\r\n  styleUrl: \"slider.scss\",\r\n  tag: \"ch-slider\"\r\n})\r\nexport class ChSlider implements AccessibleNameComponent {\r\n  #accessibleNameFromExternalLabel: string | undefined;\r\n  #lastModifiedValue = 0;\r\n  #valuePositionRAF = new SyncWithRAF();\r\n\r\n  @AttachInternals() internals: ElementInternals;\r\n\r\n  @Element() el: HTMLChSliderElement;\r\n\r\n  /**\r\n   * Specifies a short string, typically 1 to 3 words, that authors associate\r\n   * with an element to provide users of assistive technologies with a label\r\n   * for the element.\r\n   */\r\n  @Prop() readonly accessibleName?: string;\r\n\r\n  /**\r\n   * This attribute allows you specify if the element is disabled.\r\n   * If disabled, it will not trigger any user interaction related event\r\n   * (for example, click event).\r\n   */\r\n  @Prop() readonly disabled = false;\r\n\r\n  /**\r\n   * This attribute lets you specify maximum value of the slider.\r\n   */\r\n  @Prop() readonly maxValue: number = 5;\r\n\r\n  /**\r\n   * This attribute lets you specify minimum value of the slider.\r\n   */\r\n  @Prop() readonly minValue: number = 0;\r\n\r\n  /**\r\n   * This attribute lets you indicate whether the control should display a\r\n   * bubble with the current value upon interaction.\r\n   */\r\n  @Prop() readonly showValue = false;\r\n\r\n  /**\r\n   * This attribute lets you specify the step of the slider.\r\n   *\r\n   * This attribute is useful when the values of the slider can only take some\r\n   * discrete values. For example, if valid values are `[10, 20, 30]` set the\r\n   * `minValue` to `10`, the maxValue to `30`, and the step to `10`. If the\r\n   * step is `0`, the any intermediate value is valid.\r\n   */\r\n  @Prop() readonly step: number = 1;\r\n\r\n  /**\r\n   * The value of the control.\r\n   */\r\n  @Prop({ mutable: true }) value = 0;\r\n  @Watch(\"value\")\r\n  handleValueChange(newValue: number) {\r\n    // Update form value\r\n    this.internals.setFormValue(newValue.toString());\r\n  }\r\n\r\n  /**\r\n   * The `change` event is emitted when a change to the element's value is\r\n   * committed by the user.\r\n   */\r\n  @Event() change: EventEmitter<number>;\r\n\r\n  /**\r\n   * The `input` event is fired synchronously when the value is changed.\r\n   */\r\n  @Event() input: EventEmitter<number>;\r\n\r\n  #handleChange = (event: UIEvent) => {\r\n    event.stopPropagation();\r\n    const value = (event.target as HTMLInputElement).value;\r\n\r\n    // Toggle the value property\r\n    this.value = Number(value);\r\n\r\n    this.change.emit(this.value);\r\n  };\r\n\r\n  #handleInput = (event: UIEvent) => {\r\n    event.stopPropagation();\r\n\r\n    // Update the last value modified by the user interaction\r\n    this.#lastModifiedValue = Number((event.target as HTMLInputElement).value);\r\n\r\n    this.#valuePositionRAF.perform(this.#updateValue);\r\n  };\r\n\r\n  #updateValue = () => {\r\n    this.value = this.#lastModifiedValue;\r\n    this.input.emit(this.#lastModifiedValue);\r\n  };\r\n\r\n  #ensureValueIsInBetween = (\r\n    minValue: number,\r\n    value: number,\r\n    maxValue: number\r\n  ) => Math.min(Math.max(minValue, value), maxValue);\r\n\r\n  #getValuePercentage = (\r\n    minValue: number,\r\n    value: number,\r\n    maxValue: number\r\n  ): number => {\r\n    const selectedValue = (value - minValue) / (maxValue - minValue);\r\n\r\n    return selectedValue * 100;\r\n  };\r\n\r\n  disconnectedCallback() {\r\n    this.#valuePositionRAF.cancel();\r\n  }\r\n\r\n  connectedCallback() {\r\n    // Set form value\r\n    this.internals.setFormValue(this.value.toString());\r\n\r\n    const labels = this.internals.labels;\r\n\r\n    // Get external aria-label\r\n    if (!this.accessibleName && labels?.length > 0) {\r\n      this.#accessibleNameFromExternalLabel = labels[0].textContent.trim();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const actualMaxValue = Math.max(this.minValue, this.maxValue);\r\n    const actualValue = this.#ensureValueIsInBetween(\r\n      this.minValue,\r\n      this.value,\r\n      actualMaxValue\r\n    );\r\n\r\n    const valueInPercentage =\r\n      this.minValue < actualMaxValue\r\n        ? this.#getValuePercentage(this.minValue, actualValue, actualMaxValue)\r\n        : DEFAULT_PERCENTAGE_VALUE_WHEN_MIN_EQUALS_MAX;\r\n\r\n    return (\r\n      <Host>\r\n        <div class=\"position-absolute-wrapper\">\r\n          <input\r\n            aria-label={\r\n              this.accessibleName ?? this.#accessibleNameFromExternalLabel\r\n            }\r\n            class=\"slider\"\r\n            disabled={this.disabled}\r\n            type=\"range\"\r\n            min={this.minValue}\r\n            max={actualMaxValue}\r\n            step={this.step}\r\n            value={actualValue}\r\n            onChange={this.#handleChange}\r\n            onInput={this.#handleInput}\r\n          />\r\n\r\n          <div\r\n            class=\"track\"\r\n            part={`track${this.disabled ? \" disabled\" : \"\"}`}\r\n            aria-hidden=\"true\"\r\n          >\r\n            <div\r\n              class=\"track__selected\"\r\n              part={`track__selected${this.disabled ? \" disabled\" : \"\"}`}\r\n              style={{ \"--slider-selected-value\": `${valueInPercentage}%` }}\r\n            ></div>\r\n            <div\r\n              class=\"track__unselected\"\r\n              part={`track__unselected${this.disabled ? \" disabled\" : \"\"}`}\r\n              style={{\r\n                \"--slider-unselected-value\": `${100 - valueInPercentage}%`\r\n              }}\r\n            ></div>\r\n          </div>\r\n\r\n          <div\r\n            class=\"thumb\"\r\n            part={`thumb${this.disabled ? \" disabled\" : \"\"}`}\r\n            style={{\r\n              \"--slider-thumb-position\": `${valueInPercentage}%`,\r\n              \"--slider-value\": `${valueInPercentage / 100}`\r\n            }}\r\n          ></div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}