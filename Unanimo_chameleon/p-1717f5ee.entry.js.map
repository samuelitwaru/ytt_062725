{"version":3,"names":["notificationsCss","ChNotificationsStyle0","ChNotifications","didLoad","lastNotificationID","currentNotifications","Map","handleNewNotificationsChange","newNotifications","this","addNewNotifications","handleNotificationClick","event","notification","get","detail","closeOnClick","delete","notificationsSize","handleNotificationDismiss","notifications","delayToAnimate","forEach","notificationID","Id","set","getMessages","values","getTimeToDismiss","timeType","timeToDismissNotifications","componentWillLoad","componentDidLoad","render","messages","h","Host","key","tabindex","length","undefined","role","class","position","map","Value","Class","id","toString","style","delayToAnimateNewNotifications","innerHTML"],"sources":["src/components/notifications/notifications.scss?tag=ch-notifications","src/components/notifications/notifications.tsx"],"sourcesContent":["ch-notifications {\r\n  --ch-notification-item-rtl-initial-X: 1;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 14px;\r\n  position: fixed;\r\n  inset-block-end: 86px;\r\n  width: 425px;\r\n  max-width: 75vw;\r\n\r\n  // - - - - - - - - - - - - - - - -\r\n  //     Notification's position\r\n  // - - - - - - - - - - - - - - - -\r\n  &.ch-notifications-position--bottom-end {\r\n    --ch-notification-item-initial-X: var(--ch-notification-item-rtl-initial-X);\r\n\r\n    inset-inline-end: 70px;\r\n  }\r\n\r\n  &.ch-notifications-position--bottom-start {\r\n    --ch-notification-item-initial-X: calc(\r\n      var(--ch-notification-item-rtl-initial-X) * -1\r\n    );\r\n\r\n    inset-inline-start: 70px;\r\n  }\r\n}\r\n","import { Component, Host, Listen, Prop, Watch, State, h } from \"@stencil/core\";\r\nimport { Component as ChComponent } from \"../../common/interfaces\";\r\nimport { NotificationMessageWithDelay } from \"./notifications-types\";\r\n\r\n@Component({\r\n  shadow: false,\r\n  styleUrl: \"notifications.scss\",\r\n  tag: \"ch-notifications\"\r\n})\r\nexport class ChNotifications implements ChComponent {\r\n  /**\r\n   * `true` if the componentDidLoad lifecycle method was executed\r\n   */\r\n  private didLoad = false;\r\n\r\n  private lastNotificationID = 0;\r\n\r\n  private currentNotifications = new Map<\r\n    number,\r\n    NotificationMessageWithDelay\r\n  >();\r\n\r\n  @State() notificationsSize = 0;\r\n\r\n  /**\r\n   *\r\n   */\r\n  @Prop() readonly delayToAnimateNewNotifications: number = 50;\r\n\r\n  /**\r\n   *\r\n   */\r\n  @Prop() readonly notifications: NotificationMessageWithDelay[] = [];\r\n\r\n  /**\r\n   *\r\n   */\r\n  @Prop() readonly position: \"bottom-start\" | \"bottom-end\" = \"bottom-end\";\r\n\r\n  /**\r\n   *\r\n   */\r\n  @Prop() readonly timeToDismissNotifications: number = 5000;\r\n\r\n  /**\r\n   *\r\n   */\r\n  @Prop() readonly timeType: \"Seconds\" | \"Milliseconds\" = \"Milliseconds\";\r\n\r\n  @Watch(\"notifications\")\r\n  handleNewNotificationsChange(\r\n    newNotifications: NotificationMessageWithDelay[]\r\n  ) {\r\n    // Sometimes StencilJS calls this decorator before the component did load\r\n    if (this.didLoad) {\r\n      this.addNewNotifications(newNotifications);\r\n    }\r\n  }\r\n\r\n  @Listen(\"notificationClick\")\r\n  handleNotificationClick(event: CustomEvent<number>) {\r\n    const notification = this.currentNotifications.get(event.detail);\r\n\r\n    if (!notification) {\r\n      return;\r\n    }\r\n\r\n    if (notification.closeOnClick) {\r\n      this.currentNotifications.delete(event.detail);\r\n\r\n      // Trigger render\r\n      this.notificationsSize--;\r\n    }\r\n  }\r\n\r\n  @Listen(\"notificationDismiss\")\r\n  handleNotificationDismiss(event: CustomEvent<number>) {\r\n    this.currentNotifications.delete(event.detail);\r\n\r\n    // Trigger render\r\n    this.notificationsSize--;\r\n  }\r\n\r\n  private addNewNotifications(notifications: NotificationMessageWithDelay[]) {\r\n    if (!notifications) {\r\n      return;\r\n    }\r\n\r\n    let delayToAnimate = 0;\r\n\r\n    notifications.forEach(notification => {\r\n      const notificationID = notification.Id ?? this.lastNotificationID;\r\n\r\n      // If the notification did not have an ID, increment the counter\r\n      if (!notification.Id) {\r\n        this.lastNotificationID++;\r\n      }\r\n\r\n      notification.Id = notificationID;\r\n      notification.delayToAnimate = delayToAnimate;\r\n      this.currentNotifications.set(notificationID, notification);\r\n\r\n      delayToAnimate++;\r\n    });\r\n  }\r\n\r\n  private getMessages = () => [...this.currentNotifications.values()];\r\n\r\n  private getTimeToDismiss = () =>\r\n    this.timeType === \"Seconds\"\r\n      ? this.timeToDismissNotifications * 1000\r\n      : this.timeToDismissNotifications;\r\n\r\n  componentWillLoad() {\r\n    this.addNewNotifications(this.notifications);\r\n  }\r\n\r\n  componentDidLoad() {\r\n    this.didLoad = true;\r\n  }\r\n\r\n  render() {\r\n    const messages = this.getMessages();\r\n\r\n    return (\r\n      <Host\r\n        tabindex={messages.length > 0 ? \"0\" : undefined}\r\n        role=\"alert\"\r\n        aria-atomic=\"true\"\r\n        class={`ch-notifications-position--${this.position}`}\r\n      >\r\n        {messages.map(({ Id, Value, Class, delayToAnimate }) => (\r\n          <ch-notifications-item\r\n            id={Id.toString()}\r\n            key={Id}\r\n            class={Class}\r\n            style={{\r\n              \"--delay-to-animate\": `${\r\n                delayToAnimate * this.delayToAnimateNewNotifications\r\n              }ms`\r\n            }}\r\n            time-to-dismiss={\r\n              this.getTimeToDismiss() +\r\n              delayToAnimate * this.delayToAnimateNewNotifications\r\n            }\r\n            innerHTML={Value}\r\n          ></ch-notifications-item>\r\n        ))}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"kDAAA,MAAMA,EAAmB,6hBACzB,MAAAC,EAAeD,E,MCQFE,EAAe,M,gDAaG,E,oCAK6B,G,mBAKO,G,cAKN,a,gCAKL,I,cAKE,c,CAlChDC,QAAU,MAEVC,mBAAqB,EAErBC,qBAAuB,IAAIC,IAiCnC,4BAAAC,CACEC,GAGA,GAAIC,KAAKN,QAAS,CAChBM,KAAKC,oBAAoBF,E,EAK7B,uBAAAG,CAAwBC,GACtB,MAAMC,EAAeJ,KAAKJ,qBAAqBS,IAAIF,EAAMG,QAEzD,IAAKF,EAAc,CACjB,M,CAGF,GAAIA,EAAaG,aAAc,CAC7BP,KAAKJ,qBAAqBY,OAAOL,EAAMG,QAGvCN,KAAKS,mB,EAKT,yBAAAC,CAA0BP,GACxBH,KAAKJ,qBAAqBY,OAAOL,EAAMG,QAGvCN,KAAKS,mB,CAGC,mBAAAR,CAAoBU,GAC1B,IAAKA,EAAe,CAClB,M,CAGF,IAAIC,EAAiB,EAErBD,EAAcE,SAAQT,IACpB,MAAMU,EAAiBV,EAAaW,IAAMf,KAAKL,mBAG/C,IAAKS,EAAaW,GAAI,CACpBf,KAAKL,oB,CAGPS,EAAaW,GAAKD,EAClBV,EAAaQ,eAAiBA,EAC9BZ,KAAKJ,qBAAqBoB,IAAIF,EAAgBV,GAE9CQ,GAAgB,G,CAIZK,YAAc,IAAM,IAAIjB,KAAKJ,qBAAqBsB,UAElDC,iBAAmB,IACzBnB,KAAKoB,WAAa,UACdpB,KAAKqB,2BAA6B,IAClCrB,KAAKqB,2BAEX,iBAAAC,GACEtB,KAAKC,oBAAoBD,KAAKW,c,CAGhC,gBAAAY,GACEvB,KAAKN,QAAU,I,CAGjB,MAAA8B,GACE,MAAMC,EAAWzB,KAAKiB,cAEtB,OACES,EAACC,EAAI,CAAAC,IAAA,2CACHC,SAAUJ,EAASK,OAAS,EAAI,IAAMC,UACtCC,KAAK,QAAO,cACA,OACZC,MAAO,8BAA8BjC,KAAKkC,YAEzCT,EAASU,KAAI,EAAGpB,KAAIqB,QAAOC,QAAOzB,oBACjCc,EAAA,yBACEY,GAAIvB,EAAGwB,WACPX,IAAKb,EACLkB,MAAOI,EACPG,MAAO,CACL,qBAAsB,GACpB5B,EAAiBZ,KAAKyC,oCAEzB,kBAECzC,KAAKmB,mBACLP,EAAiBZ,KAAKyC,+BAExBC,UAAWN,M"}