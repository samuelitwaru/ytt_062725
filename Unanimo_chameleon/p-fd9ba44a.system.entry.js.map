{"version":3,"names":["BLOCK_START","BLOCK_END","INLINE_START","INLINE_END","START_HALF_THRESHOLD","END_HALF_THRESHOLD","EDGE_SIZE","setProperty","element","property","value","style","concat","inlineStart","mainViewRect","rtl","left","width","inlineEnd","documentRect","right","droppableAreaMap","top","height","center","lastDroppableArea","lastViewId","handleWidgetDrag","draggableView","droppableAreaRef","event","stopPropagation","document","documentElement","getBoundingClientRect","mainView","positionX","clientX","positionY","clientY","distanceToTheLeftEdge","distanceToTheTopEdge","relativePositionX","relativePositionY","droppableArea","inBetween","viewId","droppableAreaSizes","removeDroppableAreaStyles","undefined","removeAttribute","getWidgetDropInfo","dropAreaTarget","viewIdTarget","createAndSetLeafInfo","flexibleLayoutLeaf","renderedWidgets","widgetsInfo","leafId","id","leafType","type","widget","add","set","parentLeafId","info","exportParts","selectedWidgetId","widgets","tabOrientation","tabDirection","tabPosition","tabTypeToPart","forEach","wasRendered","selectedWidget","length","closeButtonHidden","_c","dragOutsideDisabled","_d","showCaptions","_e","sortable","_f","addCustomBehavior","item","layoutSplitterParts","dragBar","part","addNewLeafToInfo","leaf","parentItem","itemsInfo","flexibleLeafExtended","leafInfo","updateFlexibleSubModels","flexibleLayoutItems","flexibleItem","items","group","flexibleItemExtended","updateFlexibleModels","flexibleLayout","ROOT_VIEW","getLeafInfo","get","flexibleLayoutCss","ChFlexibleLayoutStyle0","LEAF_SELECTOR","ESCAPE_KEY","ChFlexibleLayout","exports","_a","_draggableViews","this","_dragInfo","_viewsOutOfDroppableZoneController","_draggedViewRef","_droppableAreaRef","_layoutSplitterRef","_getLeafInfo","_this","_getAllLeafs","views","itemView","push","handleItemChange","eventInfo","__assign","detail","selectedViewItemChange","emit","handleItemClose","viewItemClose","handleDragStart","__awaiter","__classPrivateFieldSet","target","__spreadArray","el","shadowRoot","querySelectorAll","index","Promise","allSettled","map","view","getDraggableViews","draggableViewsResult","sent","draggableViewResult","status","abortController","AbortController","extendedDraggableView","__classPrivateFieldGet","RTL","isRTL","addEventListener","capture","passive","signal","tabListView","pointerEvents","pageView","_handleWidgetDragEnd","_handleWidgetDragEndKeydown","showPopover","promoteDragPreviewToTopLayer","dragBarDisabled","code","preventDefault","call","endDragPreview","abort","removeEventListener","dropInfo","viewItemReorder","hidePopover","renderTab","viewInfo","h","key","slot","class","exportparts","direction","model","selectedId","onItemClose","onItemDragStart","onSelectedItemChange","name","renderView","class_1","prototype","addSiblingView","parentGroup","siblingItem","placedInTheSibling","takeHalfTheSpaceOfTheSiblingItem","addSiblingLeaf","result","success","forceUpdate","refreshLeaf","leafRef","querySelector","removeView","itemId","removeItem","reconnectedSubtree","removeItemPageInView","viewId_1","itemId_1","forceRerender","viewRef","removePage","render","layoutModel","Host","ref","popover","flexibleLayoutRenderCss","ChFlexibleLayoutRenderStyle0","GENERATE_GUID","currentDate","Date","getTime","replace","c","randomNumber","Math","random","floor","toString","ChFlexibleLayoutRender","_b","_renderedWidgets","Set","_widgetsInfo","Map","_itemsInfo","_layoutSplitterParts","_flexibleLayoutRef","_updateFlexibleModels","layout","layoutSplitterPartsSet","values","join","_getLeafInfo_1","_handleLeafSelectedWidgetChange","selectedItemInfo","newSelectedItem","newSelectedIndex","_updateSelectedWidget","_handleLeafWidgetClose","itemCloseInfo","widgetIndex","itemIndex","widgetInfo","_checkViewStateToRemoveWidget","viewWidgets","widgetsCount","_removeWidget","skipRenderRemoval","removeElement","_deleteRenderedWidget","conserveRenderState","delete","_handleLeafWidgetReorder","reorderInfo","leafIdTarget","leafTargetInfo","widgetToMove","_handleViewItemReorderCreateView","viewTargetInfo","viewTargetUIModel","viewTargetParentInfo","newLeafToAddId","newLeafToAdd","size","viewTargetIsContainedInAGroupWithTheSameDirection","_renderWidget","widgetId","widgetRender","renders","renderId","addWrapper","class_2","modelChanged","newModel","addWidget","leafId_1","widget_1","selectWidget","leafUIModel","has","removeRenderedWidgets","itemInfo","leafInfoToRemove","nodeToRemoveUIModel","nodeToRemove","itemsOfNodeToRemove","nodeToReconnectUIModel_1","nodeToReconnect","itemToUpdateItsParent","nodeToReconnectUIModel","nodeToReconnectLeafInfo_1","widgetsToUpdateParentLeafId","widgetUIModel","removeWidget","findIndex","componentWillLoad","cssClass","onViewItemClose","onViewItemReorder","onSelectedViewItemChange"],"sources":["src/components/flexible-layout/internal/flexible-layout/utils.ts","src/components/flexible-layout/utils.ts","src/components/flexible-layout/internal/flexible-layout/flexible-layout.scss?tag=ch-flexible-layout&encapsulation=shadow","src/components/flexible-layout/internal/flexible-layout/flexible-layout.tsx","src/components/flexible-layout/flexible-layout-render.scss?tag=ch-flexible-layout-render","src/components/flexible-layout/flexible-layout-render.tsx"],"sourcesContent":["import { inBetween } from \"../../../../common/utils\";\r\nimport {\r\n  DraggableViewExtendedInfo,\r\n  DroppableArea,\r\n  WidgetDropInfo\r\n} from \"./types\";\r\n\r\n/**\r\n * [block-start, block-end, inline-start, inline-end]\r\n */\r\ntype DroppableAreaSizes = [number, number, number, number];\r\n\r\n// Custom vars\r\nconst BLOCK_START = \"--ch-flexible-layout-drop-area-block-start\";\r\nconst BLOCK_END = \"--ch-flexible-layout-drop-area-block-end\";\r\nconst INLINE_START = \"--ch-flexible-layout-drop-area-inline-start\";\r\nconst INLINE_END = \"--ch-flexible-layout-drop-area-inline-end\";\r\n\r\n/**\r\n * If the mouse position is in the interval [0%, 30%] the droppable area should\r\n * be displayed at the START position with half the size.\r\n */\r\nconst START_HALF_THRESHOLD = 30; // In percentage\r\n\r\n/**\r\n * If the mouse position is in the interval [70%, 100%] the droppable area\r\n * should be displayed at the END position with half the size.\r\n */\r\nconst END_HALF_THRESHOLD = 100 - START_HALF_THRESHOLD; // In percentage\r\n\r\nconst EDGE_SIZE = 0.5;\r\n\r\nconst setProperty = (element: HTMLElement, property: string, value: number) =>\r\n  element.style.setProperty(property, `${value}px`);\r\n\r\nconst inlineStart = (mainViewRect: DOMRect, rtl: boolean) =>\r\n  rtl ? mainViewRect.left + mainViewRect.width * EDGE_SIZE : mainViewRect.left;\r\n\r\nconst inlineEnd = (\r\n  documentRect: DOMRect,\r\n  mainViewRect: DOMRect,\r\n  rtl: boolean\r\n) =>\r\n  rtl\r\n    ? documentRect.width - mainViewRect.right\r\n    : documentRect.width - (mainViewRect.left + mainViewRect.width * EDGE_SIZE);\r\n\r\nconst droppableAreaMap: {\r\n  [key in DroppableArea]: (\r\n    documentRect: DOMRect,\r\n    mainViewRect: DOMRect,\r\n    rtl: boolean\r\n  ) => DroppableAreaSizes;\r\n} = {\r\n  \"block-start\": (documentRect, mainViewRect) => [\r\n    mainViewRect.top,\r\n    documentRect.height - (mainViewRect.top + mainViewRect.height * EDGE_SIZE),\r\n    mainViewRect.left,\r\n    documentRect.width - mainViewRect.right\r\n  ],\r\n\r\n  \"block-end\": (documentRect, mainViewRect) => [\r\n    mainViewRect.top + mainViewRect.height * EDGE_SIZE,\r\n    documentRect.height - (mainViewRect.top + mainViewRect.height),\r\n    mainViewRect.left,\r\n    documentRect.width - mainViewRect.right\r\n  ],\r\n\r\n  \"inline-start\": (documentRect, mainViewRect, rtl) => [\r\n    mainViewRect.top,\r\n    documentRect.height - (mainViewRect.top + mainViewRect.height),\r\n    inlineStart(mainViewRect, rtl),\r\n    inlineEnd(documentRect, mainViewRect, rtl)\r\n  ],\r\n\r\n  \"inline-end\": (documentRect, mainViewRect, rtl) => [\r\n    mainViewRect.top,\r\n    documentRect.height - (mainViewRect.top + mainViewRect.height),\r\n    inlineStart(mainViewRect, !rtl),\r\n    inlineEnd(documentRect, mainViewRect, !rtl)\r\n  ],\r\n\r\n  center: (documentRect, mainViewRect) => [\r\n    mainViewRect.top,\r\n    documentRect.height - (mainViewRect.top + mainViewRect.height),\r\n    mainViewRect.left,\r\n    documentRect.width - mainViewRect.right\r\n  ]\r\n};\r\n\r\nlet lastDroppableArea: DroppableArea;\r\nlet lastViewId: string;\r\n\r\nexport const handleWidgetDrag =\r\n  (\r\n    draggableView: DraggableViewExtendedInfo,\r\n    droppableAreaRef: HTMLElement,\r\n    rtl: boolean\r\n  ) =>\r\n  (event: MouseEvent) => {\r\n    event.stopPropagation(); // Prevents the remove of the droppable area\r\n\r\n    // - - - - - - - - - - - DOM read operations - - - - - - - - - - -\r\n    const documentRect = document.documentElement.getBoundingClientRect();\r\n    const mainViewRect = draggableView.mainView.getBoundingClientRect();\r\n    const positionX = event.clientX; // Mouse position X\r\n    const positionY = event.clientY; // Mouse position Y\r\n\r\n    const distanceToTheLeftEdge = rtl\r\n      ? mainViewRect.width - (positionX - mainViewRect.left)\r\n      : positionX - mainViewRect.left;\r\n    const distanceToTheTopEdge = positionY - mainViewRect.top;\r\n\r\n    const relativePositionX =\r\n      (distanceToTheLeftEdge / mainViewRect.width) * 100;\r\n    const relativePositionY =\r\n      (distanceToTheTopEdge / mainViewRect.height) * 100;\r\n\r\n    let droppableArea: DroppableArea;\r\n\r\n    // Block start (Most likely droppable area)\r\n    if (\r\n      relativePositionY <= START_HALF_THRESHOLD &&\r\n      inBetween(relativePositionY, relativePositionX, 100 - relativePositionY)\r\n    ) {\r\n      droppableArea = \"block-start\";\r\n    }\r\n\r\n    // Inline End (second most likely droppable area)\r\n    else if (\r\n      relativePositionX >= END_HALF_THRESHOLD &&\r\n      inBetween(100 - relativePositionX, relativePositionY, relativePositionX)\r\n    ) {\r\n      droppableArea = \"inline-end\";\r\n    }\r\n\r\n    // Inline Start\r\n    else if (\r\n      relativePositionX <= START_HALF_THRESHOLD &&\r\n      inBetween(relativePositionX, relativePositionY, 100 - relativePositionX)\r\n    ) {\r\n      droppableArea = \"inline-start\";\r\n    }\r\n\r\n    // Block end\r\n    else if (\r\n      relativePositionY >= END_HALF_THRESHOLD &&\r\n      inBetween(100 - relativePositionY, relativePositionX, relativePositionY)\r\n    ) {\r\n      droppableArea = \"block-end\";\r\n    }\r\n\r\n    // Center\r\n    else {\r\n      droppableArea = \"center\";\r\n    }\r\n\r\n    // If the droppable area did not change, there is no need to update the DOM\r\n    if (\r\n      lastViewId === draggableView.viewId &&\r\n      lastDroppableArea === droppableArea\r\n    ) {\r\n      return;\r\n    }\r\n    lastDroppableArea = droppableArea;\r\n    lastViewId = draggableView.viewId;\r\n\r\n    const droppableAreaSizes = droppableAreaMap[droppableArea](\r\n      documentRect,\r\n      mainViewRect,\r\n      rtl\r\n    );\r\n\r\n    // - - - - - - - - - - - DOM write operations - - - - - - - - - - -\r\n    setProperty(droppableAreaRef, BLOCK_START, droppableAreaSizes[0]);\r\n    setProperty(droppableAreaRef, BLOCK_END, droppableAreaSizes[1]);\r\n\r\n    setProperty(droppableAreaRef, INLINE_START, droppableAreaSizes[2]);\r\n    setProperty(droppableAreaRef, INLINE_END, droppableAreaSizes[3]);\r\n  };\r\n\r\nexport const removeDroppableAreaStyles = (droppableAreaRef: HTMLElement) => {\r\n  lastDroppableArea = undefined;\r\n  lastViewId = undefined;\r\n  droppableAreaRef.removeAttribute(\"style\");\r\n};\r\n\r\nexport const getWidgetDropInfo = (): WidgetDropInfo | undefined =>\r\n  lastDroppableArea === undefined\r\n    ? undefined\r\n    : { dropAreaTarget: lastDroppableArea, viewIdTarget: lastViewId };\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { tabTypeToPart } from \"../list/utils\";\r\nimport {\r\n  FlexibleLayoutModel,\r\n  FlexibleLayoutGroupModel,\r\n  FlexibleLayoutItemModel,\r\n  FlexibleLayoutItemExtended,\r\n  FlexibleLayoutLeafModel,\r\n  FlexibleLayoutLeafInfo,\r\n  FlexibleLayoutLeafType,\r\n  FlexibleLayoutWidgetExtended\r\n} from \"./internal/flexible-layout/types\";\r\nimport { ROOT_VIEW } from \"../../common/utils\";\r\n\r\n// Aliases\r\ntype ItemExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutItemModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\ntype LeafExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutLeafModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\ntype GroupExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutGroupModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\nexport const createAndSetLeafInfo = (\r\n  flexibleLayoutLeaf: FlexibleLayoutLeafModel,\r\n  renderedWidgets: Set<string>,\r\n  widgetsInfo: Map<string, FlexibleLayoutWidgetExtended>\r\n): FlexibleLayoutLeafInfo<FlexibleLayoutLeafType> => {\r\n  const leafId = flexibleLayoutLeaf.id;\r\n  const leafType = flexibleLayoutLeaf.type;\r\n\r\n  if (leafType === \"single-content\") {\r\n    const widget = flexibleLayoutLeaf.widget;\r\n\r\n    // Mark the widget as rendered\r\n    renderedWidgets.add(widget.id);\r\n\r\n    // Store the widget info\r\n    widgetsInfo.set(leafId, { parentLeafId: leafId, info: widget });\r\n\r\n    return {\r\n      id: leafId,\r\n      type: leafType,\r\n      exportParts: \"\",\r\n      widget: widget\r\n    };\r\n  }\r\n\r\n  let selectedWidgetId = flexibleLayoutLeaf.selectedWidgetId;\r\n  const widgets = flexibleLayoutLeaf.widgets;\r\n  const tabOrientation = flexibleLayoutLeaf.tabDirection;\r\n  const tabPosition = flexibleLayoutLeaf.tabPosition;\r\n\r\n  const exportParts =\r\n    tabTypeToPart[\r\n      `${tabOrientation}-${\r\n        tabPosition ?? \"start\"\r\n      }` as keyof typeof tabTypeToPart\r\n    ](widgets);\r\n\r\n  widgets.forEach(widget => {\r\n    if (widget.wasRendered || selectedWidgetId === widget.id) {\r\n      // Ensure proper initialization\r\n      widget.wasRendered = true;\r\n\r\n      renderedWidgets.add(widget.id);\r\n    }\r\n\r\n    // Store the widget info\r\n    widgetsInfo.set(widget.id, { parentLeafId: leafId, info: widget });\r\n  });\r\n\r\n  // If there is no widget selected by default, select one\r\n  if (selectedWidgetId == null) {\r\n    const selectedWidget =\r\n      widgets[tabOrientation === \"block\" ? widgets.length - 1 : 0];\r\n    selectedWidgetId = selectedWidget.id;\r\n    selectedWidget.wasRendered = true;\r\n\r\n    // Mark the widget as rendered\r\n    renderedWidgets.add(selectedWidgetId);\r\n  }\r\n\r\n  return {\r\n    id: leafId,\r\n    exportParts,\r\n    closeButtonHidden: flexibleLayoutLeaf.closeButtonHidden ?? false,\r\n    dragOutsideDisabled: flexibleLayoutLeaf.dragOutsideDisabled ?? false,\r\n    selectedWidgetId: selectedWidgetId,\r\n    showCaptions: flexibleLayoutLeaf.showCaptions ?? true,\r\n    sortable: flexibleLayoutLeaf.sortable ?? true,\r\n    tabDirection: tabOrientation,\r\n    tabPosition: flexibleLayoutLeaf.tabPosition,\r\n    type: leafType,\r\n    widgets: widgets\r\n  };\r\n};\r\n\r\nconst addCustomBehavior = (\r\n  item: FlexibleLayoutItemModel,\r\n  layoutSplitterParts: Set<string>\r\n) => {\r\n  if (item.dragBar?.part) {\r\n    layoutSplitterParts.add(item.dragBar?.part);\r\n  }\r\n};\r\n\r\nexport const addNewLeafToInfo = (\r\n  leaf: FlexibleLayoutLeafModel,\r\n  parentItem: FlexibleLayoutGroupModel,\r\n  itemsInfo: Map<string, ItemExtended>,\r\n  renderedWidgets: Set<string>,\r\n  widgetsInfo: Map<string, FlexibleLayoutWidgetExtended>\r\n) => {\r\n  const flexibleLeafExtended: LeafExtended = {\r\n    item: leaf,\r\n    parentItem: parentItem,\r\n    leafInfo: createAndSetLeafInfo(leaf, renderedWidgets, widgetsInfo)\r\n  };\r\n\r\n  itemsInfo.set(leaf.id, flexibleLeafExtended);\r\n};\r\n\r\nconst updateFlexibleSubModels = (\r\n  flexibleLayoutItems: FlexibleLayoutItemModel[],\r\n  itemsInfo: Map<string, ItemExtended>,\r\n  layoutSplitterParts: Set<string>,\r\n  renderedWidgets: Set<string>,\r\n  widgetsInfo: Map<string, FlexibleLayoutWidgetExtended>,\r\n  parentItem: FlexibleLayoutGroupModel\r\n) => {\r\n  flexibleLayoutItems.forEach(flexibleItem => {\r\n    // Group\r\n    if ((flexibleItem as FlexibleLayoutGroupModel).items != null) {\r\n      const group = flexibleItem as FlexibleLayoutGroupModel;\r\n\r\n      const flexibleItemExtended: GroupExtended = {\r\n        item: group,\r\n        parentItem: parentItem\r\n      };\r\n      itemsInfo.set(group.id, flexibleItemExtended);\r\n\r\n      layoutSplitterParts.add(group.id);\r\n\r\n      updateFlexibleSubModels(\r\n        group.items, // Subitems\r\n        itemsInfo,\r\n        layoutSplitterParts,\r\n        renderedWidgets,\r\n        widgetsInfo,\r\n        group\r\n      );\r\n    }\r\n    // Leaf\r\n    else {\r\n      addNewLeafToInfo(\r\n        flexibleItem as FlexibleLayoutLeafModel,\r\n        parentItem,\r\n        itemsInfo,\r\n        renderedWidgets,\r\n        widgetsInfo\r\n      );\r\n    }\r\n\r\n    // Custom behaviors\r\n    addCustomBehavior(flexibleItem, layoutSplitterParts);\r\n  });\r\n};\r\n\r\nexport const updateFlexibleModels = (\r\n  flexibleLayout: FlexibleLayoutModel,\r\n  itemsInfo: Map<string, ItemExtended>,\r\n  layoutSplitterParts: Set<string>,\r\n  renderedWidgets: Set<string>,\r\n  widgetsInfo: Map<string, FlexibleLayoutWidgetExtended>\r\n) =>\r\n  updateFlexibleSubModels(\r\n    flexibleLayout.items,\r\n    itemsInfo,\r\n    layoutSplitterParts,\r\n    renderedWidgets,\r\n    widgetsInfo,\r\n    ROOT_VIEW // Root item\r\n  );\r\n\r\nexport const getLeafInfo = (\r\n  itemsInfo: Map<string, ItemExtended>,\r\n  leafId: string\r\n): FlexibleLayoutLeafInfo<FlexibleLayoutLeafType> =>\r\n  (itemsInfo.get(leafId) as LeafExtended).leafInfo;\r\n",":host {\r\n  display: contents;\r\n}\r\n\r\n.droppable-area {\r\n  // Reset popover's browser defaults\r\n  width: auto;\r\n  height: auto;\r\n  padding: 0;\r\n  margin: 0;\r\n  border: unset;\r\n  color: unset;\r\n\r\n  inset-block: var(--ch-flexible-layout-drop-area-block-start)\r\n    var(--ch-flexible-layout-drop-area-block-end);\r\n\r\n  left: var(--ch-flexible-layout-drop-area-inline-start);\r\n  right: var(--ch-flexible-layout-drop-area-inline-end);\r\n\r\n  background-color: color-mix(in srgb, currentColor 15%, transparent);\r\n\r\n  transition: inset 150ms ease-in-out;\r\n  pointer-events: none; // Avoid the capture of pointer events\r\n}\r\n\r\n.ch-list-inline--end {\r\n  grid-template-columns: 1fr max-content;\r\n}\r\n\r\n.ch-list-block--end {\r\n  grid-template-rows: 1fr max-content;\r\n}\r\n\r\n// Change the visual order, but no the order in the HTML\r\n.ch-list-inline--end::part(tab-list),\r\n.ch-list-block--end::part(tab-list) {\r\n  order: 1;\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Method,\r\n  Prop,\r\n  State,\r\n  forceUpdate,\r\n  h\r\n} from \"@stencil/core\";\r\nimport {\r\n  DraggableView,\r\n  DraggableViewExtendedInfo,\r\n  FlexibleLayoutModel,\r\n  FlexibleLayoutItemModel,\r\n  FlexibleLayoutItemExtended,\r\n  FlexibleLayoutLeafModel,\r\n  FlexibleLayoutLeafInfo,\r\n  FlexibleLayoutLeafType,\r\n  FlexibleLayoutViewRemoveResult,\r\n  ViewItemCloseInfo,\r\n  ViewSelectedItemInfo,\r\n  WidgetDragInfo,\r\n  WidgetReorderInfo\r\n} from \"./types\";\r\n\r\n// import { mouseEventModifierKey } from \"../../common/helpers\";\r\n\r\nimport { ListItemCloseInfo, ListSelectedItemInfo } from \"../../../list/types\";\r\nimport { ChListCustomEvent } from \"../../../../components\";\r\nimport {\r\n  getWidgetDropInfo,\r\n  handleWidgetDrag,\r\n  removeDroppableAreaStyles\r\n} from \"./utils\";\r\nimport { getLeafInfo } from \"../../utils\";\r\nimport { isRTL } from \"../../../../common/utils\";\r\n\r\nconst LEAF_SELECTOR = (id: string) => `[id=\"${id}\"]`;\r\n\r\n// Keys\r\nconst ESCAPE_KEY = \"Escape\";\r\n// const KEY_B = \"KeyB\";\r\n\r\n@Component({\r\n  shadow: true,\r\n  styleUrl: \"flexible-layout.scss\",\r\n  tag: \"ch-flexible-layout\"\r\n})\r\nexport class ChFlexibleLayout {\r\n  #draggableViews: DraggableViewExtendedInfo[];\r\n\r\n  #dragInfo: WidgetDragInfo;\r\n  #viewsOutOfDroppableZoneController: AbortController; // Allocated at runtime to reduce memory usage\r\n\r\n  // Refs\r\n  #draggedViewRef: DraggableView;\r\n  #droppableAreaRef: HTMLDivElement;\r\n  #layoutSplitterRef: HTMLChLayoutSplitterElement;\r\n\r\n  @Element() el: HTMLChFlexibleLayoutElement;\r\n\r\n  @State() dragBarDisabled = false;\r\n\r\n  /**\r\n   * Specifies the information of each view displayed.\r\n   */\r\n  @Prop() readonly itemsInfo: Map<\r\n    string,\r\n    FlexibleLayoutItemExtended<FlexibleLayoutItemModel, FlexibleLayoutLeafType>\r\n  >;\r\n\r\n  /**\r\n   * Specifies additional parts to export.\r\n   */\r\n  @Prop() readonly layoutSplitterParts: string;\r\n\r\n  /**\r\n   * Specifies the distribution of the items in the flexible layout.\r\n   */\r\n  @Prop() readonly model: FlexibleLayoutModel;\r\n\r\n  /**\r\n   * Fired when a item of a view request to be closed.\r\n   */\r\n  @Event() viewItemClose: EventEmitter<ViewItemCloseInfo>;\r\n\r\n  /**\r\n   * Fired when the selected item change.\r\n   */\r\n  @Event() selectedViewItemChange: EventEmitter<ViewSelectedItemInfo>;\r\n\r\n  /**\r\n   * Fired when a widget is dragged and dropped into a view.\r\n   */\r\n  @Event() viewItemReorder: EventEmitter<WidgetReorderInfo>;\r\n\r\n  /**\r\n   *\r\n   */\r\n  @Method()\r\n  async addSiblingView(\r\n    parentGroup: string,\r\n    siblingItem: string,\r\n    placedInTheSibling: \"before\" | \"after\",\r\n    viewInfo: FlexibleLayoutLeafModel,\r\n    takeHalfTheSpaceOfTheSiblingItem: boolean\r\n  ): Promise<boolean> {\r\n    const result = await this.#layoutSplitterRef.addSiblingLeaf(\r\n      parentGroup,\r\n      siblingItem,\r\n      placedInTheSibling,\r\n      viewInfo,\r\n      takeHalfTheSpaceOfTheSiblingItem\r\n    );\r\n\r\n    if (result.success) {\r\n      // Queue re-renders\r\n      forceUpdate(this);\r\n    }\r\n\r\n    return result.success;\r\n  }\r\n\r\n  /**\r\n   * Schedules a new render for a leaf even if no state changed.\r\n   */\r\n  @Method()\r\n  async refreshLeaf(leafId: string) {\r\n    const leafRef = this.el.shadowRoot.querySelector(LEAF_SELECTOR(leafId));\r\n\r\n    if (!leafRef) {\r\n      return;\r\n    }\r\n\r\n    forceUpdate(leafRef);\r\n  }\r\n\r\n  /**\r\n   * Removes the view that is identified by the given ID.\r\n   * The layout is rearranged depending on the state of the removed view.\r\n   */\r\n  @Method()\r\n  async removeView(itemId: string): Promise<FlexibleLayoutViewRemoveResult> {\r\n    const result = await this.#layoutSplitterRef.removeItem(itemId);\r\n\r\n    if (result.success) {\r\n      // Queue re-renders\r\n      forceUpdate(this);\r\n    }\r\n\r\n    return {\r\n      success: result.success,\r\n      reconnectedSubtree: result.reconnectedSubtree\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Given the view ID and the item id, remove the page of the item from the view.\r\n   */\r\n  @Method()\r\n  async removeItemPageInView(\r\n    viewId: string,\r\n    itemId: string,\r\n    forceRerender = true\r\n  ) {\r\n    const viewInfo = this.#getLeafInfo(viewId);\r\n    if (!viewInfo) {\r\n      return;\r\n    }\r\n\r\n    const viewRef = this.el.shadowRoot.querySelector(\r\n      `ch-list[id='${viewInfo.id}']`\r\n    ) as HTMLChListElement;\r\n    await viewRef.removePage(itemId, forceRerender);\r\n  }\r\n\r\n  #getLeafInfo = (\r\n    leafId: string\r\n  ): FlexibleLayoutLeafInfo<FlexibleLayoutLeafType> =>\r\n    getLeafInfo(this.itemsInfo, leafId);\r\n\r\n  #getAllLeafs = (): FlexibleLayoutLeafInfo<FlexibleLayoutLeafType>[] => {\r\n    const views: FlexibleLayoutLeafInfo<FlexibleLayoutLeafType>[] = [];\r\n\r\n    this.itemsInfo.forEach(item => {\r\n      const itemView = (\r\n        item as FlexibleLayoutItemExtended<\r\n          FlexibleLayoutLeafModel,\r\n          FlexibleLayoutLeafType\r\n        >\r\n      ).leafInfo;\r\n\r\n      if (itemView != null) {\r\n        views.push(itemView);\r\n      }\r\n    });\r\n\r\n    return views;\r\n  };\r\n\r\n  // @Listen(\"keydown\", { target: \"document\" })\r\n  // handleKeyDownEvent(event: KeyboardEvent) {\r\n  // if (\r\n  //   !mouseEventModifierKey(event) ||\r\n  //   event.code !== KEY_B ||\r\n  //   this.layout.inlineStart == null\r\n  // ) {\r\n  //   return;\r\n  // }\r\n  // event.stopPropagation();\r\n  // event.preventDefault();\r\n\r\n  // this.layout.inlineStart.expanded = !(\r\n  //   this.layout.inlineStart.expanded ?? true\r\n  // );\r\n  //   forceUpdate(this);\r\n  // }\r\n\r\n  // private handleMainGroupExpand = () => {\r\n  //   // if (this.layout.inlineStart) {\r\n  //   //   this.layout.inlineStart.expanded = false;\r\n  //   // }\r\n\r\n  //   // if (this.layout.inlineEnd) {\r\n  //   //   this.layout.inlineEnd.expanded = false;\r\n  //   // }\r\n\r\n  //   // if (this.layout.blockEnd) {\r\n  //   //   this.layout.blockEnd.expanded = false;\r\n  //   // }\r\n\r\n  //   forceUpdate(this);\r\n  // };\r\n\r\n  private handleItemChange =\r\n    (viewId: string) => (event: ChListCustomEvent<ListSelectedItemInfo>) => {\r\n      event.stopPropagation();\r\n\r\n      // Add the view id to properly update the render\r\n      const eventInfo: ViewSelectedItemInfo = {\r\n        ...event.detail,\r\n        viewId: viewId\r\n      };\r\n\r\n      this.selectedViewItemChange.emit(eventInfo);\r\n    };\r\n\r\n  private handleItemClose =\r\n    (viewId: string) => (event: ChListCustomEvent<ListItemCloseInfo>) => {\r\n      event.stopPropagation();\r\n\r\n      // Add the view id to properly update the render\r\n      const eventInfo: ViewItemCloseInfo = {\r\n        ...event.detail,\r\n        viewId: viewId\r\n      };\r\n\r\n      this.viewItemClose.emit(eventInfo);\r\n    };\r\n\r\n  private handleDragStart =\r\n    (viewId: string) => async (event: ChListCustomEvent<number>) => {\r\n      event.stopPropagation();\r\n\r\n      // We MUST store the reference before the Promise.allSettle, otherwise\r\n      // the event target will be the flexible-layout control\r\n      this.#draggedViewRef = event.target;\r\n\r\n      const views = [...this.el.shadowRoot.querySelectorAll(\"ch-list\")];\r\n\r\n      this.#dragInfo = {\r\n        index: event.detail,\r\n        viewId: viewId\r\n      };\r\n\r\n      // Get all draggable views\r\n      const draggableViewsResult = await Promise.allSettled(\r\n        views.map(view => view.getDraggableViews())\r\n      );\r\n\r\n      // Allocate memory\r\n      this.#draggableViews = [];\r\n\r\n      // Add handlers to manage droppable areas\r\n      draggableViewsResult.forEach((draggableViewResult, index) => {\r\n        if (draggableViewResult.status === \"fulfilled\") {\r\n          const draggableView = draggableViewResult.value;\r\n          const abortController = new AbortController(); // Necessary to remove the event listener\r\n\r\n          const extendedDraggableView = {\r\n            ...draggableView,\r\n            viewId: views[index].id, // All views have an id in the DOM\r\n            abortController: abortController\r\n          };\r\n\r\n          this.#draggableViews.push(extendedDraggableView);\r\n\r\n          const RTL = isRTL();\r\n\r\n          draggableView.mainView.addEventListener(\r\n            \"mousemove\",\r\n            handleWidgetDrag(\r\n              extendedDraggableView,\r\n              this.#droppableAreaRef,\r\n              RTL\r\n            ),\r\n            { capture: true, passive: true, signal: abortController.signal }\r\n          );\r\n\r\n          // Remove pointer events to not interfere on the mousemove event\r\n          extendedDraggableView.tabListView.style.pointerEvents = \"none\";\r\n          extendedDraggableView.pageView.style.pointerEvents = \"none\";\r\n        }\r\n      });\r\n\r\n      document.addEventListener(\"mouseup\", this.#handleWidgetDragEnd, {\r\n        passive: true\r\n      });\r\n      document.addEventListener(\"keydown\", this.#handleWidgetDragEndKeydown, {\r\n        passive: true\r\n      });\r\n\r\n      // Removes view when they are out of a droppable area\r\n      this.#viewsOutOfDroppableZoneController = new AbortController();\r\n      document.addEventListener(\r\n        \"mousemove\",\r\n        () => removeDroppableAreaStyles(this.#droppableAreaRef),\r\n        {\r\n          passive: true,\r\n          signal: this.#viewsOutOfDroppableZoneController.signal\r\n        }\r\n      );\r\n\r\n      // Show droppable area\r\n      this.#droppableAreaRef.showPopover(); // Layer 1\r\n\r\n      // After that, promote the drag preview to the second layer\r\n      this.#draggedViewRef.promoteDragPreviewToTopLayer(); // Layer 2\r\n\r\n      // Disable drag bars in layout-splitter to improve the drag experience\r\n      this.dragBarDisabled = true;\r\n    };\r\n\r\n  #handleWidgetDragEndKeydown = (event: KeyboardEvent) => {\r\n    if (event.code !== ESCAPE_KEY) {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n\r\n    // Cancels the drop by removing the drop info\r\n    removeDroppableAreaStyles(this.#droppableAreaRef);\r\n\r\n    this.#handleWidgetDragEnd();\r\n    this.#draggedViewRef.endDragPreview();\r\n  };\r\n\r\n  #handleWidgetDragEnd = () => {\r\n    // Remove mousemove handlers\r\n    this.#draggableViews.forEach(draggableView => {\r\n      draggableView.abortController.abort();\r\n\r\n      // Reset pointer events\r\n      draggableView.tabListView.style.pointerEvents = null;\r\n      draggableView.pageView.style.pointerEvents = null;\r\n    });\r\n\r\n    // Remove mouseup and keydown handlers\r\n    document.removeEventListener(\"mouseup\", this.#handleWidgetDragEnd);\r\n    document.removeEventListener(\"keydown\", this.#handleWidgetDragEndKeydown);\r\n    this.#viewsOutOfDroppableZoneController.abort();\r\n\r\n    // Check if must update the view due to a drop\r\n    const dropInfo = getWidgetDropInfo();\r\n\r\n    if (dropInfo) {\r\n      this.viewItemReorder.emit({ ...this.#dragInfo, ...dropInfo });\r\n    }\r\n\r\n    // Hide droppable area\r\n    this.#droppableAreaRef.hidePopover();\r\n    removeDroppableAreaStyles(this.#droppableAreaRef);\r\n\r\n    // Free the memory\r\n    this.#draggableViews = undefined;\r\n    this.#dragInfo = undefined;\r\n\r\n    // Re-enable drag bars\r\n    this.dragBarDisabled = false;\r\n  };\r\n\r\n  private renderTab = (viewInfo: FlexibleLayoutLeafInfo<\"tabbed\">) => (\r\n    <ch-list\r\n      id={viewInfo.id}\r\n      key={viewInfo.id}\r\n      slot={viewInfo.id}\r\n      class={{\r\n        [`ch-list-${viewInfo.tabDirection}--end`]:\r\n          viewInfo.tabPosition === \"end\"\r\n      }}\r\n      part={`leaf ${viewInfo.tabDirection} ${viewInfo.tabPosition ?? \"start\"} ${\r\n        viewInfo.id\r\n      }`}\r\n      exportparts={viewInfo.exportParts}\r\n      closeButtonHidden={viewInfo.closeButtonHidden}\r\n      dragOutsideDisabled={viewInfo.dragOutsideDisabled}\r\n      direction={viewInfo.tabDirection}\r\n      model={viewInfo.widgets}\r\n      selectedId={viewInfo.selectedWidgetId}\r\n      showCaptions={viewInfo.showCaptions}\r\n      sortable={viewInfo.sortable}\r\n      // onExpandMainGroup={tabType === \"main\" ? this.handleMainGroupExpand : null}\r\n      onItemClose={this.handleItemClose(viewInfo.id)}\r\n      onItemDragStart={this.handleDragStart(viewInfo.id)}\r\n      onSelectedItemChange={this.handleItemChange(viewInfo.id)}\r\n    >\r\n      {viewInfo.widgets.map(\r\n        widget =>\r\n          widget.wasRendered && <slot name={widget.id} slot={widget.id} />\r\n      )}\r\n    </ch-list>\r\n  );\r\n\r\n  private renderView = <T extends FlexibleLayoutLeafType>(\r\n    leaf: FlexibleLayoutLeafInfo<T>\r\n  ) =>\r\n    leaf.type === \"single-content\" ? (\r\n      <slot key={leaf.id} slot={leaf.id} name={leaf.id} />\r\n    ) : (\r\n      this.renderTab(leaf)\r\n    );\r\n\r\n  render() {\r\n    const layoutModel = this.model;\r\n\r\n    if (layoutModel == null) {\r\n      return \"\";\r\n    }\r\n\r\n    return (\r\n      <Host>\r\n        <ch-layout-splitter\r\n          dragBarDisabled={this.dragBarDisabled}\r\n          model={layoutModel}\r\n          exportparts={\"bar,\" + this.layoutSplitterParts}\r\n          ref={el => (this.#layoutSplitterRef = el)}\r\n        >\r\n          {this.#getAllLeafs().map(this.renderView)}\r\n        </ch-layout-splitter>\r\n\r\n        <div\r\n          aria-hidden=\"true\"\r\n          class=\"droppable-area\"\r\n          part=\"droppable-area\"\r\n          popover=\"manual\"\r\n          ref={el => (this.#droppableAreaRef = el)}\r\n        ></div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","ch-flexible-layout-render,\r\n.ch-flexible-layout-render-slot {\r\n  display: contents;\r\n}\r\n","import { Component, Method, Prop, Watch, forceUpdate, h } from \"@stencil/core\";\r\nimport {\r\n  FlexibleLayoutModel,\r\n  FlexibleLayoutItemModel,\r\n  FlexibleLayoutItemExtended,\r\n  FlexibleLayoutLeafModel,\r\n  FlexibleLayoutRenders,\r\n  FlexibleLayoutLeafInfo,\r\n  ViewItemCloseInfo,\r\n  ViewSelectedItemInfo,\r\n  WidgetReorderInfo,\r\n  FlexibleLayoutViewRemoveResult,\r\n  FlexibleLayoutGroupModel,\r\n  DroppableArea,\r\n  FlexibleLayoutWidget,\r\n  FlexibleLayoutLeafType,\r\n  FlexibleLayoutWidgetExtended\r\n} from \"./internal/flexible-layout/types\";\r\nimport { ChFlexibleLayoutCustomEvent } from \"../../components\";\r\nimport { removeElement } from \"../../common/array\";\r\nimport { addNewLeafToInfo, getLeafInfo, updateFlexibleModels } from \"./utils\";\r\n\r\n// Aliases\r\ntype ItemExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutItemModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\ntype LeafExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutLeafModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\ntype GroupExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutGroupModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\nconst GENERATE_GUID = () => {\r\n  let currentDate = new Date().getTime();\r\n\r\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, c => {\r\n    let randomNumber = Math.random() * 16; // random number in range 0 to 16\r\n    randomNumber = (currentDate + randomNumber) % 16 | 0;\r\n    currentDate = Math.floor(currentDate / 16);\r\n\r\n    return (c === \"x\" ? randomNumber : (randomNumber & 0x3) | 0x8).toString(16);\r\n  });\r\n};\r\n\r\n@Component({\r\n  shadow: false,\r\n  styleUrl: \"flexible-layout-render.scss\",\r\n  tag: \"ch-flexible-layout-render\"\r\n})\r\nexport class ChFlexibleLayoutRender {\r\n  /**\r\n   * This Set provides optimizations to not render items that were never\r\n   * shown on the screen.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #renderedWidgets: Set<string> = new Set();\r\n\r\n  #widgetsInfo: Map<string, FlexibleLayoutWidgetExtended> = new Map();\r\n\r\n  #itemsInfo: Map<string, ItemExtended> = new Map();\r\n\r\n  #layoutSplitterParts = \"\";\r\n\r\n  // Refs\r\n  #flexibleLayoutRef: HTMLChFlexibleLayoutElement;\r\n\r\n  /**\r\n   * A CSS class to set as the `ch-flexible-layout` element class.\r\n   */\r\n  @Prop() readonly cssClass: string = \"flexible-layout\";\r\n\r\n  /**\r\n   * Specifies the distribution of the items in the flexible layout.\r\n   */\r\n  @Prop() readonly model: FlexibleLayoutModel;\r\n  @Watch(\"model\")\r\n  modelChanged(newModel: FlexibleLayoutModel) {\r\n    this.#updateFlexibleModels(newModel);\r\n  }\r\n\r\n  /**\r\n   * Specifies the distribution of the items in the flexible layout.\r\n   */\r\n  @Prop() readonly renders: FlexibleLayoutRenders;\r\n\r\n  /**\r\n   * Add a view with widgets to render. The view will take the half space of\r\n   * the sibling view that its added with.\r\n   */\r\n  @Method()\r\n  async addSiblingView(\r\n    parentGroup: string,\r\n    siblingItem: string,\r\n    placedInTheSibling: \"before\" | \"after\",\r\n    viewInfo: FlexibleLayoutLeafModel,\r\n    takeHalfTheSpaceOfTheSiblingItem: boolean\r\n  ): Promise<boolean> {\r\n    const success = await this.#flexibleLayoutRef.addSiblingView(\r\n      parentGroup,\r\n      siblingItem,\r\n      placedInTheSibling,\r\n      viewInfo,\r\n      takeHalfTheSpaceOfTheSiblingItem\r\n    );\r\n\r\n    if (!success) {\r\n      return false;\r\n    }\r\n\r\n    addNewLeafToInfo(\r\n      viewInfo,\r\n      this.#itemsInfo.get(parentGroup).item as FlexibleLayoutGroupModel,\r\n      this.#itemsInfo,\r\n      this.#renderedWidgets,\r\n      this.#widgetsInfo\r\n    );\r\n\r\n    // Queue re-render\r\n    forceUpdate(this);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Add a widget in a `\"tabbed\"` type leaf.\r\n   * Only works if the parent leaf is `\"tabbed\"` type.\r\n   * If a widget with the same ID already exists, this method has not effect.\r\n   *\r\n   * To add a widget in a `\"single-content\"` type leaf, use the\r\n   * `addSiblingView` method.\r\n   */\r\n  @Method()\r\n  async addWidget(\r\n    leafId: string,\r\n    widget: FlexibleLayoutWidget,\r\n    selectWidget = true\r\n  ) {\r\n    const leafUIModel = this.#itemsInfo.get(leafId) as LeafExtended;\r\n\r\n    if (\r\n      !leafUIModel ||\r\n      leafUIModel.leafInfo == null ||\r\n      leafUIModel.leafInfo.type === \"single-content\" ||\r\n      this.#widgetsInfo.has(widget.id)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    leafUIModel.leafInfo.widgets.push(widget);\r\n    this.#widgetsInfo.set(widget.id, { parentLeafId: leafId, info: widget });\r\n\r\n    if (selectWidget) {\r\n      this.#updateSelectedWidget(leafUIModel.leafInfo, widget);\r\n\r\n      // Queue re-renders\r\n      forceUpdate(this);\r\n      forceUpdate(this.#flexibleLayoutRef);\r\n    } else {\r\n      // Queue re-render for the specific leaf\r\n      this.#flexibleLayoutRef.refreshLeaf(leafId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes a view and optionally all its rendered widget from the render.\r\n   * The reserved space will be given to the closest view.\r\n   */\r\n  @Method()\r\n  async removeView(\r\n    leafId: string,\r\n    removeRenderedWidgets: boolean\r\n  ): Promise<FlexibleLayoutViewRemoveResult> {\r\n    const itemInfo = this.#itemsInfo.get(leafId);\r\n\r\n    // The leaf didn't exist\r\n    if (!itemInfo) {\r\n      return { success: false, reconnectedSubtree: undefined };\r\n    }\r\n    const leafInfoToRemove = (itemInfo as LeafExtended).leafInfo;\r\n\r\n    // The item is not a leaf (it's a group) or is not \"tabbed\".\r\n    if (\r\n      leafInfoToRemove == null ||\r\n      leafInfoToRemove.type === \"single-content\"\r\n    ) {\r\n      return { success: false, reconnectedSubtree: undefined };\r\n    }\r\n\r\n    const result = await this.#flexibleLayoutRef.removeView(leafId);\r\n\r\n    if (!result.success) {\r\n      return result;\r\n    }\r\n\r\n    // Update view info, since it got renamed\r\n    const reconnectedSubtree = result.reconnectedSubtree;\r\n\r\n    if (reconnectedSubtree) {\r\n      // - - - - - - - - - - - - - - - - - - - - - - - - -\r\n      // INPUT MODEL:\r\n      //                       secondParentItem\r\n      //                              / \\\r\n      //                           /       \\\r\n      //                        /             \\\r\n      //        (Id x) nodeToReconnect  Other items...\r\n      //                       / \\\r\n      //                    /       \\\r\n      //                 /             \\\r\n      // (Id y) leafInfoToRemove  (Id z) nodeToRemove\r\n      //                                     / \\\r\n      //                                  /       \\\r\n      //                              subtree or widgets\r\n      //\r\n      //\r\n      // OUTPUT MODEL:\r\n      //                  secondParentItem\r\n      //                         / \\\r\n      //                      /       \\\r\n      //                   /             \\\r\n      //    (Id x) nodeToReconnect  Other items...\r\n      //                / \\\r\n      //             /       \\\r\n      //         subtree or widgets\r\n      // - - - - - - - - - - - - - - - - - - - - - - - - -\r\n\r\n      const nodeToRemoveUIModel = this.#itemsInfo.get(\r\n        reconnectedSubtree.nodeToRemove\r\n      );\r\n\r\n      // The node to reconnect is still a group (since the nodeToRemove is a group).\r\n      // We must reconnect the nodeToRemove's children\r\n      if ((nodeToRemoveUIModel as LeafExtended).leafInfo == null) {\r\n        const itemsOfNodeToRemove = (nodeToRemoveUIModel as GroupExtended).item\r\n          .items;\r\n\r\n        const nodeToReconnectUIModel = this.#itemsInfo.get(\r\n          reconnectedSubtree.nodeToReconnect\r\n        ) as GroupExtended;\r\n\r\n        // Reconnect the parent of the removedNode subtree\r\n        itemsOfNodeToRemove.forEach(itemToUpdateItsParent => {\r\n          this.#itemsInfo.get(itemToUpdateItsParent.id).parentItem =\r\n            nodeToReconnectUIModel.item;\r\n        });\r\n      }\r\n      // The node to reconnect is a leaf, since the nodeToRemove is a leaf\r\n      else {\r\n        const nodeToReconnectUIModel = this.#itemsInfo.get(\r\n          reconnectedSubtree.nodeToReconnect\r\n        ) as LeafExtended;\r\n\r\n        // Add leaf information\r\n        nodeToReconnectUIModel.leafInfo = (\r\n          nodeToRemoveUIModel as LeafExtended\r\n        ).leafInfo;\r\n        const nodeToReconnectLeafInfo = nodeToReconnectUIModel.leafInfo;\r\n\r\n        // Update leaf id\r\n        nodeToReconnectLeafInfo.id = reconnectedSubtree.nodeToReconnect;\r\n\r\n        const widgetsToUpdateParentLeafId: FlexibleLayoutWidget[] =\r\n          nodeToReconnectLeafInfo.type === \"single-content\"\r\n            ? [nodeToReconnectLeafInfo.widget]\r\n            : nodeToReconnectLeafInfo.widgets;\r\n\r\n        // Update the parent leaf id in the reconnected widgets\r\n        widgetsToUpdateParentLeafId.forEach(widget => {\r\n          const widgetUIModel = this.#widgetsInfo.get(widget.id);\r\n          widgetUIModel.parentLeafId = nodeToReconnectLeafInfo.id;\r\n        });\r\n      }\r\n\r\n      // Delete the old item\r\n      this.#itemsInfo.delete(reconnectedSubtree.nodeToRemove);\r\n    }\r\n\r\n    // Remove rendered widgets\r\n    if (removeRenderedWidgets) {\r\n      leafInfoToRemove.widgets.forEach(this.#deleteRenderedWidget);\r\n    }\r\n\r\n    // Delete the view\r\n    this.#itemsInfo.delete(leafId);\r\n\r\n    // Queue re-renders\r\n    forceUpdate(this);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Remove a widget from a `\"tabbed\"` type leaf.\r\n   * Only works if the parent leaf is `\"tabbed\"` type.\r\n   *\r\n   * To remove a widget from a `\"single-content\"` type leaf, use the\r\n   * `removeView` method.\r\n   */\r\n  @Method()\r\n  async removeWidget(widgetId: string) {\r\n    const widgetUIModel = this.#widgetsInfo.get(widgetId);\r\n\r\n    if (!widgetUIModel) {\r\n      return;\r\n    }\r\n    const leafInfo = this.#getLeafInfo(widgetUIModel.parentLeafId);\r\n\r\n    if (leafInfo.type === \"single-content\") {\r\n      return;\r\n    }\r\n\r\n    this.#checkViewStateToRemoveWidget(\r\n      leafInfo,\r\n      widgetUIModel.info,\r\n      leafInfo.widgets.findIndex(widget => widget.id === widgetId) // Find the index of the widget\r\n    );\r\n  }\r\n\r\n  #updateFlexibleModels = (layout: FlexibleLayoutModel) => {\r\n    // Empty layout\r\n    if (layout == null) {\r\n      return;\r\n    }\r\n\r\n    const layoutSplitterPartsSet: Set<string> = new Set();\r\n\r\n    updateFlexibleModels(\r\n      layout,\r\n      this.#itemsInfo,\r\n      layoutSplitterPartsSet,\r\n      this.#renderedWidgets,\r\n      this.#widgetsInfo\r\n    );\r\n\r\n    this.#layoutSplitterParts = [...layoutSplitterPartsSet.values()].join(\",\");\r\n  };\r\n\r\n  #getLeafInfo = (\r\n    leafId: string\r\n  ): FlexibleLayoutLeafInfo<FlexibleLayoutLeafType> =>\r\n    getLeafInfo(this.#itemsInfo, leafId);\r\n\r\n  #handleLeafSelectedWidgetChange = (\r\n    event: ChFlexibleLayoutCustomEvent<ViewSelectedItemInfo>\r\n  ) => {\r\n    event.stopPropagation();\r\n\r\n    const selectedItemInfo = event.detail;\r\n    const leafInfo = this.#getLeafInfo(\r\n      selectedItemInfo.viewId\r\n    ) as FlexibleLayoutLeafInfo<\"tabbed\">;\r\n\r\n    // Mark the item as rendered\r\n    const newSelectedItem = leafInfo.widgets[selectedItemInfo.newSelectedIndex];\r\n\r\n    // Select the new item\r\n    this.#updateSelectedWidget(leafInfo, newSelectedItem);\r\n\r\n    // Queue re-renders\r\n    forceUpdate(this);\r\n    forceUpdate(this.#flexibleLayoutRef);\r\n  };\r\n\r\n  #handleLeafWidgetClose = (\r\n    event: ChFlexibleLayoutCustomEvent<ViewItemCloseInfo>\r\n  ) => {\r\n    event.stopPropagation();\r\n\r\n    const itemCloseInfo = event.detail;\r\n    const viewInfo = this.#getLeafInfo(\r\n      itemCloseInfo.viewId\r\n    ) as FlexibleLayoutLeafInfo<\"tabbed\">;\r\n\r\n    const widgetIndex = itemCloseInfo.itemIndex;\r\n    const widgetInfo = viewInfo.widgets[widgetIndex];\r\n\r\n    this.#checkViewStateToRemoveWidget(viewInfo, widgetInfo, widgetIndex);\r\n  };\r\n\r\n  #checkViewStateToRemoveWidget = (\r\n    viewInfo: FlexibleLayoutLeafInfo<\"tabbed\">,\r\n    widgetInfo: FlexibleLayoutWidget,\r\n    widgetIndex: number\r\n  ) => {\r\n    // Last item from the view. Destroy the view and adjust the layout\r\n    if (viewInfo.widgets.length === 1) {\r\n      this.removeView(viewInfo.id, true);\r\n      return;\r\n    }\r\n\r\n    const viewWidgets = viewInfo.widgets;\r\n    const widgetsCount = viewInfo.widgets.length;\r\n\r\n    // If the item was selected, select another item\r\n    if (widgetInfo.id === viewInfo.selectedWidgetId) {\r\n      const newSelectedItem =\r\n        widgetIndex === widgetsCount - 1 // If it's the last item\r\n          ? viewWidgets[widgetsCount - 2] // Select the previous\r\n          : viewWidgets[widgetIndex + 1]; // Otherwise, select the next\r\n\r\n      // Mark the item as selected and rendered\r\n      this.#updateSelectedWidget(viewInfo, newSelectedItem);\r\n    }\r\n\r\n    this.#removeWidget(viewInfo, widgetIndex);\r\n\r\n    // Queue re-renders\r\n    forceUpdate(this);\r\n    forceUpdate(this.#flexibleLayoutRef);\r\n  };\r\n\r\n  /**\r\n   * @param skipRenderRemoval Useful to determine if the render of the widget must not be destroyed.\r\n   * Used when the widget of the leaf must be reconnected in another parent\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #removeWidget = (\r\n    leafInfo: FlexibleLayoutLeafInfo<\"tabbed\">,\r\n    itemIndex: number,\r\n    skipRenderRemoval = false\r\n  ) => {\r\n    // Remove the item from the view\r\n    const widgetInfo = removeElement(leafInfo.widgets, itemIndex);\r\n    this.#flexibleLayoutRef.removeItemPageInView(leafInfo.id, widgetInfo.id);\r\n\r\n    // Remove the item from the flexible-layout-render to optimize resources\r\n    if (!skipRenderRemoval) {\r\n      this.#deleteRenderedWidget(widgetInfo);\r\n    }\r\n  };\r\n\r\n  #deleteRenderedWidget = (widgetInfo: FlexibleLayoutWidget) => {\r\n    if (widgetInfo.conserveRenderState === true) {\r\n      return;\r\n    }\r\n\r\n    // Remove the item from the flexible-layout-render to optimize resources\r\n    this.#renderedWidgets.delete(widgetInfo.id);\r\n    this.#widgetsInfo.delete(widgetInfo.id);\r\n  };\r\n\r\n  #updateSelectedWidget = (\r\n    leafInfo: FlexibleLayoutLeafInfo<\"tabbed\">,\r\n    widget: FlexibleLayoutWidget\r\n  ) => {\r\n    // Mark the item as rendered\r\n    this.#renderedWidgets.add(widget.id);\r\n\r\n    // Mark the item as rendered\r\n    widget.wasRendered = true;\r\n\r\n    leafInfo.selectedWidgetId = widget.id;\r\n  };\r\n\r\n  /**\r\n   * This handler can only be triggered by \"tabbed\" leafs.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #handleLeafWidgetReorder = async (\r\n    event: ChFlexibleLayoutCustomEvent<WidgetReorderInfo>\r\n  ) => {\r\n    const reorderInfo = event.detail;\r\n    const leafId = reorderInfo.viewId;\r\n    const leafIdTarget = reorderInfo.viewIdTarget;\r\n    const dropAreaTarget = reorderInfo.dropAreaTarget;\r\n\r\n    const leafInfo = this.#getLeafInfo(\r\n      leafId\r\n    ) as FlexibleLayoutLeafInfo<\"tabbed\">;\r\n\r\n    // Dropping in the same view. Nothing to change\r\n    if (\r\n      leafId === leafIdTarget &&\r\n      (dropAreaTarget === \"center\" || leafInfo.widgets.length === 1)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const leafTargetInfo = this.#getLeafInfo(\r\n      leafIdTarget\r\n    ) as FlexibleLayoutLeafInfo<\"tabbed\">;\r\n    const widgetIndex = reorderInfo.index;\r\n    const widgetToMove = leafInfo.widgets[widgetIndex];\r\n\r\n    // Update parent leaf id in the widget to move\r\n    this.#widgetsInfo.get(widgetToMove.id).parentLeafId = leafIdTarget;\r\n\r\n    // Mark the item as rendered, because the drag does not have to trigger item\r\n    // selection (which trigger item rendering)\r\n    this.#renderedWidgets.add(widgetToMove.id);\r\n    widgetToMove.wasRendered = true;\r\n\r\n    // The drop does not create a new view\r\n    if (dropAreaTarget === \"center\") {\r\n      leafTargetInfo.widgets.push(widgetToMove);\r\n\r\n      // Update the selected widget in the target view\r\n      this.#updateSelectedWidget(leafTargetInfo, widgetToMove);\r\n    } else {\r\n      await this.#handleViewItemReorderCreateView(\r\n        widgetToMove,\r\n        leafTargetInfo,\r\n        dropAreaTarget\r\n      );\r\n    }\r\n\r\n    // Remove the view, since it has no more items, but don't destroy the\r\n    // render of the widget, since the widget is only moved\r\n    if (leafInfo.widgets.length === 1) {\r\n      await this.removeView(leafId, false);\r\n\r\n      // Refresh reference to force re-render\r\n      // this.#layoutSplitterModels = { ...this.#layoutSplitterModels }; // TODO: UPDATE THIS\r\n    }\r\n    // Remove the item in the view that belongs\r\n    else {\r\n      // Select the previous item if the removed item was selected\r\n      if (leafInfo.selectedWidgetId === widgetToMove.id) {\r\n        const newSelectedIndex = widgetIndex === 0 ? 1 : widgetIndex - 1;\r\n        const newSelectedItem = leafInfo.widgets[newSelectedIndex];\r\n\r\n        // Mark the item as selected and rendered\r\n        this.#updateSelectedWidget(leafInfo, newSelectedItem);\r\n      }\r\n\r\n      // Remove the item from the view\r\n      this.#removeWidget(leafInfo, widgetIndex, true);\r\n\r\n      // Queue re-renders\r\n      forceUpdate(this); // Update rendered items\r\n      // forceUpdate(this.#flexibleLayoutRef);\r\n    }\r\n\r\n    // this.#flexibleLayoutRef.refreshLayout();\r\n  };\r\n\r\n  #handleViewItemReorderCreateView = async (\r\n    widget: FlexibleLayoutWidget,\r\n    viewTargetInfo: FlexibleLayoutLeafInfo<\"tabbed\">,\r\n    dropAreaTarget: DroppableArea\r\n  ) => {\r\n    // Implementation note: If the direction matches the dropAreaTarget\r\n    // (for example, dropAreaTarget === \"block-start\" and parent direction === \"row\")\r\n    // we can use addSiblingView\r\n\r\n    // const viewUIModel = this.#itemsInfo.get(\r\n    //   viewId\r\n    // ) as FlexibleLayoutItemExtended<FlexibleLayoutLeaf>;\r\n    const viewTargetUIModel = this.#itemsInfo.get(\r\n      viewTargetInfo.id\r\n    ) as FlexibleLayoutItemExtended<FlexibleLayoutLeafModel, \"tabbed\">;\r\n    const viewTargetParentInfo = viewTargetUIModel.parentItem; // TODO: CHECK FOR ROOT NODE <------------------\r\n\r\n    const newLeafToAddId = GENERATE_GUID();\r\n    const newLeafToAdd: FlexibleLayoutLeafModel = {\r\n      id: newLeafToAddId,\r\n      selectedWidgetId: widget.id,\r\n      size: undefined,\r\n      tabDirection: viewTargetUIModel.leafInfo.tabDirection,\r\n      type: \"tabbed\",\r\n      widgets: [widget],\r\n      dragBar: {\r\n        size: viewTargetUIModel.item.dragBar?.size,\r\n        part: viewTargetUIModel.item.dragBar?.part // TODO: IMPROVE THIS\r\n      }\r\n    };\r\n\r\n    const viewTargetIsContainedInAGroupWithTheSameDirection =\r\n      (viewTargetParentInfo.direction === \"rows\" &&\r\n        (dropAreaTarget === \"block-start\" || dropAreaTarget === \"block-end\")) ||\r\n      (viewTargetParentInfo.direction === \"columns\" &&\r\n        (dropAreaTarget === \"inline-start\" || dropAreaTarget === \"inline-end\"));\r\n\r\n    // Add a sibling\r\n    if (viewTargetIsContainedInAGroupWithTheSameDirection) {\r\n      await this.addSiblingView(\r\n        viewTargetParentInfo.id,\r\n        viewTargetInfo.id,\r\n        dropAreaTarget === \"block-start\" || dropAreaTarget === \"inline-start\"\r\n          ? \"before\"\r\n          : \"after\",\r\n        newLeafToAdd,\r\n        true\r\n      );\r\n    }\r\n\r\n    // The current target must be modified to be a group\r\n    else {\r\n      // TODO: Add implementation\r\n    }\r\n\r\n    // VERIFY THE PARENT NODE\r\n    // HANDLE NEW VIEW CREATION\r\n    // CHECK IF THE PREVIOUS VIEW HAS ONLY ONE ITEM TO REUSE ITS VIEW ID?\r\n  };\r\n\r\n  #renderWidget = (widgetId: string) => {\r\n    const widgetInfo = this.#widgetsInfo.get(widgetId).info;\r\n    const widgetRender = this.renders[widgetInfo.renderId ?? widgetId];\r\n\r\n    return widgetInfo.addWrapper ? (\r\n      <div\r\n        key={widgetId}\r\n        slot={widgetId}\r\n        class=\"ch-flexible-layout-render-slot\"\r\n      >\r\n        {widgetRender(widgetInfo)}\r\n      </div>\r\n    ) : (\r\n      widgetRender(widgetInfo)\r\n    );\r\n  };\r\n\r\n  componentWillLoad() {\r\n    this.#updateFlexibleModels(this.model);\r\n  }\r\n\r\n  render() {\r\n    // Check render against the \"layout\" property\r\n    if (this.model == null) {\r\n      return \"\";\r\n    }\r\n\r\n    return (\r\n      <ch-flexible-layout\r\n        class={this.cssClass || null}\r\n        model={this.model}\r\n        layoutSplitterParts={this.#layoutSplitterParts}\r\n        itemsInfo={this.#itemsInfo}\r\n        onViewItemClose={this.#handleLeafWidgetClose}\r\n        onViewItemReorder={this.#handleLeafWidgetReorder}\r\n        onSelectedViewItemChange={this.#handleLeafSelectedWidgetChange}\r\n        ref={el => (this.#flexibleLayoutRef = el)}\r\n      >\r\n        {[...this.#renderedWidgets.values()].map(this.#renderWidget)}\r\n      </ch-flexible-layout>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}