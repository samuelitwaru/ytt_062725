{"version":3,"names":["dropdownCss","ChDropdownStyle0","mapDropdownAlignToChWindowAlign","OutsideStart","InsideStart","Center","InsideEnd","OutsideEnd","ACTION_LINK","DROPDOWN_PARTS_DICTIONARY","ACTION","LINK","ACTION_LINK_EXPANDABLE","EXPANDABLE","ACTION_BUTTON","BUTTON","ACTION_BUTTON_EXPANDABLE","DROPDOWN_TAG_NAME","WINDOW_ID","elementIsDropdown","element","tagName","toLowerCase","ChDropDown","firstExpanded","mainAction","handleExpandedChange","newExpandedValue","document","addEventListener","this","closeOnClickOutside","capture","passive","removeEventListener","popoverTargetElement","expandedChange","onActionClick","onRecursiveClose","event","stopperLevel","detail","level","stopPropagation","closeDropdown","focusElement","focus","collapseDropdown","expanded","emit","expandDropdown","closeDropdownSibling","currentFocusedElement","focusComposedPath","currentFocusedItem","length","dispatchEvent","CustomEvent","bubbles","composedPath","find","el","undefined","handleMouseEnter","handleMouseLeave","handleButtonClick","itemClickCallback","nestedDropdown","pointerType","leaf","dropDownItemContent","h","slot","class","part","CONTENT","caption","shortcut","SHORTCUT","firstLevelRender","popoverTarget","toString","buttonAccessibleName","EXPANDABLE_BUTTON","type","onClick","ref","name","actionRender","pseudoStartImage","isPseudoElementImg","startImgSrc","startImgType","pseudoEndImage","endImgSrc","endImgType","href","action","onMouseEnter","actionGroupParent","popoverRender","aligns","position","split","alignX","alignY","xAlignMapping","yAlignMapping","noNeedToAddDivListWrapper","showHeader","showFooter","role","id","WINDOW","actionById","actionElement","firstLayer","popover","hidden","inlineAlign","blockAlign","render","Host","key","style","onMouseLeave"],"sources":["src/components/dropdown/internal/dropdown/dropdown.scss?tag=ch-dropdown&encapsulation=shadow","src/components/dropdown/internal/dropdown/dropdown.tsx"],"sourcesContent":["@import \"../../../../common/_base\";\r\n\r\n$z-index-gx-navbar-item: 107; // Same as $z-index-gx-navbar-item from w-c-l\r\n\r\n:where(a, button) {\r\n  all: unset;\r\n}\r\n\r\na,\r\nbutton {\r\n  display: flex;\r\n  align-items: center;\r\n  inline-size: 100%;\r\n  block-size: 100%;\r\n  cursor: pointer;\r\n}\r\n\r\n// Must be placed after the \":where(a, button)\"\r\n@include box-sizing();\r\n\r\n:host {\r\n  --ch-dropdown-item__image-size: #{$default-decorative-image-size};\r\n  --ch-dropdown-item__background-image-size: 100%;\r\n\r\n  --ch-dropdown-separation: 0px;\r\n  --ch-dropdown-separation-x: var(--ch-dropdown-separation);\r\n  --ch-dropdown-separation-y: var(--ch-dropdown-separation);\r\n\r\n  display: flex;\r\n  position: relative;\r\n  inline-size: 100%;\r\n  block-size: 100%;\r\n}\r\n\r\n.expandable-button {\r\n  justify-content: center;\r\n  align-self: center;\r\n  position: relative;\r\n  z-index: $z-index-gx-navbar-item + 1;\r\n}\r\n\r\n// Remove focus of the button content\r\n::slotted([slot=\"action\"]) {\r\n  pointer-events: none;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//           Separation\r\n// - - - - - - - - - - - - - - - -\r\nch-popover {\r\n  --ch-popover-separation-x: var(--ch-dropdown-separation-x);\r\n  --ch-popover-separation-y: var(--ch-dropdown-separation-y);\r\n\r\n  &:not(.hydrated) {\r\n    opacity: 0;\r\n  }\r\n}\r\n// Dummy separation to keep opened the popup when expand-behavior === \"ClickOrHover\"\r\n// ch-window[y-align=\"outside-start\"] {\r\n//   --ch-window-separation: var(--separation-y);\r\n//   --ch-window-separation-y: calc(var(--separation-y) * -1);\r\n// }\r\n\r\n// ch-window[y-align=\"outside-end\"] {\r\n//   --ch-window-separation: var(--separation-y);\r\n//   --ch-window-separation-y: var(--separation-y);\r\n// }\r\n\r\n// ch-window[x-align=\"outside-start\"] {\r\n//   --ch-window-separation: var(--separation-x);\r\n//   --ch-window-separation-x: calc(var(--separation-x) * -1);\r\n// }\r\n\r\n// ch-window[x-align=\"outside-end\"] {\r\n//   --ch-window-separation: var(--separation-x);\r\n//   --ch-window-separation-x: var(--separation-x);\r\n// }\r\n\r\n.list {\r\n  display: contents;\r\n}\r\n\r\n.action {\r\n  text-align: start;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//             Images\r\n// - - - - - - - - - - - - - - - -\r\n.pseudo-img--start::before,\r\n.pseudo-img--end::after {\r\n  content: \"\";\r\n  display: block;\r\n  inline-size: var(--ch-dropdown-item__image-size);\r\n  block-size: var(--ch-dropdown-item__image-size);\r\n  min-inline-size: var(--ch-dropdown-item__image-size);\r\n}\r\n\r\n.pseudo-img--start {\r\n  --ch-dropdown-item-img: var(--ch-dropdown-item-start-img);\r\n}\r\n\r\n.pseudo-img--end {\r\n  --ch-dropdown-item-img: var(--ch-dropdown-item-end-img);\r\n}\r\n\r\n.start-img-type--background::before,\r\n.end-img-type--background::after {\r\n  background: no-repeat center / var(--ch-dropdown-item__background-image-size)\r\n    var(--ch-dropdown-item-img);\r\n}\r\n\r\n.start-img-type--mask::before,\r\n.end-img-type--mask::after {\r\n  -webkit-mask: var(--ch-dropdown-item-img) 50% 50% /\r\n    var(--ch-dropdown-item__background-image-size)\r\n    var(--ch-dropdown-item__background-image-size) no-repeat;\r\n  background-color: currentColor;\r\n}\r\n\r\n.content {\r\n  inline-size: 100%;\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Listen,\r\n  Method,\r\n  Prop,\r\n  Watch,\r\n  h\r\n} from \"@stencil/core\";\r\nimport { Component as ChComponent } from \"../../../../common/interfaces\";\r\n\r\nimport { DropdownAlign, DropdownPosition } from \"./types\";\r\nimport { ChPopoverAlign } from \"../../../popover/types\";\r\nimport { focusComposedPath } from \"../../../common/helpers\";\r\nimport { ChDropdownCustomEvent } from \"../../../../components\";\r\nimport { isPseudoElementImg } from \"../../../../common/utils\";\r\nimport { ImageRender } from \"../../../../common/types\";\r\nimport { DROPDOWN_PARTS_DICTIONARY } from \"../../../../common/reserverd-names\";\r\n\r\nconst mapDropdownAlignToChWindowAlign: {\r\n  [key in DropdownAlign]: ChPopoverAlign;\r\n} = {\r\n  OutsideStart: \"outside-start\",\r\n  InsideStart: \"inside-start\",\r\n  Center: \"center\",\r\n  InsideEnd: \"inside-end\",\r\n  OutsideEnd: \"outside-end\"\r\n};\r\n\r\n// Parts\r\nconst ACTION_LINK =\r\n  `${DROPDOWN_PARTS_DICTIONARY.ACTION} ${DROPDOWN_PARTS_DICTIONARY.LINK}` as const;\r\n\r\nconst ACTION_LINK_EXPANDABLE =\r\n  `${ACTION_LINK} ${DROPDOWN_PARTS_DICTIONARY.EXPANDABLE}` as const;\r\n\r\nconst ACTION_BUTTON =\r\n  `${DROPDOWN_PARTS_DICTIONARY.ACTION} ${DROPDOWN_PARTS_DICTIONARY.BUTTON}` as const;\r\n\r\nconst ACTION_BUTTON_EXPANDABLE =\r\n  `${ACTION_BUTTON} ${DROPDOWN_PARTS_DICTIONARY.EXPANDABLE}` as const;\r\n\r\nconst DROPDOWN_TAG_NAME = \"ch-dropdown\";\r\nconst WINDOW_ID = \"window\";\r\n\r\nconst elementIsDropdown = (element: Element) =>\r\n  element?.tagName?.toLowerCase() === DROPDOWN_TAG_NAME;\r\n\r\n@Component({\r\n  shadow: true,\r\n  styleUrl: \"dropdown.scss\",\r\n  tag: \"ch-dropdown\"\r\n})\r\nexport class ChDropDown implements ChComponent {\r\n  #firstExpanded = false;\r\n\r\n  // Refs\r\n  #mainAction: HTMLButtonElement | HTMLAnchorElement;\r\n\r\n  @Element() el: HTMLChDropdownElement;\r\n\r\n  /**\r\n   * Specifies if the current parent of the item is the action-group control.\r\n   */\r\n  @Prop() readonly actionGroupParent: boolean = false;\r\n\r\n  /**\r\n   * This attribute lets you specify the label for the expandable button.\r\n   * Important for accessibility.\r\n   */\r\n  @Prop() readonly buttonAccessibleName: string;\r\n\r\n  /**\r\n   * Specifies the caption that the control will display.\r\n   */\r\n  @Prop() readonly caption: string;\r\n\r\n  /**\r\n   * Specifies the src of the end image.\r\n   */\r\n  @Prop() readonly endImgSrc: string;\r\n\r\n  /**\r\n   * Specifies how the end image will be rendered.\r\n   */\r\n  @Prop() readonly endImgType: ImageRender = \"background\";\r\n\r\n  /**\r\n   * `true` to display the dropdown section.\r\n   */\r\n  @Prop({ mutable: true }) expanded = false;\r\n\r\n  @Watch(\"expanded\")\r\n  handleExpandedChange(newExpandedValue: boolean) {\r\n    if (newExpandedValue) {\r\n      // Click\r\n      document.addEventListener(\"click\", this.#closeOnClickOutside, {\r\n        capture: true,\r\n        passive: true\r\n      });\r\n    } else {\r\n      // Click\r\n      document.removeEventListener(\"click\", this.#closeOnClickOutside, {\r\n        capture: true\r\n      });\r\n\r\n      // This is a WA to avoid a StencilJS's (or browser) issue when reusing\r\n      // the top layer and interacting with the Tab key in the same top layer.\r\n      // After the second opening, the Tab key stops working\r\n      (this.#mainAction as HTMLButtonElement).popoverTargetElement = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Specifies the hyperlink of the item. If this property is defined, the\r\n   * control will render an anchor tag with this `href`. Otherwise, it will\r\n   * render a button tag.\r\n   */\r\n  @Prop() readonly href: string;\r\n\r\n  /**\r\n   * This callback is executed when an item is clicked.\r\n   */\r\n  @Prop() readonly itemClickCallback: (event: UIEvent) => void;\r\n\r\n  /**\r\n   * Specifies whether the item contains a subtree. `true` if the item does not\r\n   * have a subtree.\r\n   */\r\n  @Prop() readonly leaf: boolean = false;\r\n\r\n  /**\r\n   * Level in the render at which the item is placed.\r\n   */\r\n  @Prop() readonly level: number;\r\n\r\n  /**\r\n   * This attribute lets you specify if the control is nested in another\r\n   * dropdown. Useful to manage keyboard interaction.\r\n   */\r\n  @Prop() readonly nestedDropdown: boolean = false;\r\n\r\n  /**\r\n   * Determine if the dropdown section should be opened when the expandable\r\n   * button of the control is focused.\r\n   * TODO: Add implementation\r\n   */\r\n  @Prop() readonly openOnFocus: boolean = false;\r\n\r\n  /**\r\n   * Specifies the position of the dropdown section that is placed relative to\r\n   * the expandable button.\r\n   */\r\n  @Prop() readonly position: DropdownPosition = \"Center_OutsideEnd\";\r\n\r\n  /**\r\n   * Specifies the shortcut caption that the control will display.\r\n   */\r\n  @Prop() readonly shortcut: string;\r\n\r\n  /**\r\n   * `true` to make available a slot to show a footer element.\r\n   */\r\n  @Prop() readonly showFooter: boolean = false;\r\n\r\n  /**\r\n   * `true` to make available a slot to show a header element.\r\n   */\r\n  @Prop() readonly showHeader: boolean = false;\r\n\r\n  /**\r\n   * Specifies the src for the left img.\r\n   */\r\n  @Prop() readonly startImgSrc: string;\r\n\r\n  /**\r\n   * Specifies how the start image will be rendered.\r\n   */\r\n  @Prop() readonly startImgType: ImageRender = \"background\";\r\n\r\n  /**\r\n   * Fired when the visibility of the dropdown section is changed by user\r\n   * interaction.\r\n   */\r\n  @Event() expandedChange: EventEmitter<boolean>;\r\n\r\n  @Listen(\"actionClick\")\r\n  onActionClick() {\r\n    // this.#closeDropdown();\r\n    // @todo This behavior must be specified by a property\r\n    // this.returnFocusToButton();\r\n  }\r\n\r\n  @Listen(\"recursiveClose\")\r\n  onRecursiveClose(event: ChDropdownCustomEvent<number>) {\r\n    const stopperLevel = event.detail;\r\n\r\n    if (this.level === stopperLevel) {\r\n      event.stopPropagation();\r\n    }\r\n\r\n    this.#closeDropdown();\r\n  }\r\n\r\n  /**\r\n   * Focus the dropdown action.\r\n   */\r\n  @Method()\r\n  async focusElement() {\r\n    this.#mainAction.focus();\r\n  }\r\n\r\n  /**\r\n   * Collapse the content of the dropdown.\r\n   */\r\n  @Method()\r\n  async collapseDropdown() {\r\n    if (this.expanded) {\r\n      this.expandedChange.emit(false);\r\n      this.expanded = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Expand the content of the dropdown.\r\n   */\r\n  @Method()\r\n  async expandDropdown() {\r\n    if (!this.expanded) {\r\n      this.expandedChange.emit(true);\r\n      this.expanded = true;\r\n    }\r\n  }\r\n\r\n  #closeDropdownSibling = () => {\r\n    const currentFocusedElement = focusComposedPath();\r\n    const currentFocusedItem = currentFocusedElement[\r\n      currentFocusedElement.length - 1\r\n    ] as HTMLChDropdownElement;\r\n\r\n    if (!elementIsDropdown(currentFocusedItem)) {\r\n      return;\r\n    }\r\n\r\n    if (currentFocusedItem.level < this.level) {\r\n      return;\r\n    }\r\n\r\n    // Fire an event to close all dropdown parents up to a certain level\r\n    currentFocusedItem.dispatchEvent(\r\n      new CustomEvent(\"recursiveClose\", { bubbles: true, detail: this.level })\r\n    );\r\n  };\r\n\r\n  #closeDropdown = () => {\r\n    this.expandedChange.emit(false);\r\n    this.expanded = false;\r\n  };\r\n\r\n  /**\r\n   * Returns focus to the expandable button when closing the dropdown. Only\r\n   * works if `openOnFocus = \"false\"`\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  // #returnFocusToButton = () => {\r\n  //   if (!this.openOnFocus) {\r\n  //     this.#mainAction.focus();\r\n  //   }\r\n  // };\r\n\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #closeOnClickOutside = (event: MouseEvent) => {\r\n    if (event.composedPath().find(el => el === this.el) === undefined) {\r\n      this.#closeDropdown();\r\n    }\r\n  };\r\n\r\n  #handleMouseEnter = (event: MouseEvent) => {\r\n    event.stopPropagation();\r\n\r\n    // We first must close the current expanded dropdown, since with the\r\n    // keyboard we could have expanded a different dropdown\r\n    this.#closeDropdownSibling();\r\n\r\n    if (!this.expanded) {\r\n      this.expandedChange.emit(true);\r\n      this.expanded = true;\r\n    }\r\n  };\r\n\r\n  #handleMouseLeave = (event: MouseEvent) => {\r\n    event.stopPropagation();\r\n\r\n    if (this.expanded) {\r\n      this.expandedChange.emit(false);\r\n      this.expanded = false;\r\n    }\r\n  };\r\n\r\n  // /**\r\n  //  * Check if the next focused element is a child element of the dropdown\r\n  //  * control.\r\n  //  */\r\n  // // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  // #handleKeyUpEvents = (event: KeyboardEvent) => {\r\n\r\n  //   if (event.code !== TAB_KEY) {\r\n  //     return;\r\n  //   }\r\n\r\n  //   const isChildElement = event.composedPath().includes(this.el);\r\n  //   if (isChildElement) {\r\n  //     return;\r\n  //   }\r\n\r\n  //   this.#closeDropdown();\r\n  // };\r\n\r\n  #handleButtonClick = (event: PointerEvent) => {\r\n    event.stopPropagation();\r\n\r\n    if (this.level !== -1 && this.itemClickCallback) {\r\n      this.itemClickCallback(event);\r\n    }\r\n\r\n    // If the nested dropdown is expanded and its expandable button is clicked\r\n    // with the MOUSE and not the keyboard, do not change the visibility\r\n    if (this.nestedDropdown && this.expanded && event.pointerType) {\r\n      return;\r\n    }\r\n\r\n    // if (!this.expanded) {\r\n    //   // We first must close the current expanded dropdown, since with the\r\n    //   // mouse we could have expanded a different dropdown\r\n    //   this.#closeDropdownSibling();\r\n    // }\r\n\r\n    // WA: When clicking a leaf, its dropdown ancestors must be closed\r\n    if (this.leaf) {\r\n      this.el.dispatchEvent(\r\n        new CustomEvent(\"recursiveClose\", {\r\n          bubbles: true,\r\n          detail: this.level + 1\r\n        })\r\n      );\r\n\r\n      return;\r\n    }\r\n\r\n    const newExpandedValue = !this.expanded;\r\n\r\n    this.expanded = newExpandedValue;\r\n    this.expandedChange.emit(newExpandedValue);\r\n  };\r\n\r\n  #dropDownItemContent = () => [\r\n    <span\r\n      slot=\"action\"\r\n      class=\"content\"\r\n      part={DROPDOWN_PARTS_DICTIONARY.CONTENT}\r\n    >\r\n      {this.caption}\r\n    </span>,\r\n\r\n    !!this.shortcut && (\r\n      <span\r\n        aria-hidden=\"true\"\r\n        slot=\"action\"\r\n        part={DROPDOWN_PARTS_DICTIONARY.SHORTCUT}\r\n      >\r\n        {this.shortcut}\r\n      </span>\r\n    )\r\n  ];\r\n\r\n  #firstLevelRender = () => (\r\n    <button\r\n      popoverTarget={WINDOW_ID}\r\n      aria-controls={WINDOW_ID}\r\n      aria-expanded={this.expanded.toString()}\r\n      aria-haspopup=\"true\"\r\n      aria-label={this.buttonAccessibleName}\r\n      class=\"expandable-button\"\r\n      part={DROPDOWN_PARTS_DICTIONARY.EXPANDABLE_BUTTON}\r\n      type=\"button\"\r\n      onClick={this.#handleButtonClick}\r\n      ref={el => (this.#mainAction = el)}\r\n    >\r\n      <slot name=\"action\" />\r\n    </button>\r\n  );\r\n\r\n  #actionRender = () => {\r\n    const pseudoStartImage = isPseudoElementImg(\r\n      this.startImgSrc,\r\n      this.startImgType\r\n    );\r\n    const pseudoEndImage = isPseudoElementImg(this.endImgSrc, this.endImgType);\r\n\r\n    return this.href ? (\r\n      <a\r\n        aria-controls={!this.leaf ? WINDOW_ID : null}\r\n        aria-expanded={!this.leaf ? this.expanded.toString() : null}\r\n        aria-haspopup={!this.leaf ? \"true\" : null}\r\n        class={{\r\n          action: true,\r\n\r\n          [`start-img-type--${this.startImgType} pseudo-img--start`]:\r\n            pseudoStartImage,\r\n          [`end-img-type--${this.endImgType} pseudo-img--end`]: pseudoEndImage\r\n        }}\r\n        part={this.leaf ? ACTION_LINK : ACTION_LINK_EXPANDABLE}\r\n        href={this.href}\r\n        onClick={this.#handleButtonClick}\r\n        onMouseEnter={\r\n          !this.leaf && !this.actionGroupParent ? this.#handleMouseEnter : null\r\n        }\r\n        ref={el => (this.#mainAction = el)}\r\n      >\r\n        {this.#dropDownItemContent()}\r\n      </a>\r\n    ) : (\r\n      <button\r\n        popoverTarget={WINDOW_ID}\r\n        aria-controls={!this.leaf ? WINDOW_ID : null}\r\n        aria-expanded={!this.leaf ? this.expanded.toString() : null}\r\n        aria-haspopup={!this.leaf ? \"true\" : null}\r\n        class={{\r\n          action: true,\r\n\r\n          [`start-img-type--${this.startImgType} pseudo-img--start`]:\r\n            pseudoStartImage,\r\n          [`end-img-type--${this.endImgType} pseudo-img--end`]: pseudoEndImage\r\n        }}\r\n        part={this.leaf ? ACTION_BUTTON : ACTION_BUTTON_EXPANDABLE}\r\n        type=\"button\"\r\n        onMouseEnter={\r\n          !this.leaf && !this.actionGroupParent ? this.#handleMouseEnter : null\r\n        }\r\n        onClick={this.#handleButtonClick}\r\n        ref={el => (this.#mainAction = el)}\r\n      >\r\n        {this.#dropDownItemContent()}\r\n      </button>\r\n    );\r\n  };\r\n\r\n  #popoverRender = () => {\r\n    this.#firstExpanded ||= this.expanded;\r\n\r\n    if (!this.#firstExpanded) {\r\n      return \"\";\r\n    }\r\n\r\n    const aligns = this.position.split(\"_\");\r\n    const alignX = aligns[0] as DropdownAlign;\r\n    const alignY = aligns[1] as DropdownAlign;\r\n\r\n    const xAlignMapping = mapDropdownAlignToChWindowAlign[alignX];\r\n    const yAlignMapping = mapDropdownAlignToChWindowAlign[alignY];\r\n\r\n    const noNeedToAddDivListWrapper = !this.showHeader && !this.showFooter;\r\n\r\n    return (\r\n      <ch-popover\r\n        role={noNeedToAddDivListWrapper ? \"list\" : null}\r\n        id={WINDOW_ID}\r\n        part={DROPDOWN_PARTS_DICTIONARY.WINDOW}\r\n        actionById={true}\r\n        actionElement={this.#mainAction as HTMLButtonElement}\r\n        firstLayer={this.level === -1 || this.actionGroupParent}\r\n        popover=\"manual\"\r\n        hidden={!this.expanded}\r\n        inlineAlign={xAlignMapping}\r\n        blockAlign={yAlignMapping}\r\n      >\r\n        {noNeedToAddDivListWrapper ? (\r\n          <slot />\r\n        ) : (\r\n          [\r\n            this.showHeader && <slot name=\"header\" />,\r\n\r\n            <div role=\"list\" class=\"list\">\r\n              <slot />\r\n            </div>,\r\n\r\n            this.showFooter && <slot name=\"footer\" />\r\n          ]\r\n        )}\r\n      </ch-popover>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Host\r\n        role={this.level !== -1 ? \"listitem\" : null}\r\n        style={\r\n          !!this.startImgSrc || !!this.endImgSrc\r\n            ? {\r\n                \"--ch-dropdown-item-start-img\": `url(\"${this.startImgSrc}\")`,\r\n                \"--ch-dropdown-item-end-img\": `url(\"${this.endImgSrc}\")`\r\n              }\r\n            : undefined\r\n        }\r\n        onMouseLeave={\r\n          !this.actionGroupParent && this.level !== -1\r\n            ? this.#handleMouseLeave\r\n            : null\r\n        }\r\n      >\r\n        {this.level === -1 && !this.leaf\r\n          ? this.#firstLevelRender()\r\n          : this.#actionRender()}\r\n\r\n        {!this.leaf && this.#popoverRender()}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}