{"version":3,"names":["POPOVER_SEPARATION_X","POPOVER_SEPARATION_Y","positionTryFlipMap","checkIfContentOverflowsWindowY","actionStartPosition","documentSize","popoverSize","popoverRelativePosition","alignToImplementationMap","_","separation","__","center","actionSize","fromPxToNumber","pxValue","Number","replace","trim","getAlignmentValue","align","flipSupport","alignmentOverflowsWindow","oppositeAlign","oppositePopoverRelativePosition","oppositeAlignmentOverflowsWindow","setResponsiveAlignment","documentRect","actionRect","actionInlineStart","popoverWidth","popoverHeight","computedStyle","inlineAlign","blockAlign","positionTry","separationX","getPropertyValue","separationY","inlineAlignmentValue","width","blockAlignmentValue","top","height","popoverCss","ChPopoverStyle0","DRAGGING_CLASS","POPOVER_PREVENT_FLICKERING_CLASS","RESIZING_CLASS","POPOVER_ALIGN_BLOCK","POPOVER_ALIGN_INLINE","POPOVER_ACTION_WIDTH","POPOVER_ACTION_HEIGHT","POPOVER_ACTION_LEFT","POPOVER_ACTION_TOP","POPOVER_DRAGGED_X","POPOVER_DRAGGED_Y","POPOVER_BLOCK_SIZE","POPOVER_INLINE_SIZE","POPOVER_MIN_BLOCK_SIZE","POPOVER_MIN_INLINE_SIZE","POPOVER_BORDER_BLOCK_START_SIZE","POPOVER_BORDER_BLOCK_END_SIZE","POPOVER_BORDER_INLINE_START_SIZE","POPOVER_BORDER_INLINE_END_SIZE","POPOVER_RTL_CLASS","POPOVER_RTL","POPOVER_RTL_VALUE","addCursorInDocument","cursor","document","body","style","resizingCursorDictionary","rtl","setProperty","element","property","value","concat","addPopoverTargetElement","actionElement","popoverElement","addAction","popoverTargetElement","removePopoverTargetElement","undefined","ChPopover","exports","_a","_borderSizeRAF","set","this","_dragRAF","_positionAdjustRAF","_resizeRAF","_adjustAlignment","_checkPositionWatcher","_checkBorderSizeWatcher","_borderSizeObserver","_resizeObserver","_rtlWatcher","_draggedDistanceX","_draggedDistanceY","_dragging","_initialDragEvent","_lastDragEvent","_isRTLDirection","_currentEdge","_draggedDistanceXForResize","_draggedDistanceYForResize","_maxBlockSize","_maxInlineSize","_minBlockSize","_minInlineSize","_resizeWasMade","_resizeByDirectionDictionary","block","popoverRect","direction","currentDraggedDistanceY","__classPrivateFieldGet","_this","clientY","newBlockSize","newRestrictedBlockSize","forceCSSMinMax","__classPrivateFieldSet","el","inline","currentDraggedDistanceX","clientX","newInlineSize","newRestrictedInlineSize","_resizeEdgesAndCornersDictionary","_resizeLayer","_windowRef","_showPopover","showPopover","_addClickOutsideWatcherIfNecessary","call","_handlePopoverCloseOnClickOutside","event","composedPath","includes","_removeClickOutsideWatcher","hidden","popoverClosed","emit","mode","closeOnClickOutside","addEventListener","passive","removeEventListener","_addDraggingClass","classList","add","_removeDraggingClass","remove","_avoidFlickeringInTheNextRender","addClass","_setPositionWatcher","_removePositionWatcher","disconnect","_b","SyncWithRAF","_c","ResizeObserver","_updatePositionRAF","observe","_updatePosition","firstLayer","requestAnimationFrame","capture","perform","documentElement","getBoundingClientRect","getComputedStyle","_getActionInlineStartPosition","_setResponsiveAlignment","left","_getPopoverInlineSizeAndFixItIfNecessary","_getPopoverBlockSizeAndFixItIfNecessary","alignment","inlineSizeMatch","blockSizeMatch","_handlePopoverToggle","willBeHidden","newState","popoverOpened","_handleMouseDown","_trackElementDragRAF","_handleDragEnd","_trackElementDrag","preventDefault","cancel","_handleEdgeResize","edge","resizing","maxBlockSize","maxInlineSize","minBlockSize","minInlineSize","_removeBorderSizeWatcher","_trackElementResizeRAF","_handleResizeEnd","_trackElementResize","_setBorderSizeWatcher","resizable","_updateBorderSizeRAF","box","_updateBorderSize","borderBlockStartWidth","borderBlockEndWidth","borderInlineStartWidth","borderInlineEndWidth","class_1","prototype","handleActionChange","newActionElement","oldActionElement","actionById","handleBlockChange","blockSizeWatchChange","newValue","removeProperty","handleHiddenChange","newHiddenValue","hidePopover","handleInlineChange","inlineSizeWatchChange","resizableChanged","connectedCallback","window","MutationObserver","isRTL","attributeFilter","componentWillRender","componentDidLoad","disconnectedCallback","render","canAddListeners","h","Host","key","class","allowDrag","popover","onMouseDown","onToggle","part","name","ref"],"sources":["src/components/popover/utils.ts","src/components/popover/popover.scss?tag=ch-popover&encapsulation=shadow","src/components/popover/popover.tsx"],"sourcesContent":["import { ChPopoverAlign, ChPopoverPositionTry } from \"./types\";\r\n\r\nconst POPOVER_SEPARATION_X = \"--ch-popover-separation-x\";\r\nconst POPOVER_SEPARATION_Y = \"--ch-popover-separation-y\";\r\n\r\n// Position try\r\nconst positionTryFlipMap = {\r\n  \"outside-start\": \"outside-end\",\r\n  \"outside-end\": \"outside-start\",\r\n  \"inside-start\": \"inside-end\",\r\n  \"inside-end\": \"inside-start\"\r\n} as const satisfies {\r\n  [key in Exclude<ChPopoverAlign, \"center\">]: string;\r\n};\r\n\r\nconst checkIfContentOverflowsWindowY = (\r\n  actionStartPosition: number,\r\n  documentSize: number,\r\n  popoverSize: number,\r\n  popoverRelativePosition: number\r\n) =>\r\n  documentSize < popoverSize + actionStartPosition + popoverRelativePosition ||\r\n  actionStartPosition + popoverRelativePosition < 0;\r\n\r\nconst alignToImplementationMap: {\r\n  [key in ChPopoverAlign]: (\r\n    actionSize: number,\r\n    popoverSize: number,\r\n    separation: number\r\n  ) => number;\r\n} = {\r\n  \"outside-start\": (_, popoverSize, separation) => -popoverSize - separation,\r\n\r\n  \"inside-start\": (_, __, separation) => separation,\r\n\r\n  center: (actionSize, popoverSize, separation) =>\r\n    actionSize * 0.5 + separation - popoverSize * 0.5,\r\n\r\n  \"inside-end\": (actionSize, popoverSize, separation) =>\r\n    actionSize - (separation + popoverSize),\r\n\r\n  \"outside-end\": (actionSize, _, separation) => actionSize + separation\r\n};\r\n\r\nexport const fromPxToNumber = (pxValue: string) =>\r\n  Number(pxValue.replace(\"px\", \"\").trim());\r\n\r\nconst getAlignmentValue = (\r\n  align: ChPopoverAlign,\r\n  actionStartPosition: number,\r\n  actionSize: number,\r\n  popoverSize: number,\r\n  documentSize: number,\r\n  separation: number,\r\n  flipSupport: boolean\r\n) => {\r\n  const popoverRelativePosition = alignToImplementationMap[align](\r\n    actionSize,\r\n    popoverSize,\r\n    separation\r\n  );\r\n\r\n  // The configuration does not support flip\r\n  if (!flipSupport) {\r\n    return popoverRelativePosition;\r\n  }\r\n\r\n  // Check if the current alignment overflows the document window\r\n  const alignmentOverflowsWindow = checkIfContentOverflowsWindowY(\r\n    actionStartPosition,\r\n    documentSize,\r\n    popoverSize,\r\n    popoverRelativePosition\r\n  );\r\n\r\n  if (!alignmentOverflowsWindow) {\r\n    return popoverRelativePosition;\r\n  }\r\n\r\n  // Check the alignment with the opposite alignment\r\n  const oppositeAlign = positionTryFlipMap[align];\r\n  const oppositePopoverRelativePosition = alignToImplementationMap[\r\n    oppositeAlign\r\n  ](actionSize, popoverSize, separation);\r\n\r\n  const oppositeAlignmentOverflowsWindow = checkIfContentOverflowsWindowY(\r\n    actionStartPosition,\r\n    documentSize,\r\n    popoverSize,\r\n    oppositePopoverRelativePosition\r\n  );\r\n\r\n  return oppositeAlignmentOverflowsWindow\r\n    ? popoverRelativePosition\r\n    : oppositePopoverRelativePosition;\r\n};\r\n\r\nexport const setResponsiveAlignment = (\r\n  documentRect: DOMRect,\r\n  actionRect: DOMRect,\r\n  actionInlineStart: number,\r\n  popoverWidth: number,\r\n  popoverHeight: number,\r\n  computedStyle: CSSStyleDeclaration,\r\n  inlineAlign: ChPopoverAlign,\r\n  blockAlign: ChPopoverAlign,\r\n  positionTry: ChPopoverPositionTry\r\n): [number, number] => {\r\n  const separationX = computedStyle.getPropertyValue(POPOVER_SEPARATION_X);\r\n  const separationY = computedStyle.getPropertyValue(POPOVER_SEPARATION_Y);\r\n\r\n  // Alignment\r\n  const inlineAlignmentValue = getAlignmentValue(\r\n    inlineAlign,\r\n    actionInlineStart,\r\n    actionRect.width,\r\n    popoverWidth,\r\n    documentRect.width,\r\n    fromPxToNumber(separationX),\r\n    inlineAlign !== \"center\" && positionTry === \"flip-inline\"\r\n  );\r\n\r\n  const blockAlignmentValue = getAlignmentValue(\r\n    blockAlign,\r\n    actionRect.top,\r\n    actionRect.height,\r\n    popoverHeight,\r\n    documentRect.height,\r\n    fromPxToNumber(separationY),\r\n    blockAlign !== \"center\" && positionTry === \"flip-block\"\r\n  );\r\n\r\n  return [inlineAlignmentValue, blockAlignmentValue];\r\n};\r\n","@import \"../../common/base\";\r\n\r\n@include box-sizing();\r\n\r\n$ch-popover-x: calc(\r\n  (\r\n      var(--ch-popover-action-left) + var(--ch-popover-inline) +\r\n        var(--ch-popover-dragged-x)\r\n    ) * var(--ch-popover-rtl)\r\n);\r\n\r\n$ch-popover-y: calc(\r\n  var(--ch-popover-action-top) + var(--ch-popover-block) +\r\n    var(--ch-popover-dragged-y)\r\n);\r\n\r\n$ch-popover-x--same-layer: calc(\r\n  (var(--ch-popover-inline) + var(--ch-popover-dragged-x)) *\r\n    var(--ch-popover-rtl)\r\n);\r\n\r\n$ch-popover-y--same-layer: calc(\r\n  var(--ch-popover-block) + var(--ch-popover-dragged-y)\r\n);\r\n\r\n:host {\r\n  /**\r\n   * @prop --ch-popover-block-size:\r\n   * Specifies the block size of the popover. Useful for scenarios where the\r\n   * popover is resizable.\r\n   * @default max-content\r\n   */\r\n  --ch-popover-block-size: max-content;\r\n\r\n  /**\r\n   * @prop --ch-popover-inline-size:\r\n   * Specifies the inline size of the popover. Useful for scenarios where the\r\n   * popover is resizable.\r\n   * @default max-content\r\n   */\r\n  --ch-popover-inline-size: max-content;\r\n\r\n  /**\r\n   * @prop --ch-popover-max-block-size:\r\n   * Specifies the maximum block size of the popover. Useful for scenarios where the\r\n   * popover is resizable.\r\n   * @default auto\r\n   */\r\n  --ch-popover-max-block-size: auto;\r\n\r\n  /**\r\n     * @prop --ch-popover-max-inline-size:\r\n     * Specifies the maximum inline size of the popover. Useful for scenarios\r\n     * where the popover is resizable.\r\n     * @default auto\r\n     */\r\n  --ch-popover-max-inline-size: auto;\r\n\r\n  /**\r\n   * @prop --ch-popover-min-block-size:\r\n   * Specifies the minimum block size of the popover. Useful for scenarios where the\r\n   * popover is resizable.\r\n   * @default auto\r\n   */\r\n  --ch-popover-min-block-size: auto;\r\n\r\n  /**\r\n    * @prop --ch-popover-min-inline-size:\r\n    * Specifies the minimum inline size of the popover. Useful for scenarios\r\n    * where the popover is resizable.\r\n    * @default auto\r\n    */\r\n  --ch-popover-min-inline-size: auto;\r\n\r\n  /**\r\n   * @prop --ch-popover-resize-threshold:\r\n   * Specifies the size of the threshold to resize the popover.\r\n   * @default 4px\r\n   */\r\n  --ch-popover-resize-threshold: 8px;\r\n\r\n  /**\r\n   * @prop --ch-popover-separation-x:\r\n   * Specifies the separation between the action and popover in the x axis.\r\n   * @default 0px\r\n   */\r\n  --ch-popover-separation-x: 0px;\r\n\r\n  /**\r\n   * @prop --ch-popover-separation-y:\r\n   * Specifies the separation between the action and popover in the y axis.\r\n   * @default 0px\r\n   */\r\n  --ch-popover-separation-y: 0px;\r\n\r\n  --ch-popover-resize-threshold--half-negative: calc(\r\n    var(--ch-popover-resize-threshold) * -0.5\r\n  );\r\n\r\n  --ch-popover-border-inline-start-width: 0px;\r\n  --ch-popover-border-inline-end-width: 0px;\r\n  --ch-popover-border-block-start-width: 0px;\r\n  --ch-popover-border-block-end-width: 0px;\r\n\r\n  --ch-popover-resize__inline-start: calc(\r\n    var(--ch-popover-resize-threshold--half-negative) -\r\n      var(--ch-popover-border-inline-start-width) * 0.5\r\n  );\r\n\r\n  --ch-popover-resize__inline-end: calc(\r\n    var(--ch-popover-resize-threshold--half-negative) -\r\n      var(--ch-popover-border-inline-end-width) * 0.5\r\n  );\r\n\r\n  --ch-popover-resize__block-start: calc(\r\n    var(--ch-popover-resize-threshold--half-negative) -\r\n      var(--ch-popover-border-block-start-width) * 0.5\r\n  );\r\n\r\n  --ch-popover-resize__block-end: calc(\r\n    var(--ch-popover-resize-threshold--half-negative) -\r\n      var(--ch-popover-border-block-end-width) * 0.5\r\n  );\r\n\r\n  --ch-popover-dragged-x: 0px;\r\n  --ch-popover-dragged-y: 0px;\r\n  --ch-popover-rtl: 1;\r\n\r\n  display: grid; // Necessary to support gap property\r\n\r\n  // Necessary when the popover is not placed in a new top layer. For example,\r\n  // when nesting dropdowns\r\n  position: fixed;\r\n\r\n  inline-size: var(--ch-popover-inline-size);\r\n  block-size: var(--ch-popover-block-size);\r\n  min-inline-size: var(--ch-popover-min-inline-size);\r\n  min-block-size: var(--ch-popover-min-block-size);\r\n  max-inline-size: var(--ch-popover-max-inline-size);\r\n  max-block-size: var(--ch-popover-max-block-size);\r\n\r\n  // Reset browser defaults\r\n  margin: 0;\r\n  padding: 0;\r\n  background-color: unset;\r\n  border: unset;\r\n  color: unset;\r\n  overflow: visible;\r\n\r\n  top: 0;\r\n  inset-inline-start: 0;\r\n\r\n  // Alignment and Drag\r\n  translate: $ch-popover-x $ch-popover-y;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//             Hidden\r\n// - - - - - - - - - - - - - - - -\r\n// :host([hidden]) {\r\n//   display: grid !important;\r\n//   visibility: hidden;\r\n// }\r\n\r\n// // content-visibility: hidden is faster for rendering the content back, as\r\n// // it preserves the rendering state of the content (display: none does not)\r\n// @supports (content-visibility: hidden) {\r\n//   :host([hidden]) {\r\n//     content-visibility: hidden;\r\n//   }\r\n// }\r\n\r\n// @supports not (content-visibility: hidden) {\r\n//   :host([hidden]) {\r\n//     visibility: hidden;\r\n//   }\r\n// }\r\n\r\n// Prevents initial flickering\r\n:host(.gx-popover-prevent-flickering) {\r\n  // Necessary to override visibility: inherit from Stencil's hydration\r\n  visibility: hidden !important;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//              Drag\r\n// - - - - - - - - - - - - - - - -\r\n:host(.gx-popover-header-drag) {\r\n  display: grid;\r\n  grid-template-rows: max-content 1fr;\r\n}\r\n\r\n:host(.gx-popover-dragging) {\r\n  cursor: move;\r\n\r\n  // Remove any type of pointer when dragging, to make \"cursor: move\" effective\r\n  ::slotted(*) {\r\n    pointer-events: none;\r\n    user-select: none;\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//            Resizable\r\n// - - - - - - - - - - - - - - - -\r\n:host(.ch-popover-resizing) {\r\n  pointer-events: none;\r\n  user-select: none;\r\n}\r\n\r\n.edge {\r\n  &__block-start,\r\n  &__block-end {\r\n    position: fixed;\r\n    // This calc improves edge positioning when the border-width is much larger\r\n    // than the threshold\r\n    inset-inline: min(\r\n        0px,\r\n        calc(\r\n          (\r\n              var(--ch-popover-resize-threshold) -\r\n                var(--ch-popover-border-inline-start-width)\r\n            ) / 2\r\n        )\r\n      )\r\n      min(\r\n        0px,\r\n        calc(\r\n          (\r\n              var(--ch-popover-resize-threshold) -\r\n                var(--ch-popover-border-inline-end-width)\r\n            ) / 2\r\n        )\r\n      );\r\n    block-size: var(--ch-popover-resize-threshold);\r\n    cursor: ns-resize;\r\n  }\r\n\r\n  &__inline-start,\r\n  &__inline-end {\r\n    position: fixed;\r\n    // This calc improves edge positioning when the border-width is much larger\r\n    // than the threshold\r\n    inset-block: min(\r\n        0px,\r\n        calc(\r\n          (\r\n              var(--ch-popover-resize-threshold) -\r\n                var(--ch-popover-border-block-start-width)\r\n            ) / 2\r\n        )\r\n      )\r\n      min(\r\n        0px,\r\n        calc(\r\n          (\r\n              var(--ch-popover-resize-threshold) -\r\n                var(--ch-popover-border-block-end-width)\r\n            ) / 2\r\n        )\r\n      );\r\n    inline-size: var(--ch-popover-resize-threshold);\r\n    cursor: ew-resize;\r\n  }\r\n\r\n  &__block-start {\r\n    inset-block-start: var(--ch-popover-resize__block-start);\r\n  }\r\n\r\n  &__block-end {\r\n    inset-block-end: var(--ch-popover-resize__block-end);\r\n  }\r\n\r\n  &__inline-start {\r\n    inset-inline-start: var(--ch-popover-resize__inline-start);\r\n  }\r\n\r\n  &__inline-end {\r\n    inset-inline-end: var(--ch-popover-resize__inline-end);\r\n  }\r\n}\r\n\r\n.corner {\r\n  &__block-start-inline-start,\r\n  &__block-end-inline-end {\r\n    position: fixed;\r\n    block-size: var(--ch-popover-resize-threshold);\r\n    inline-size: var(--ch-popover-resize-threshold);\r\n    cursor: nwse-resize;\r\n  }\r\n\r\n  &__block-start-inline-end,\r\n  &__block-end-inline-start {\r\n    position: fixed;\r\n    block-size: var(--ch-popover-resize-threshold);\r\n    inline-size: var(--ch-popover-resize-threshold);\r\n    cursor: nesw-resize;\r\n  }\r\n\r\n  &__block-start-inline-start {\r\n    inset-block-start: var(--ch-popover-resize__block-start);\r\n    inset-inline-start: var(--ch-popover-resize__inline-start);\r\n  }\r\n\r\n  &__block-end-inline-end {\r\n    inset-block-end: var(--ch-popover-resize__block-end);\r\n    inset-inline-end: var(--ch-popover-resize__inline-end);\r\n  }\r\n\r\n  &__block-start-inline-end {\r\n    inset-block-start: var(--ch-popover-resize__block-start);\r\n    inset-inline-end: var(--ch-popover-resize__inline-end);\r\n  }\r\n\r\n  &__block-end-inline-start {\r\n    inset-block-end: var(--ch-popover-resize__block-end);\r\n    inset-inline-start: var(--ch-popover-resize__inline-start);\r\n  }\r\n}\r\n\r\n// \"Rotate\" resize cursors for the corners\r\n:host(.ch-popover-rtl) {\r\n  .corner__block-start-inline-start,\r\n  .corner__block-end-inline-end {\r\n    cursor: nesw-resize;\r\n  }\r\n}\r\n\r\n:host(.ch-popover-rtl) {\r\n  .corner__block-start-inline-end,\r\n  .corner__block-end-inline-start {\r\n    cursor: nwse-resize;\r\n  }\r\n}\r\n\r\n// Useful for observing changes in border size\r\n.resize-layer {\r\n  position: fixed;\r\n  inset: 0;\r\n  pointer-events: none;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//         Block alignment\r\n// - - - - - - - - - - - - - - - -\r\n// :host([block-align=\"outside-start\"]) {\r\n//   --ch-popover-block: calc(-100% + var(--ch-popover-separation-y) * -1);\r\n// }\r\n\r\n// :host([block-align=\"inside-start\"]) {\r\n//   --ch-popover-block: var(--ch-popover-separation-y);\r\n// }\r\n\r\n// :host([block-align=\"center\"]) {\r\n//   --ch-popover-block: calc(\r\n//     var(--ch-popover-action-height) / 2 - 50% + var(--ch-popover-separation-y)\r\n//   );\r\n// }\r\n\r\n// :host([block-align=\"inside-end\"]) {\r\n//   --ch-popover-block: calc(\r\n//     var(--ch-popover-action-height) - (100% + var(--ch-popover-separation-y))\r\n//   );\r\n// }\r\n\r\n// :host([block-align=\"outside-end\"]) {\r\n//   --ch-popover-block: calc(\r\n//     var(--ch-popover-action-height) + var(--ch-popover-separation-y)\r\n//   );\r\n// }\r\n\r\n// // - - - - - - - - - - - - - - - -\r\n// //        Inline alignment\r\n// // - - - - - - - - - - - - - - - -\r\n// :host([inline-align=\"outside-start\"]) {\r\n//   --ch-popover-inline: calc(-100% + var(--ch-popover-separation-x) * -1);\r\n// }\r\n\r\n// :host([inline-align=\"inside-start\"]) {\r\n//   --ch-popover-inline: var(--ch-popover-separation-x);\r\n// }\r\n\r\n// :host([inline-align=\"center\"]) {\r\n//   --ch-popover-inline: calc(\r\n//     var(--ch-popover-action-width) / 2 - 50% + var(--ch-popover-separation-x)\r\n//   );\r\n// }\r\n\r\n// :host([inline-align=\"inside-end\"]) {\r\n//   --ch-popover-inline: calc(\r\n//     var(--ch-popover-action-width) - (100% + var(--ch-popover-separation-x))\r\n//   );\r\n// }\r\n\r\n// :host([inline-align=\"outside-end\"]) {\r\n//   --ch-popover-inline: calc(\r\n//     var(--ch-popover-action-width) + var(--ch-popover-separation-x)\r\n//   );\r\n// }\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Watch,\r\n  Prop,\r\n  State,\r\n  h\r\n} from \"@stencil/core\";\r\nimport {\r\n  ChPopoverAlign,\r\n  ChPopoverResizeElement,\r\n  ChPopoverSizeMatch,\r\n  PopoverActionElement\r\n} from \"./types\";\r\nimport { forceCSSMinMax, isRTL } from \"../../common/utils\";\r\nimport { SyncWithRAF } from \"../../common/sync-with-frames\";\r\nimport { fromPxToNumber, setResponsiveAlignment } from \"./utils\";\r\n\r\nconst DRAGGING_CLASS = \"gx-popover-dragging\";\r\nconst POPOVER_PREVENT_FLICKERING_CLASS = \"gx-popover-prevent-flickering\";\r\nconst RESIZING_CLASS = \"ch-popover-resizing\";\r\n\r\n// Custom vars\r\nconst POPOVER_ALIGN_BLOCK = \"--ch-popover-block\";\r\nconst POPOVER_ALIGN_INLINE = \"--ch-popover-inline\";\r\n\r\nconst POPOVER_ACTION_WIDTH = \"--ch-popover-action-width\";\r\nconst POPOVER_ACTION_HEIGHT = \"--ch-popover-action-height\";\r\nconst POPOVER_ACTION_LEFT = \"--ch-popover-action-left\";\r\nconst POPOVER_ACTION_TOP = \"--ch-popover-action-top\";\r\n\r\nconst POPOVER_DRAGGED_X = \"--ch-popover-dragged-x\";\r\nconst POPOVER_DRAGGED_Y = \"--ch-popover-dragged-y\";\r\n\r\nconst POPOVER_BLOCK_SIZE = \"--ch-popover-block-size\";\r\nconst POPOVER_INLINE_SIZE = \"--ch-popover-inline-size\";\r\n\r\nconst POPOVER_MIN_BLOCK_SIZE = \"--ch-popover-min-block-size\";\r\nconst POPOVER_MIN_INLINE_SIZE = \"--ch-popover-min-inline-size\";\r\n\r\nconst POPOVER_BORDER_BLOCK_START_SIZE = \"--ch-popover-border-block-start-width\";\r\nconst POPOVER_BORDER_BLOCK_END_SIZE = \"--ch-popover-border-block-end-width\";\r\nconst POPOVER_BORDER_INLINE_START_SIZE =\r\n  \"--ch-popover-border-inline-start-width\";\r\nconst POPOVER_BORDER_INLINE_END_SIZE = \"--ch-popover-border-inline-end-width\";\r\n\r\nconst POPOVER_RTL_CLASS = \"ch-popover-rtl\";\r\nconst POPOVER_RTL = \"--ch-popover-rtl\";\r\nconst POPOVER_RTL_VALUE = \"-1\";\r\n\r\nconst addCursorInDocument = (cursor: string) =>\r\n  (document.body.style.cursor = cursor);\r\n\r\nconst resizingCursorDictionary: {\r\n  [key in ChPopoverResizeElement]: (rtl: boolean) => void;\r\n} = {\r\n  \"block-start\": () => addCursorInDocument(\"ns-resize\"),\r\n\r\n  \"block-end\": () => addCursorInDocument(\"ns-resize\"),\r\n\r\n  \"inline-start\": () => addCursorInDocument(\"ew-resize\"),\r\n\r\n  \"inline-end\": () => addCursorInDocument(\"ew-resize\"),\r\n\r\n  \"block-start-inline-start\": rtl =>\r\n    addCursorInDocument(rtl ? \"nesw-resize\" : \"nwse-resize\"),\r\n\r\n  \"block-start-inline-end\": rtl =>\r\n    addCursorInDocument(rtl ? \"nwse-resize\" : \"nesw-resize\"),\r\n\r\n  \"block-end-inline-start\": rtl =>\r\n    addCursorInDocument(rtl ? \"nwse-resize\" : \"nesw-resize\"),\r\n\r\n  \"block-end-inline-end\": rtl =>\r\n    addCursorInDocument(rtl ? \"nesw-resize\" : \"nwse-resize\")\r\n};\r\n\r\n// Utils\r\n\r\nconst setProperty = (element: HTMLElement, property: string, value: number) =>\r\n  element.style.setProperty(property, `${value}px`);\r\n\r\nconst addPopoverTargetElement = (\r\n  actionElement: PopoverActionElement,\r\n  popoverElement: HTMLElement,\r\n  addAction: boolean\r\n) => {\r\n  if (actionElement && addAction) {\r\n    actionElement.popoverTargetElement = popoverElement;\r\n  }\r\n};\r\n\r\nconst removePopoverTargetElement = (actionElement: PopoverActionElement) => {\r\n  if (actionElement) {\r\n    actionElement.popoverTargetElement = undefined;\r\n  }\r\n};\r\n\r\n/**\r\n * The `ch-popover` component represents a popover container that is positioned\r\n * relative to an element, but placed on the top layer using `position: fixed`.\r\n */\r\n@Component({\r\n  tag: \"ch-popover\",\r\n  styleUrl: \"popover.scss\",\r\n  shadow: true\r\n})\r\nexport class ChPopover {\r\n  // Sync computations with frames\r\n  #borderSizeRAF: SyncWithRAF; // Don't allocate memory until needed when dragging\r\n  #dragRAF: SyncWithRAF; // Don't allocate memory until needed when dragging\r\n  #positionAdjustRAF: SyncWithRAF; // Don't allocate memory until needed\r\n  #resizeRAF: SyncWithRAF; // Don't allocate memory until needed when dragging\r\n\r\n  #adjustAlignment = false;\r\n\r\n  // Watchers\r\n  #checkPositionWatcher = false;\r\n  #checkBorderSizeWatcher = false;\r\n  #borderSizeObserver: ResizeObserver;\r\n  #resizeObserver: ResizeObserver;\r\n  #rtlWatcher: MutationObserver;\r\n\r\n  // Drag\r\n  #draggedDistanceX: number = 0;\r\n  #draggedDistanceY: number = 0;\r\n  #dragging = false;\r\n  #initialDragEvent: MouseEvent;\r\n  #lastDragEvent: MouseEvent;\r\n  #isRTLDirection: boolean;\r\n\r\n  // Resize\r\n  #currentEdge: ChPopoverResizeElement;\r\n  #draggedDistanceXForResize: number = 0;\r\n  #draggedDistanceYForResize: number = 0;\r\n  #maxBlockSize: number = 0;\r\n  #maxInlineSize: number = 0;\r\n  #minBlockSize: number = 0;\r\n  #minInlineSize: number = 0;\r\n  #resizeWasMade = false;\r\n\r\n  #resizeByDirectionDictionary = {\r\n    block: (popoverRect: DOMRect, direction: \"start\" | \"end\") => {\r\n      let currentDraggedDistanceY =\r\n        this.#lastDragEvent.clientY - this.#initialDragEvent.clientY;\r\n\r\n      // Start direction inverts the increment\r\n      if (direction === \"start\") {\r\n        currentDraggedDistanceY = -currentDraggedDistanceY;\r\n      }\r\n\r\n      const newBlockSize = popoverRect.height + currentDraggedDistanceY;\r\n      const newRestrictedBlockSize = forceCSSMinMax(\r\n        newBlockSize,\r\n        this.#minBlockSize,\r\n        this.#maxBlockSize\r\n      );\r\n\r\n      // Do not apply resizes or translations if the control is at the minimum\r\n      // or maximum size\r\n      if (newRestrictedBlockSize === popoverRect.height) {\r\n        return;\r\n      }\r\n\r\n      // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n      // By resizing the start edge the control is translated to improve the UX\r\n      if (direction === \"start\") {\r\n        this.#draggedDistanceYForResize -= currentDraggedDistanceY;\r\n\r\n        setProperty(\r\n          this.el,\r\n          POPOVER_DRAGGED_Y,\r\n          this.#draggedDistanceYForResize\r\n        );\r\n      }\r\n\r\n      setProperty(this.el, POPOVER_BLOCK_SIZE, newRestrictedBlockSize);\r\n    },\r\n\r\n    inline: (popoverRect: DOMRect, direction: \"start\" | \"end\") => {\r\n      let currentDraggedDistanceX =\r\n        this.#lastDragEvent.clientX - this.#initialDragEvent.clientX;\r\n\r\n      if (this.#isRTLDirection) {\r\n        currentDraggedDistanceX = -currentDraggedDistanceX;\r\n      }\r\n\r\n      // Start direction inverts the increment\r\n      if (direction === \"start\") {\r\n        currentDraggedDistanceX = -currentDraggedDistanceX;\r\n      }\r\n\r\n      const newInlineSize = popoverRect.width + currentDraggedDistanceX;\r\n      const newRestrictedInlineSize = forceCSSMinMax(\r\n        newInlineSize,\r\n        this.#minInlineSize,\r\n        this.#maxInlineSize\r\n      );\r\n\r\n      // Do not apply resizes or translations if the control is at the minimum\r\n      // or maximum size\r\n      if (newRestrictedInlineSize === popoverRect.width) {\r\n        return;\r\n      }\r\n\r\n      // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n      // By resizing the start edge the control is translated to improve the UX\r\n      if (direction === \"start\") {\r\n        this.#draggedDistanceXForResize -= currentDraggedDistanceX;\r\n\r\n        setProperty(\r\n          this.el,\r\n          POPOVER_DRAGGED_X,\r\n          this.#draggedDistanceXForResize\r\n        );\r\n      }\r\n\r\n      setProperty(this.el, POPOVER_INLINE_SIZE, newRestrictedInlineSize);\r\n    }\r\n  } as const;\r\n\r\n  #resizeEdgesAndCornersDictionary: {\r\n    [key in ChPopoverResizeElement]: (popoverRect: DOMRect) => void;\r\n  } = {\r\n    \"block-start\": popoverRect =>\r\n      this.#resizeByDirectionDictionary.block(popoverRect, \"start\"),\r\n\r\n    \"block-end\": popoverRect =>\r\n      this.#resizeByDirectionDictionary.block(popoverRect, \"end\"),\r\n\r\n    \"inline-start\": popoverRect =>\r\n      this.#resizeByDirectionDictionary.inline(popoverRect, \"start\"),\r\n\r\n    \"inline-end\": popoverRect =>\r\n      this.#resizeByDirectionDictionary.inline(popoverRect, \"end\"),\r\n\r\n    \"block-start-inline-start\": popoverRect => {\r\n      this.#resizeByDirectionDictionary.block(popoverRect, \"start\");\r\n      this.#resizeByDirectionDictionary.inline(popoverRect, \"start\");\r\n    },\r\n\r\n    \"block-start-inline-end\": popoverRect => {\r\n      this.#resizeByDirectionDictionary.block(popoverRect, \"start\");\r\n      this.#resizeByDirectionDictionary.inline(popoverRect, \"end\");\r\n    },\r\n\r\n    \"block-end-inline-start\": popoverRect => {\r\n      this.#resizeByDirectionDictionary.block(popoverRect, \"end\");\r\n      this.#resizeByDirectionDictionary.inline(popoverRect, \"start\");\r\n    },\r\n\r\n    \"block-end-inline-end\": popoverRect => {\r\n      this.#resizeByDirectionDictionary.block(popoverRect, \"end\");\r\n      this.#resizeByDirectionDictionary.inline(popoverRect, \"end\");\r\n    }\r\n  };\r\n\r\n  // Refs\r\n  #resizeLayer: HTMLDivElement;\r\n  #windowRef: Window;\r\n\r\n  @Element() el: HTMLChPopoverElement;\r\n\r\n  @State() resizing = false;\r\n\r\n  /**\r\n   * `true` if the `actionElement` binds the ch-popover using an external ID.\r\n   * If so, the `popoverTargetElement` property won't be configured in the\r\n   * action element.\r\n   */\r\n  @Prop() readonly actionById: boolean = false;\r\n\r\n  /**\r\n   * Specifies a reference of the action that controls the popover control.\r\n   */\r\n  @Prop() readonly actionElement?: PopoverActionElement;\r\n  @Watch(\"actionElement\")\r\n  handleActionChange(\r\n    newActionElement: PopoverActionElement,\r\n    oldActionElement: PopoverActionElement\r\n  ) {\r\n    // Reset dragged distance\r\n    this.#draggedDistanceX = 0;\r\n    this.#draggedDistanceY = 0;\r\n\r\n    // Remove previous action element\r\n    removePopoverTargetElement(oldActionElement);\r\n    addPopoverTargetElement(newActionElement, this.el, !this.actionById);\r\n\r\n    // Schedule update for watchers\r\n    this.#checkPositionWatcher = true;\r\n  }\r\n\r\n  /**\r\n   * Specifies the drag behavior of the popover.\r\n   * If `allowDrag === \"header\"`, a slot with the `\"header\"` name will be\r\n   * available to place the header content.\r\n   */\r\n  @Prop() readonly allowDrag: \"box\" | \"header\" | \"no\" = \"no\";\r\n\r\n  /**\r\n   * Specifies the block alignment of the window.\r\n   */\r\n  @Prop() readonly blockAlign: ChPopoverAlign = \"center\";\r\n  @Watch(\"blockAlign\")\r\n  handleBlockChange() {\r\n    this.#adjustAlignment = true;\r\n  }\r\n\r\n  /**\r\n   * Specifies how the popover adapts its block size.\r\n   *  - \"content\": The block size of the control will be determined by its\r\n   *    content block size.\r\n   *  - \"action-element\": The block size of the control will match the block\r\n   *    size of the `actionElement`.\r\n   *  - \"action-element-as-minimum\": The minimum block size of the control\r\n   *    will match the block size of the `actionElement`.\r\n   *\r\n   * If the control is resized at runtime, only the \"action-element-as-minimum\"\r\n   * value will still work.\r\n   */\r\n  @Prop() readonly blockSizeMatch: ChPopoverSizeMatch = \"content\";\r\n  @Watch(\"blockSizeMatch\")\r\n  blockSizeWatchChange(newValue: ChPopoverSizeMatch) {\r\n    if (this.#resizeWasMade) {\r\n      return;\r\n    }\r\n\r\n    // Remove the size constrains\r\n    if (newValue === \"content\") {\r\n      this.el.style.removeProperty(POPOVER_BLOCK_SIZE);\r\n      this.el.style.removeProperty(POPOVER_MIN_BLOCK_SIZE);\r\n    } else if (newValue === \"action-element\") {\r\n      this.el.style.removeProperty(POPOVER_MIN_BLOCK_SIZE);\r\n    } else {\r\n      this.el.style.removeProperty(POPOVER_BLOCK_SIZE);\r\n    }\r\n\r\n    // Queue a position adjustment\r\n    this.#adjustAlignment = true;\r\n  }\r\n\r\n  /**\r\n   * This property only applies for `\"manual\"` mode. In native popovers, when\r\n   * using `\"manual\"` mode the popover doesn't close when clicking outside the\r\n   * control. This property allows to close the popover when clicking outside\r\n   * in `\"manual\"` mode.\r\n   */\r\n  @Prop() readonly closeOnClickOutside: boolean = false;\r\n\r\n  /**\r\n   * `true` if the control is not stacked with another top layer.\r\n   */\r\n  @Prop() readonly firstLayer: boolean = true;\r\n\r\n  /**\r\n   * Specifies whether the popover is hidden or visible.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/ban-default-true\r\n  @Prop({ mutable: true, reflect: true }) hidden = true;\r\n  @Watch(\"hidden\")\r\n  handleHiddenChange(newHiddenValue: boolean) {\r\n    // Schedule update for watchers\r\n    this.#checkBorderSizeWatcher = true;\r\n    this.#checkPositionWatcher = true;\r\n\r\n    // Update the popover visualization\r\n    if (newHiddenValue) {\r\n      if (this.firstLayer) {\r\n        this.#avoidFlickeringInTheNextRender(true);\r\n      }\r\n\r\n      this.el.hidePopover();\r\n    } else {\r\n      this.#showPopover();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Specifies the inline alignment of the window.\r\n   */\r\n  @Prop() readonly inlineAlign: ChPopoverAlign = \"center\";\r\n  @Watch(\"inlineAlign\")\r\n  handleInlineChange() {\r\n    this.#adjustAlignment = true;\r\n  }\r\n\r\n  /**\r\n   * Specifies how the popover adapts its inline size.\r\n   *  - \"content\": The inline size of the control will be determined by its\r\n   *    content inline size.\r\n   *  - \"action-element\": The inline size of the control will match the inline\r\n   *    size of the `actionElement`.\r\n   *  - \"action-element-as-minimum\": The minimum inline size of the control\r\n   *    will match the inline size of the `actionElement`.\r\n   *\r\n   * If the control is resized at runtime, only the \"action-element-as-minimum\"\r\n   * value will still work.\r\n   */\r\n  @Prop() readonly inlineSizeMatch: ChPopoverSizeMatch = \"content\";\r\n  @Watch(\"inlineSizeMatch\")\r\n  inlineSizeWatchChange(newValue: ChPopoverSizeMatch) {\r\n    if (this.#resizeWasMade) {\r\n      return;\r\n    }\r\n\r\n    // Remove the size constrains\r\n    if (newValue === \"content\") {\r\n      this.el.style.removeProperty(POPOVER_INLINE_SIZE);\r\n      this.el.style.removeProperty(POPOVER_MIN_INLINE_SIZE);\r\n    } else if (newValue === \"action-element\") {\r\n      this.el.style.removeProperty(POPOVER_MIN_INLINE_SIZE);\r\n    } else {\r\n      this.el.style.removeProperty(POPOVER_INLINE_SIZE);\r\n    }\r\n\r\n    // Queue a position adjustment\r\n    this.#adjustAlignment = true;\r\n  }\r\n\r\n  /**\r\n   * Popovers that have the `\"auto\"` state can be \"light dismissed\" by\r\n   * selecting outside the popover area, and generally only allow one popover\r\n   * to be displayed on-screen at a time. By contrast, `\"manual\"` popovers must\r\n   * always be explicitly hidden, but allow for use cases such as nested\r\n   * popovers in menus.\r\n   */\r\n  @Prop({ attribute: \"popover\" }) readonly mode: \"auto\" | \"manual\" = \"auto\";\r\n\r\n  /**\r\n   * Specifies an alternate position to try when the control overflows the\r\n   * window.\r\n   */\r\n  @Prop() readonly positionTry: \"flip-block\" | \"flip-inline\" | \"none\" = \"none\";\r\n\r\n  /**\r\n   * Specifies whether the control can be resized. If `true` the control can be\r\n   * resized at runtime by dragging the edges or corners.\r\n   */\r\n  @Prop() readonly resizable: boolean = false;\r\n  @Watch(\"resizable\")\r\n  resizableChanged() {\r\n    // Schedule update for border size watcher\r\n    this.#checkBorderSizeWatcher = true;\r\n  }\r\n\r\n  /**\r\n   * Emitted when the popover is opened.\r\n   */\r\n  @Event() popoverOpened: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when the popover is closed.\r\n   */\r\n  @Event() popoverClosed: EventEmitter;\r\n\r\n  #showPopover = () => {\r\n    this.el.showPopover();\r\n    this.#addClickOutsideWatcherIfNecessary();\r\n  };\r\n\r\n  #handlePopoverCloseOnClickOutside = (event: MouseEvent) => {\r\n    if (!event.composedPath().includes(this.el)) {\r\n      this.#removeClickOutsideWatcher();\r\n\r\n      this.hidden = true;\r\n      this.popoverClosed.emit();\r\n    }\r\n  };\r\n\r\n  #addClickOutsideWatcherIfNecessary = () => {\r\n    if (this.mode === \"manual\" && this.closeOnClickOutside) {\r\n      document.addEventListener(\r\n        \"click\",\r\n        this.#handlePopoverCloseOnClickOutside,\r\n        // We should not add \"capture: true\" to let other elements interrupt\r\n        // this event in the capture phase\r\n        { passive: true }\r\n      );\r\n    }\r\n  };\r\n\r\n  #removeClickOutsideWatcher = () => {\r\n    document.removeEventListener(\r\n      \"click\",\r\n      this.#handlePopoverCloseOnClickOutside\r\n    );\r\n  };\r\n\r\n  #addDraggingClass = () => {\r\n    if (!this.#dragging) {\r\n      this.el.classList.add(DRAGGING_CLASS);\r\n      this.#dragging = true;\r\n    }\r\n  };\r\n\r\n  #removeDraggingClass = () => {\r\n    this.el.classList.remove(DRAGGING_CLASS);\r\n    this.#dragging = false;\r\n  };\r\n\r\n  #avoidFlickeringInTheNextRender = (addClass: boolean) => {\r\n    if (addClass) {\r\n      // Class to prevent flickering in the first position adjustment\r\n      this.el.classList.add(POPOVER_PREVENT_FLICKERING_CLASS);\r\n    } else {\r\n      this.el.classList.remove(POPOVER_PREVENT_FLICKERING_CLASS);\r\n    }\r\n  };\r\n\r\n  #setPositionWatcher = () => {\r\n    if (!this.actionElement || this.hidden) {\r\n      this.#removePositionWatcher();\r\n      return;\r\n    }\r\n\r\n    // If it was observing the previous container, disconnect the observer\r\n    if (this.#resizeObserver) {\r\n      this.#resizeObserver.disconnect();\r\n    }\r\n\r\n    this.#positionAdjustRAF ??= new SyncWithRAF();\r\n    this.#resizeObserver ??= new ResizeObserver(this.#updatePositionRAF);\r\n\r\n    this.#resizeObserver.observe(this.actionElement);\r\n    this.#resizeObserver.observe(this.el);\r\n\r\n    // Faster first render. Don't wait until the next animation frame\r\n    this.#updatePosition();\r\n\r\n    // The popover's position is now set, so we no longer have to hide it\r\n    if (this.firstLayer) {\r\n      requestAnimationFrame(() => {\r\n        this.#avoidFlickeringInTheNextRender(false);\r\n      });\r\n    }\r\n\r\n    // Listeners\r\n    this.#windowRef.addEventListener(\"resize\", this.#updatePositionRAF, {\r\n      passive: true\r\n    });\r\n    document.addEventListener(\"scroll\", this.#updatePositionRAF, {\r\n      capture: true,\r\n      passive: true\r\n    });\r\n  };\r\n\r\n  #updatePositionRAF = () => {\r\n    this.#positionAdjustRAF.perform(this.#updatePosition);\r\n  };\r\n\r\n  #updatePosition = () => {\r\n    // - - - - - - - - - - - - - DOM read operations - - - - - - - - - - - - -\r\n    const documentRect = document.documentElement.getBoundingClientRect();\r\n    const actionRect = this.actionElement.getBoundingClientRect();\r\n    const popoverRect = this.el.getBoundingClientRect();\r\n    const computedStyle = getComputedStyle(this.el);\r\n\r\n    const actionInlineStart = this.#getActionInlineStartPosition(\r\n      documentRect,\r\n      actionRect\r\n    );\r\n\r\n    this.#setResponsiveAlignment(\r\n      documentRect,\r\n      actionRect,\r\n      actionInlineStart,\r\n      popoverRect,\r\n      computedStyle\r\n    );\r\n\r\n    // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n    setProperty(this.el, POPOVER_ACTION_WIDTH, actionRect.width);\r\n    setProperty(this.el, POPOVER_ACTION_HEIGHT, actionRect.height);\r\n    setProperty(this.el, POPOVER_ACTION_LEFT, actionInlineStart);\r\n    setProperty(this.el, POPOVER_ACTION_TOP, actionRect.top);\r\n  };\r\n\r\n  #getActionInlineStartPosition = (\r\n    documentRect: DOMRect,\r\n    actionRect: DOMRect\r\n  ) =>\r\n    this.#isRTLDirection\r\n      ? documentRect.width - (actionRect.left + actionRect.width)\r\n      : actionRect.left;\r\n\r\n  #setResponsiveAlignment = (\r\n    documentRect: DOMRect,\r\n    actionRect: DOMRect,\r\n    actionInlineStart: number,\r\n    popoverRect: DOMRect,\r\n    computedStyle: CSSStyleDeclaration\r\n  ) => {\r\n    const popoverWidth = this.#getPopoverInlineSizeAndFixItIfNecessary(\r\n      actionRect,\r\n      popoverRect\r\n    );\r\n    const popoverHeight = this.#getPopoverBlockSizeAndFixItIfNecessary(\r\n      actionRect,\r\n      popoverRect\r\n    );\r\n\r\n    const alignment = setResponsiveAlignment(\r\n      documentRect,\r\n      actionRect,\r\n      actionInlineStart,\r\n      popoverWidth,\r\n      popoverHeight,\r\n      computedStyle,\r\n      this.inlineAlign,\r\n      this.blockAlign,\r\n      this.positionTry\r\n    );\r\n\r\n    // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n    setProperty(this.el, POPOVER_ALIGN_INLINE, alignment[0]);\r\n    setProperty(this.el, POPOVER_ALIGN_BLOCK, alignment[1]);\r\n  };\r\n\r\n  #getPopoverInlineSizeAndFixItIfNecessary = (\r\n    actionRect: DOMRect,\r\n    popoverRect: DOMRect\r\n  ) => {\r\n    if (this.inlineSizeMatch === \"action-element-as-minimum\") {\r\n      setProperty(this.el, POPOVER_MIN_INLINE_SIZE, actionRect.width);\r\n      return actionRect.width;\r\n    }\r\n\r\n    // Size is determined by the content\r\n    if (this.#resizeWasMade || this.inlineSizeMatch === \"content\") {\r\n      return popoverRect.width;\r\n    }\r\n\r\n    // Size is the same as the `actionElement`\r\n    setProperty(this.el, POPOVER_INLINE_SIZE, actionRect.width);\r\n    return actionRect.width;\r\n  };\r\n\r\n  #getPopoverBlockSizeAndFixItIfNecessary = (\r\n    actionRect: DOMRect,\r\n    popoverRect: DOMRect\r\n  ) => {\r\n    if (this.blockSizeMatch === \"action-element-as-minimum\") {\r\n      setProperty(this.el, POPOVER_MIN_BLOCK_SIZE, actionRect.height);\r\n      return actionRect.height;\r\n    }\r\n\r\n    // Size is determined by the content\r\n    if (this.#resizeWasMade || this.blockSizeMatch === \"content\") {\r\n      return popoverRect.height;\r\n    }\r\n\r\n    // Size is the same as the `actionElement`\r\n    setProperty(this.el, POPOVER_BLOCK_SIZE, actionRect.height);\r\n    return actionRect.height;\r\n  };\r\n\r\n  #removePositionWatcher = () => {\r\n    if (this.#resizeObserver) {\r\n      this.#resizeObserver.disconnect();\r\n      this.#resizeObserver = null; // Free the memory\r\n    }\r\n\r\n    // Remove listeners\r\n    this.#windowRef.removeEventListener(\"resize\", this.#updatePositionRAF);\r\n    document.removeEventListener(\"scroll\", this.#updatePositionRAF, {\r\n      capture: true\r\n    });\r\n  };\r\n\r\n  #handlePopoverToggle = (event: ToggleEvent) => {\r\n    const willBeHidden = !(event.newState === \"open\");\r\n    this.hidden = willBeHidden;\r\n\r\n    // Emit events only when the action is committed by the user\r\n    if (willBeHidden) {\r\n      this.popoverClosed.emit();\r\n    } else {\r\n      this.popoverOpened.emit();\r\n    }\r\n  };\r\n\r\n  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n  //                           Drag implementation\r\n  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n  #handleMouseDown = (event: MouseEvent) => {\r\n    // We should not add preventDefault in this instance, because we would\r\n    // prevent some normal actions like clicking a button or focusing an input\r\n\r\n    this.#dragRAF ||= new SyncWithRAF();\r\n    this.#initialDragEvent = event;\r\n\r\n    // Add listeners\r\n    document.addEventListener(\"mousemove\", this.#trackElementDragRAF, {\r\n      capture: true\r\n    });\r\n\r\n    document.addEventListener(\"mouseup\", this.#handleDragEnd, {\r\n      capture: true,\r\n      passive: true\r\n    });\r\n  };\r\n\r\n  #trackElementDragRAF = (event: MouseEvent) => {\r\n    this.#dragRAF.perform(this.#trackElementDrag, () => {\r\n      // Improve drag UX by not selecting any button or clicking interactive\r\n      // elements\r\n      event.preventDefault();\r\n\r\n      // We remove the pointer-events and user-select properties after the first\r\n      // \"mousemove\", otherwise double clicking to select text would not work\r\n      this.#addDraggingClass();\r\n\r\n      this.#lastDragEvent = event;\r\n    });\r\n  };\r\n\r\n  #trackElementDrag = () => {\r\n    // - - - - - - - - - - - - - DOM read operations - - - - - - - - - - - - -\r\n    const currentDraggedDistanceX =\r\n      this.#lastDragEvent.clientX - this.#initialDragEvent.clientX;\r\n    const currentDraggedDistanceY =\r\n      this.#lastDragEvent.clientY - this.#initialDragEvent.clientY;\r\n\r\n    // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n    // Update total dragged distance in X\r\n    if (currentDraggedDistanceX !== 0) {\r\n      this.#draggedDistanceX += this.#isRTLDirection // Set dragged distance depending on RTL value\r\n        ? -currentDraggedDistanceX\r\n        : currentDraggedDistanceX;\r\n      setProperty(this.el, POPOVER_DRAGGED_X, this.#draggedDistanceX);\r\n    }\r\n\r\n    // Update total dragged distance in Y\r\n    if (currentDraggedDistanceY !== 0) {\r\n      this.#draggedDistanceY += currentDraggedDistanceY;\r\n      setProperty(this.el, POPOVER_DRAGGED_Y, this.#draggedDistanceY);\r\n    }\r\n\r\n    // Update last point\r\n    this.#initialDragEvent = this.#lastDragEvent;\r\n  };\r\n\r\n  #handleDragEnd = () => {\r\n    // Cancel RAF to prevent access to undefined references\r\n    if (this.#dragRAF) {\r\n      this.#dragRAF.cancel();\r\n    }\r\n\r\n    // Remove listeners\r\n    document.removeEventListener(\"mousemove\", this.#trackElementDragRAF, {\r\n      capture: true\r\n    });\r\n\r\n    document.removeEventListener(\"mouseup\", this.#handleDragEnd, {\r\n      capture: true\r\n    });\r\n\r\n    this.#removeDraggingClass();\r\n\r\n    // Free the memory\r\n    this.#dragRAF = null;\r\n    this.#initialDragEvent = null;\r\n    this.#lastDragEvent = null;\r\n  };\r\n\r\n  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n  //                          Resize implementation\r\n  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n  #handleEdgeResize = (edge: ChPopoverResizeElement) => (event: MouseEvent) => {\r\n    this.resizing = true;\r\n    this.#resizeRAF ||= new SyncWithRAF();\r\n    this.#currentEdge = edge;\r\n    this.#initialDragEvent = event;\r\n\r\n    // Specify the cursor for the resize operation. Useful to avoid showing\r\n    // incorrect cursors during resizing\r\n    resizingCursorDictionary[this.#currentEdge](this.#isRTLDirection);\r\n\r\n    // Initialize drag variables to improve block-start and inline-start\r\n    // resizing. Otherwise, the popover will always remain in the same X and Y\r\n    // position, even when the block-start or inline-start edges are resized\r\n    this.#draggedDistanceXForResize = this.#draggedDistanceX;\r\n    this.#draggedDistanceYForResize = this.#draggedDistanceY;\r\n\r\n    // Get minimum and maximum sizes on first resize operation\r\n    const computedStyle = getComputedStyle(this.el);\r\n    this.#maxBlockSize = fromPxToNumber(computedStyle.maxBlockSize);\r\n    this.#maxInlineSize = fromPxToNumber(computedStyle.maxInlineSize);\r\n    this.#minBlockSize = fromPxToNumber(computedStyle.minBlockSize);\r\n    this.#minInlineSize = fromPxToNumber(computedStyle.minInlineSize);\r\n\r\n    // Avoid repositioning the popover\r\n    this.#removePositionWatcher();\r\n\r\n    // Avoid watching border changes during the resize\r\n    this.#removeBorderSizeWatcher();\r\n\r\n    // Avoid closing the popover during the resize\r\n    this.#removeClickOutsideWatcher();\r\n\r\n    // Add listeners\r\n    document.addEventListener(\"mousemove\", this.#trackElementResizeRAF, {\r\n      capture: true\r\n    });\r\n\r\n    document.addEventListener(\"mouseup\", this.#handleResizeEnd, {\r\n      capture: true,\r\n      passive: true\r\n    });\r\n  };\r\n\r\n  #trackElementResizeRAF = (event: MouseEvent) => {\r\n    this.#resizeRAF.perform(this.#trackElementResize, () => {\r\n      // Improve drag UX by not selecting any button or clicking interactive\r\n      // elements\r\n      event.preventDefault();\r\n\r\n      // We remove the pointer-events and user-select properties after the first\r\n      // \"mousemove\", otherwise double clicking to select text would not work\r\n      this.#addDraggingClass();\r\n\r\n      this.#lastDragEvent = event;\r\n    });\r\n  };\r\n\r\n  #trackElementResize = () => {\r\n    // - - - - - - - - - - - - - DOM read operations - - - - - - - - - - - - -\r\n    const popoverRect = this.el.getBoundingClientRect();\r\n\r\n    // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n    this.#resizeEdgesAndCornersDictionary[this.#currentEdge](popoverRect);\r\n    this.#resizeWasMade = true;\r\n\r\n    // Update last point\r\n    this.#initialDragEvent = this.#lastDragEvent;\r\n  };\r\n\r\n  #handleResizeEnd = () => {\r\n    this.resizing = false;\r\n\r\n    // Cancel RAF to prevent access to undefined references\r\n    if (this.#resizeRAF) {\r\n      this.#resizeRAF.cancel();\r\n    }\r\n\r\n    // Reset document cursor back to normal\r\n    document.body.style.cursor = null;\r\n\r\n    // Reset dragged distance to its original value\r\n    setProperty(this.el, POPOVER_DRAGGED_X, this.#draggedDistanceX);\r\n    setProperty(this.el, POPOVER_DRAGGED_Y, this.#draggedDistanceY);\r\n\r\n    // Update the position of the popover when the resize ends\r\n    this.#setPositionWatcher();\r\n\r\n    // Start again watching border size changes\r\n    this.#setBorderSizeWatcher();\r\n\r\n    // Add again the click outside watcher if necessary. RAF is needed to\r\n    // prevent the popover from closing, since the document click event will be\r\n    // dispatched after the execution of this function (mouseup handler)\r\n    requestAnimationFrame(this.#addClickOutsideWatcherIfNecessary);\r\n\r\n    // Remove listeners\r\n    document.removeEventListener(\"mousemove\", this.#trackElementResizeRAF, {\r\n      capture: true\r\n    });\r\n\r\n    document.removeEventListener(\"mouseup\", this.#handleResizeEnd, {\r\n      capture: true\r\n    });\r\n\r\n    this.#removeDraggingClass();\r\n\r\n    // Free the memory\r\n    this.#resizeRAF = null;\r\n    this.#initialDragEvent = null;\r\n    this.#lastDragEvent = null;\r\n  };\r\n\r\n  /**\r\n   * This observer watches the size of each border in the control to adjust the\r\n   * position of the invisible resize elements (edges and corners).\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #setBorderSizeWatcher = () => {\r\n    if (!this.resizable || this.hidden) {\r\n      this.#removeBorderSizeWatcher();\r\n      return;\r\n    }\r\n\r\n    this.#borderSizeRAF ??= new SyncWithRAF();\r\n    this.#borderSizeObserver = new ResizeObserver(this.#updateBorderSizeRAF);\r\n\r\n    // Observe the size of the edges to know if the border\r\n    this.#borderSizeObserver.observe(this.el, { box: \"border-box\" });\r\n    this.#borderSizeObserver.observe(this.#resizeLayer);\r\n  };\r\n\r\n  #updateBorderSizeRAF = () => {\r\n    this.#borderSizeRAF.perform(this.#updateBorderSize);\r\n  };\r\n\r\n  #updateBorderSize = () => {\r\n    // - - - - - - - - - - - - - DOM read operations - - - - - - - - - - - - -\r\n    const computedStyle = getComputedStyle(this.el);\r\n\r\n    // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n    this.el.style.setProperty(\r\n      POPOVER_BORDER_BLOCK_START_SIZE,\r\n      computedStyle.borderBlockStartWidth\r\n    );\r\n\r\n    this.el.style.setProperty(\r\n      POPOVER_BORDER_BLOCK_END_SIZE,\r\n      computedStyle.borderBlockEndWidth\r\n    );\r\n\r\n    this.el.style.setProperty(\r\n      POPOVER_BORDER_INLINE_START_SIZE,\r\n      computedStyle.borderInlineStartWidth\r\n    );\r\n\r\n    this.el.style.setProperty(\r\n      POPOVER_BORDER_INLINE_END_SIZE,\r\n      computedStyle.borderInlineEndWidth\r\n    );\r\n  };\r\n\r\n  #removeBorderSizeWatcher = () => {\r\n    if (this.#borderSizeObserver) {\r\n      this.#borderSizeObserver.disconnect();\r\n      this.#borderSizeObserver = null; // Free the memory\r\n    }\r\n\r\n    this.#borderSizeRAF = null; // Free the memory\r\n  };\r\n\r\n  connectedCallback() {\r\n    this.#windowRef = window;\r\n\r\n    // Set RTL watcher\r\n    this.#rtlWatcher = new MutationObserver(() => {\r\n      this.#isRTLDirection = isRTL();\r\n\r\n      if (this.#isRTLDirection) {\r\n        this.el.style.setProperty(POPOVER_RTL, POPOVER_RTL_VALUE);\r\n        this.el.classList.add(POPOVER_RTL_CLASS);\r\n      } else {\r\n        this.el.style.removeProperty(POPOVER_RTL);\r\n        this.el.classList.remove(POPOVER_RTL_CLASS);\r\n      }\r\n    });\r\n\r\n    if (this.firstLayer) {\r\n      this.#avoidFlickeringInTheNextRender(true);\r\n    }\r\n\r\n    // Observe the dir attribute in the document\r\n    this.#rtlWatcher.observe(document.documentElement, {\r\n      attributeFilter: [\"dir\"]\r\n    });\r\n  }\r\n\r\n  componentWillRender() {\r\n    if (this.#checkPositionWatcher) {\r\n      this.#checkPositionWatcher = false;\r\n\r\n      // Update watchers\r\n      this.#setPositionWatcher();\r\n    }\r\n\r\n    if (this.#checkBorderSizeWatcher) {\r\n      this.#checkBorderSizeWatcher = false;\r\n\r\n      // Wait until the resize edges have been rendered\r\n      requestAnimationFrame(() => {\r\n        this.#setBorderSizeWatcher();\r\n      });\r\n    }\r\n\r\n    if (this.#adjustAlignment) {\r\n      const documentRect = document.documentElement.getBoundingClientRect();\r\n      const actionRect = this.actionElement.getBoundingClientRect();\r\n      const popoverRect = this.el.getBoundingClientRect();\r\n      const computedStyle = getComputedStyle(this.el);\r\n\r\n      const actionInlineStart = this.#getActionInlineStartPosition(\r\n        documentRect,\r\n        actionRect\r\n      );\r\n\r\n      this.#setResponsiveAlignment(\r\n        documentRect,\r\n        actionRect,\r\n        actionInlineStart,\r\n        popoverRect,\r\n        computedStyle\r\n      );\r\n    }\r\n  }\r\n\r\n  componentDidLoad() {\r\n    // Initialize popoverTargetElement\r\n    addPopoverTargetElement(this.actionElement, this.el, !this.actionById);\r\n\r\n    // Initialize watchers\r\n    this.#setPositionWatcher();\r\n    this.#setBorderSizeWatcher();\r\n\r\n    if (!this.hidden) {\r\n      this.#showPopover();\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.#removePositionWatcher();\r\n    this.#removeBorderSizeWatcher();\r\n\r\n    // If the action element still exists, remove the reference\r\n    removePopoverTargetElement(this.actionElement);\r\n\r\n    // Defensive programming. Make sure the document does not have any unwanted handler\r\n    this.#handleDragEnd();\r\n\r\n    // Avoid leaving handlers in the document\r\n    this.#removeClickOutsideWatcher();\r\n\r\n    // Disconnect RTL watcher\r\n    if (this.#rtlWatcher) {\r\n      this.#rtlWatcher.disconnect();\r\n      this.#rtlWatcher = null; // Free the memory\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const canAddListeners = !this.hidden;\r\n\r\n    return (\r\n      <Host\r\n        class={{\r\n          \"gx-popover-header-drag\":\r\n            canAddListeners && this.allowDrag === \"header\",\r\n          [RESIZING_CLASS]: this.resizing\r\n        }}\r\n        popover={this.mode}\r\n        onMouseDown={\r\n          canAddListeners && this.allowDrag === \"box\"\r\n            ? this.#handleMouseDown\r\n            : null\r\n        }\r\n        onToggle={this.#handlePopoverToggle} // Check if the actionElement is an instance of Button to add this handler\r\n      >\r\n        {this.allowDrag === \"header\" && (\r\n          <div\r\n            class=\"header\"\r\n            part=\"header\"\r\n            onMouseDown={canAddListeners ? this.#handleMouseDown : null}\r\n          >\r\n            <slot name=\"header\" />\r\n          </div>\r\n        )}\r\n\r\n        <slot />\r\n\r\n        {this.resizable &&\r\n          !this.hidden && [\r\n            <div\r\n              class=\"edge__block-start\"\r\n              onMouseDown={this.#handleEdgeResize(\"block-start\")}\r\n            ></div>, // Top\r\n            <div\r\n              class=\"edge__inline-end\"\r\n              onMouseDown={this.#handleEdgeResize(\"inline-end\")}\r\n            ></div>, // Right\r\n            <div\r\n              class=\"edge__block-end\"\r\n              onMouseDown={this.#handleEdgeResize(\"block-end\")}\r\n            ></div>, // Bottom\r\n            <div\r\n              class=\"edge__inline-start\"\r\n              onMouseDown={this.#handleEdgeResize(\"inline-start\")}\r\n            ></div>, // Left\r\n\r\n            <div\r\n              class=\"corner__block-start-inline-start\"\r\n              onMouseDown={this.#handleEdgeResize(\"block-start-inline-start\")}\r\n            ></div>, // Top Left\r\n            <div\r\n              class=\"corner__block-start-inline-end\"\r\n              onMouseDown={this.#handleEdgeResize(\"block-start-inline-end\")}\r\n            ></div>, // Top Right\r\n            <div\r\n              class=\"corner__block-end-inline-start\"\r\n              onMouseDown={this.#handleEdgeResize(\"block-end-inline-start\")}\r\n            ></div>, // Bottom Left\r\n            <div\r\n              class=\"corner__block-end-inline-end\"\r\n              onMouseDown={this.#handleEdgeResize(\"block-end-inline-end\")}\r\n            ></div>, // Bottom Right\r\n\r\n            <div\r\n              class=\"resize-layer\"\r\n              ref={el => (this.#resizeLayer = el)}\r\n            ></div>\r\n          ]}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"wpCAEA,IAAMA,GAAuB,4BAC7B,IAAMC,GAAuB,4BAG7B,IAAMC,GAAqB,CACzB,gBAAiB,cACjB,cAAe,gBACf,eAAgB,aAChB,aAAc,gBAKhB,IAAMC,GAAiC,SACrCC,EACAC,EACAC,EACAC,GAEA,OAAAF,EAAeC,EAAcF,EAAsBG,GACnDH,EAAsBG,EAA0B,CADhD,EAGF,IAAMC,GAMF,CACF,gBAAiB,SAACC,EAAGH,EAAaI,GAAe,OAACJ,EAAcI,CAAf,EAEjD,eAAgB,SAACD,EAAGE,EAAID,GAAe,OAAAA,CAAA,EAEvCE,OAAQ,SAACC,EAAYP,EAAaI,GAChC,OAAAG,EAAa,GAAMH,EAAaJ,EAAc,EAA9C,EAEF,aAAc,SAACO,EAAYP,EAAaI,GACtC,OAAAG,GAAcH,EAAaJ,EAA3B,EAEF,cAAe,SAACO,EAAYJ,EAAGC,GAAe,OAAAG,EAAaH,CAAb,GAGzC,IAAMI,GAAiB,SAACC,GAC7B,OAAAC,OAAOD,EAAQE,QAAQ,KAAM,IAAIC,OAAjC,EAEF,IAAMC,GAAoB,SACxBC,EACAhB,EACAS,EACAP,EACAD,EACAK,EACAW,GAEA,IAAMd,EAA0BC,GAAyBY,GACvDP,EACAP,EACAI,GAIF,IAAKW,EAAa,CAChB,OAAOd,C,CAIT,IAAMe,EAA2BnB,GAC/BC,EACAC,EACAC,EACAC,GAGF,IAAKe,EAA0B,CAC7B,OAAOf,C,CAIT,IAAMgB,EAAgBrB,GAAmBkB,GACzC,IAAMI,EAAkChB,GACtCe,GACAV,EAAYP,EAAaI,GAE3B,IAAMe,EAAmCtB,GACvCC,EACAC,EACAC,EACAkB,GAGF,OAAOC,EACHlB,EACAiB,CACN,EAEO,IAAME,GAAyB,SACpCC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAcJ,EAAcK,iBAAiBrC,IACnD,IAAMsC,EAAcN,EAAcK,iBAAiBpC,IAGnD,IAAMsC,EAAuBpB,GAC3Bc,EACAJ,EACAD,EAAWY,MACXV,EACAH,EAAaa,MACb1B,GAAesB,GACfH,IAAgB,UAAYE,IAAgB,eAG9C,IAAMM,EAAsBtB,GAC1Be,EACAN,EAAWc,IACXd,EAAWe,OACXZ,EACAJ,EAAagB,OACb7B,GAAewB,GACfJ,IAAe,UAAYC,IAAgB,cAG7C,MAAO,CAACI,EAAsBE,EAChC,ECrIA,IAAMG,GAAa,ilJACnB,IAAAC,GAAeD,GCoBf,IAAME,GAAiB,sBACvB,IAAMC,GAAmC,gCACzC,IAAMC,GAAiB,sBAGvB,IAAMC,GAAsB,qBAC5B,IAAMC,GAAuB,sBAE7B,IAAMC,GAAuB,4BAC7B,IAAMC,GAAwB,6BAC9B,IAAMC,GAAsB,2BAC5B,IAAMC,GAAqB,0BAE3B,IAAMC,GAAoB,yBAC1B,IAAMC,GAAoB,yBAE1B,IAAMC,GAAqB,0BAC3B,IAAMC,GAAsB,2BAE5B,IAAMC,GAAyB,8BAC/B,IAAMC,GAA0B,+BAEhC,IAAMC,GAAkC,wCACxC,IAAMC,GAAgC,sCACtC,IAAMC,GACJ,yCACF,IAAMC,GAAiC,uCAEvC,IAAMC,GAAoB,iBAC1B,IAAMC,GAAc,mBACpB,IAAMC,GAAoB,KAE1B,IAAMC,GAAsB,SAACC,GAAc,OACxCC,SAASC,KAAKC,MAAMH,OAASA,CADW,EAG3C,IAAMI,GAEF,CACF,cAAe,WAAM,OAAAL,GAAoB,YAApB,EAErB,YAAa,WAAM,OAAAA,GAAoB,YAApB,EAEnB,eAAgB,WAAM,OAAAA,GAAoB,YAApB,EAEtB,aAAc,WAAM,OAAAA,GAAoB,YAApB,EAEpB,2BAA4B,SAAAM,GAC1B,OAAAN,GAAoBM,EAAM,cAAgB,cAA1C,EAEF,yBAA0B,SAAAA,GACxB,OAAAN,GAAoBM,EAAM,cAAgB,cAA1C,EAEF,yBAA0B,SAAAA,GACxB,OAAAN,GAAoBM,EAAM,cAAgB,cAA1C,EAEF,uBAAwB,SAAAA,GACtB,OAAAN,GAAoBM,EAAM,cAAgB,cAA1C,GAKJ,IAAMC,GAAc,SAACC,EAAsBC,EAAkBC,GAC3D,OAAAF,EAAQJ,MAAMG,YAAYE,EAAU,GAAAE,OAAGD,EAAK,MAA5C,EAEF,IAAME,GAA0B,SAC9BC,EACAC,EACAC,GAEA,GAAIF,GAAiBE,EAAW,CAC9BF,EAAcG,qBAAuBF,C,CAEzC,EAEA,IAAMG,GAA6B,SAACJ,GAClC,GAAIA,EAAe,CACjBA,EAAcG,qBAAuBE,S,CAEzC,E,IAWaC,GAASC,EAAA,cAAAC,GAAA,W,yBAEpBC,EAAAC,IAAAC,UAAA,GACAC,EAAAF,IAAAC,UAAA,GACAE,EAAAH,IAAAC,UAAA,GACAG,EAAAJ,IAAAC,UAAA,GAEAI,EAAAL,IAAAC,KAAmB,OAGnBK,EAAAN,IAAAC,KAAwB,OACxBM,EAAAP,IAAAC,KAA0B,OAC1BO,EAAAR,IAAAC,UAAA,GACAQ,EAAAT,IAAAC,UAAA,GACAS,EAAAV,IAAAC,UAAA,GAGAU,EAAAX,IAAAC,KAA4B,GAC5BW,EAAAZ,IAAAC,KAA4B,GAC5BY,EAAAb,IAAAC,KAAY,OACZa,EAAAd,IAAAC,UAAA,GACAc,EAAAf,IAAAC,UAAA,GACAe,EAAAhB,IAAAC,UAAA,GAGAgB,EAAAjB,IAAAC,UAAA,GACAiB,EAAAlB,IAAAC,KAAqC,GACrCkB,EAAAnB,IAAAC,KAAqC,GACrCmB,EAAApB,IAAAC,KAAwB,GACxBoB,EAAArB,IAAAC,KAAyB,GACzBqB,EAAAtB,IAAAC,KAAwB,GACxBsB,EAAAvB,IAAAC,KAAyB,GACzBuB,EAAAxB,IAAAC,KAAiB,OAEjBwB,EAAAzB,IAAAC,KAA+B,CAC7ByB,MAAO,SAACC,EAAsBC,GAC5B,IAAIC,EACFC,uBAAAC,EAAIhB,EAAA,KAAgBiB,QAAUF,uBAAAC,EAAIjB,EAAA,KAAmBkB,QAGvD,GAAIJ,IAAc,QAAS,CACzBC,GAA2BA,C,CAG7B,IAAMI,EAAeN,EAAY3E,OAAS6E,EAC1C,IAAMK,EAAyBC,EAC7BF,EACAH,uBAAAC,EAAIT,EAAA,KACJQ,uBAAAC,EAAIX,EAAA,MAKN,GAAIc,IAA2BP,EAAY3E,OAAQ,CACjD,M,CAKF,GAAI4E,IAAc,QAAS,CACzBQ,uBAAAL,EAAAZ,EAAAW,uBAAAC,EAAAZ,EAAA,KAAmCU,EAAuB,KAE1D7C,GACE+C,EAAKM,GACLxE,GACAiE,uBAAAC,EAAIZ,EAAA,K,CAIRnC,GAAY+C,EAAKM,GAAIvE,GAAoBoE,E,EAG3CI,OAAQ,SAACX,EAAsBC,GAC7B,IAAIW,EACFT,uBAAAC,EAAIhB,EAAA,KAAgByB,QAAUV,uBAAAC,EAAIjB,EAAA,KAAmB0B,QAEvD,GAAIV,uBAAAC,EAAIf,EAAA,KAAkB,CACxBuB,GAA2BA,C,CAI7B,GAAIX,IAAc,QAAS,CACzBW,GAA2BA,C,CAG7B,IAAME,EAAgBd,EAAY9E,MAAQ0F,EAC1C,IAAMG,EAA0BP,EAC9BM,EACAX,uBAAAC,EAAIR,EAAA,KACJO,uBAAAC,EAAIV,EAAA,MAKN,GAAIqB,IAA4Bf,EAAY9E,MAAO,CACjD,M,CAKF,GAAI+E,IAAc,QAAS,CACzBQ,uBAAAL,EAAAb,EAAAY,uBAAAC,EAAAb,EAAA,KAAmCqB,EAAuB,KAE1DvD,GACE+C,EAAKM,GACLzE,GACAkE,uBAAAC,EAAIb,EAAA,K,CAIRlC,GAAY+C,EAAKM,GAAItE,GAAqB2E,E,IAI9CC,EAAA3C,IAAAC,KAEI,CACF,cAAe,SAAA0B,GACb,OAAAG,uBAAAC,EAAIN,EAAA,KAA8BC,MAAMC,EAAa,QAArD,EAEF,YAAa,SAAAA,GACX,OAAAG,uBAAAC,EAAIN,EAAA,KAA8BC,MAAMC,EAAa,MAArD,EAEF,eAAgB,SAAAA,GACd,OAAAG,uBAAAC,EAAIN,EAAA,KAA8Ba,OAAOX,EAAa,QAAtD,EAEF,aAAc,SAAAA,GACZ,OAAAG,uBAAAC,EAAIN,EAAA,KAA8Ba,OAAOX,EAAa,MAAtD,EAEF,2BAA4B,SAAAA,GAC1BG,uBAAAC,EAAIN,EAAA,KAA8BC,MAAMC,EAAa,SACrDG,uBAAAC,EAAIN,EAAA,KAA8Ba,OAAOX,EAAa,Q,EAGxD,yBAA0B,SAAAA,GACxBG,uBAAAC,EAAIN,EAAA,KAA8BC,MAAMC,EAAa,SACrDG,uBAAAC,EAAIN,EAAA,KAA8Ba,OAAOX,EAAa,M,EAGxD,yBAA0B,SAAAA,GACxBG,uBAAAC,EAAIN,EAAA,KAA8BC,MAAMC,EAAa,OACrDG,uBAAAC,EAAIN,EAAA,KAA8Ba,OAAOX,EAAa,Q,EAGxD,uBAAwB,SAAAA,GACtBG,uBAAAC,EAAIN,EAAA,KAA8BC,MAAMC,EAAa,OACrDG,uBAAAC,EAAIN,EAAA,KAA8Ba,OAAOX,EAAa,M,IAK1DiB,EAAA5C,IAAAC,UAAA,GACA4C,EAAA7C,IAAAC,UAAA,GAqMA6C,EAAA9C,IAAAC,MAAe,WACb8B,EAAKM,GAAGU,cACRjB,uBAAAC,EAAIiB,EAAA,KAAmCC,KAAvClB,E,IAGFmB,EAAAlD,IAAAC,MAAoC,SAACkD,GACnC,IAAKA,EAAMC,eAAeC,SAAStB,EAAKM,IAAK,CAC3CP,uBAAAC,EAAIuB,EAAA,KAA2BL,KAA/BlB,GAEAA,EAAKwB,OAAS,KACdxB,EAAKyB,cAAcC,M,KAIvBT,EAAAhD,IAAAC,MAAqC,WACnC,GAAI8B,EAAK2B,OAAS,UAAY3B,EAAK4B,oBAAqB,CACtDhF,SAASiF,iBACP,QACA9B,uBAAAC,EAAImB,EAAA,KAGJ,CAAEW,QAAS,M,KAKjBP,EAAAtD,IAAAC,MAA6B,WAC3BtB,SAASmF,oBACP,QACAhC,uBAAAC,EAAImB,EAAA,K,IAIRa,EAAA/D,IAAAC,MAAoB,WAClB,IAAK6B,uBAAAC,EAAIlB,EAAA,KAAY,CACnBkB,EAAKM,GAAG2B,UAAUC,IAAI9G,IACtBiF,uBAAAL,EAAIlB,EAAa,KAAI,I,KAIzBqD,EAAAlE,IAAAC,MAAuB,WACrB8B,EAAKM,GAAG2B,UAAUG,OAAOhH,IACzBiF,uBAAAL,EAAIlB,EAAa,MAAK,I,IAGxBuD,EAAApE,IAAAC,MAAkC,SAACoE,GACjC,GAAIA,EAAU,CAEZtC,EAAKM,GAAG2B,UAAUC,IAAI7G,G,KACjB,CACL2E,EAAKM,GAAG2B,UAAUG,OAAO/G,G,KAI7BkH,EAAAtE,IAAAC,MAAsB,W,QACpB,IAAK8B,EAAKzC,eAAiByC,EAAKwB,OAAQ,CACtCzB,uBAAAC,EAAIwC,EAAA,KAAuBtB,KAA3BlB,GACA,M,CAIF,GAAID,uBAAAC,EAAItB,EAAA,KAAkB,CACxBqB,uBAAAC,EAAItB,EAAA,KAAiB+D,Y,CAGvBpC,uBAAAL,EAAA5B,GAAAsE,EAAA3C,uBAAAC,EAAA5B,EAAA,cAAAsE,SAAA,EAAAA,EAA4B,IAAIC,EAAa,KAC7CtC,uBAAAL,EAAAtB,GAAAkE,EAAA7C,uBAAAC,EAAAtB,EAAA,cAAAkE,SAAA,EAAAA,EAAyB,IAAIC,eAAe9C,uBAAAC,EAAI8C,EAAA,MAAoB,KAEpE/C,uBAAAC,EAAItB,EAAA,KAAiBqE,QAAQ/C,EAAKzC,eAClCwC,uBAAAC,EAAItB,EAAA,KAAiBqE,QAAQ/C,EAAKM,IAGlCP,uBAAAC,EAAIgD,EAAA,KAAgB9B,KAApBlB,GAGA,GAAIA,EAAKiD,WAAY,CACnBC,uBAAsB,WACpBnD,uBAAAC,EAAIqC,EAAA,KAAgCnB,KAApClB,EAAqC,M,IAKzCD,uBAAAC,EAAIc,EAAA,KAAYe,iBAAiB,SAAU9B,uBAAAC,EAAI8C,EAAA,KAAqB,CAClEhB,QAAS,OAEXlF,SAASiF,iBAAiB,SAAU9B,uBAAAC,EAAI8C,EAAA,KAAqB,CAC3DK,QAAS,KACTrB,QAAS,M,IAIbgB,EAAA7E,IAAAC,MAAqB,WACnB6B,uBAAAC,EAAI5B,EAAA,KAAoBgF,QAAQrD,uBAAAC,EAAIgD,EAAA,K,IAGtCA,EAAA/E,IAAAC,MAAkB,WAEhB,IAAMjE,EAAe2C,SAASyG,gBAAgBC,wBAC9C,IAAMpJ,EAAa8F,EAAKzC,cAAc+F,wBACtC,IAAM1D,EAAcI,EAAKM,GAAGgD,wBAC5B,IAAMhJ,EAAgBiJ,iBAAiBvD,EAAKM,IAE5C,IAAMnG,EAAoB4F,uBAAAC,EAAIwD,EAAA,KAA8BtC,KAAlClB,EACxB/F,EACAC,GAGF6F,uBAAAC,EAAIyD,EAAA,KAAwBvC,KAA5BlB,EACE/F,EACAC,EACAC,EACAyF,EACAtF,GAIF2C,GAAY+C,EAAKM,GAAI7E,GAAsBvB,EAAWY,OACtDmC,GAAY+C,EAAKM,GAAI5E,GAAuBxB,EAAWe,QACvDgC,GAAY+C,EAAKM,GAAI3E,GAAqBxB,GAC1C8C,GAAY+C,EAAKM,GAAI1E,GAAoB1B,EAAWc,I,IAGtDwI,EAAAvF,IAAAC,MAAgC,SAC9BjE,EACAC,GAEA,OAAA6F,uBAAAC,EAAIf,EAAA,KACAhF,EAAaa,OAASZ,EAAWwJ,KAAOxJ,EAAWY,OACnDZ,EAAWwJ,IAFf,IAIFD,EAAAxF,IAAAC,MAA0B,SACxBjE,EACAC,EACAC,EACAyF,EACAtF,GAEA,IAAMF,EAAe2F,uBAAAC,EAAI2D,EAAA,KAAyCzC,KAA7ClB,EACnB9F,EACA0F,GAEF,IAAMvF,EAAgB0F,uBAAAC,EAAI4D,EAAA,KAAwC1C,KAA5ClB,EACpB9F,EACA0F,GAGF,IAAMiE,EAAY7J,GAChBC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA0F,EAAKzF,YACLyF,EAAKxF,WACLwF,EAAKvF,aAIPwC,GAAY+C,EAAKM,GAAI9E,GAAsBqI,EAAU,IACrD5G,GAAY+C,EAAKM,GAAI/E,GAAqBsI,EAAU,G,IAGtDF,EAAA1F,IAAAC,MAA2C,SACzChE,EACA0F,GAEA,GAAII,EAAK8D,kBAAoB,4BAA6B,CACxD7G,GAAY+C,EAAKM,GAAIpE,GAAyBhC,EAAWY,OACzD,OAAOZ,EAAWY,K,CAIpB,GAAIiF,uBAAAC,EAAIP,EAAA,MAAmBO,EAAK8D,kBAAoB,UAAW,CAC7D,OAAOlE,EAAY9E,K,CAIrBmC,GAAY+C,EAAKM,GAAItE,GAAqB9B,EAAWY,OACrD,OAAOZ,EAAWY,K,IAGpB8I,EAAA3F,IAAAC,MAA0C,SACxChE,EACA0F,GAEA,GAAII,EAAK+D,iBAAmB,4BAA6B,CACvD9G,GAAY+C,EAAKM,GAAIrE,GAAwB/B,EAAWe,QACxD,OAAOf,EAAWe,M,CAIpB,GAAI8E,uBAAAC,EAAIP,EAAA,MAAmBO,EAAK+D,iBAAmB,UAAW,CAC5D,OAAOnE,EAAY3E,M,CAIrBgC,GAAY+C,EAAKM,GAAIvE,GAAoB7B,EAAWe,QACpD,OAAOf,EAAWe,M,IAGpBuH,EAAAvE,IAAAC,MAAyB,WACvB,GAAI6B,uBAAAC,EAAItB,EAAA,KAAkB,CACxBqB,uBAAAC,EAAItB,EAAA,KAAiB+D,aACrBpC,uBAAAL,EAAItB,EAAmB,KAAI,I,CAI7BqB,uBAAAC,EAAIc,EAAA,KAAYiB,oBAAoB,SAAUhC,uBAAAC,EAAI8C,EAAA,MAClDlG,SAASmF,oBAAoB,SAAUhC,uBAAAC,EAAI8C,EAAA,KAAqB,CAC9DK,QAAS,M,IAIba,EAAA/F,IAAAC,MAAuB,SAACkD,GACtB,IAAM6C,IAAiB7C,EAAM8C,WAAa,QAC1ClE,EAAKwB,OAASyC,EAGd,GAAIA,EAAc,CAChBjE,EAAKyB,cAAcC,M,KACd,CACL1B,EAAKmE,cAAczC,M,KAOvB0C,EAAAnG,IAAAC,MAAmB,SAACkD,GAIlBf,uBAAAL,EAAA7B,EAAA4B,uBAAAC,EAAA7B,EAAA,MAAkB,IAAIwE,EAAa,KACnCtC,uBAAAL,EAAIjB,EAAqBqC,EAAK,KAG9BxE,SAASiF,iBAAiB,YAAa9B,uBAAAC,EAAIqE,GAAA,KAAuB,CAChElB,QAAS,OAGXvG,SAASiF,iBAAiB,UAAW9B,uBAAAC,EAAIsE,GAAA,KAAiB,CACxDnB,QAAS,KACTrB,QAAS,M,IAIbuC,GAAApG,IAAAC,MAAuB,SAACkD,GACtBrB,uBAAAC,EAAI7B,EAAA,KAAUiF,QAAQrD,uBAAAC,EAAIuE,GAAA,MAAoB,WAG5CnD,EAAMoD,iBAINzE,uBAAAC,EAAIgC,EAAA,KAAkBd,KAAtBlB,GAEAK,uBAAAL,EAAIhB,EAAkBoC,EAAK,I,OAI/BmD,GAAAtG,IAAAC,MAAoB,WAElB,IAAMsC,EACJT,uBAAAC,EAAIhB,EAAA,KAAgByB,QAAUV,uBAAAC,EAAIjB,EAAA,KAAmB0B,QACvD,IAAMX,EACJC,uBAAAC,EAAIhB,EAAA,KAAgBiB,QAAUF,uBAAAC,EAAIjB,EAAA,KAAmBkB,QAIvD,GAAIO,IAA4B,EAAG,CACjCH,uBAAAL,EAAApB,EAAAmB,uBAAAC,EAAApB,EAAA,MAA0BmB,uBAAAC,EAAIf,EAAA,MACzBuB,EACDA,GAAuB,KAC3BvD,GAAY+C,EAAKM,GAAIzE,GAAmBkE,uBAAAC,EAAIpB,EAAA,K,CAI9C,GAAIkB,IAA4B,EAAG,CACjCO,uBAAAL,EAAAnB,EAAAkB,uBAAAC,EAAAnB,EAAA,KAA0BiB,EAAuB,KACjD7C,GAAY+C,EAAKM,GAAIxE,GAAmBiE,uBAAAC,EAAInB,EAAA,K,CAI9CwB,uBAAAL,EAAIjB,EAAqBgB,uBAAAC,EAAIhB,EAAA,KAAe,I,IAG9CsF,GAAArG,IAAAC,MAAiB,WAEf,GAAI6B,uBAAAC,EAAI7B,EAAA,KAAW,CACjB4B,uBAAAC,EAAI7B,EAAA,KAAUsG,Q,CAIhB7H,SAASmF,oBAAoB,YAAahC,uBAAAC,EAAIqE,GAAA,KAAuB,CACnElB,QAAS,OAGXvG,SAASmF,oBAAoB,UAAWhC,uBAAAC,EAAIsE,GAAA,KAAiB,CAC3DnB,QAAS,OAGXpD,uBAAAC,EAAImC,EAAA,KAAqBjB,KAAzBlB,GAGAK,uBAAAL,EAAI7B,EAAY,KAAI,KACpBkC,uBAAAL,EAAIjB,EAAqB,KAAI,KAC7BsB,uBAAAL,EAAIhB,EAAkB,KAAI,I,IAM5B0F,GAAAzG,IAAAC,MAAoB,SAACyG,GAAiC,gBAACvD,GACrDpB,EAAK4E,SAAW,KAChBvE,uBAAAL,EAAA3B,EAAA0B,uBAAAC,EAAA3B,EAAA,MAAoB,IAAIsE,EAAa,KACrCtC,uBAAAL,EAAId,EAAgByF,EAAI,KACxBtE,uBAAAL,EAAIjB,EAAqBqC,EAAK,KAI9BrE,GAAyBgD,uBAAAC,EAAId,EAAA,MAAea,uBAAAC,EAAIf,EAAA,MAKhDoB,uBAAAL,EAAIb,EAA8BY,uBAAAC,EAAIpB,EAAA,KAAkB,KACxDyB,uBAAAL,EAAIZ,EAA8BW,uBAAAC,EAAInB,EAAA,KAAkB,KAGxD,IAAMvE,EAAgBiJ,iBAAiBvD,EAAKM,IAC5CD,uBAAAL,EAAIX,EAAiBjG,GAAekB,EAAcuK,cAAa,KAC/DxE,uBAAAL,EAAIV,EAAkBlG,GAAekB,EAAcwK,eAAc,KACjEzE,uBAAAL,EAAIT,EAAiBnG,GAAekB,EAAcyK,cAAa,KAC/D1E,uBAAAL,EAAIR,EAAkBpG,GAAekB,EAAc0K,eAAc,KAGjEjF,uBAAAC,EAAIwC,EAAA,KAAuBtB,KAA3BlB,GAGAD,uBAAAC,EAAIiF,GAAA,KAAyB/D,KAA7BlB,GAGAD,uBAAAC,EAAIuB,EAAA,KAA2BL,KAA/BlB,GAGApD,SAASiF,iBAAiB,YAAa9B,uBAAAC,EAAIkF,GAAA,KAAyB,CAClE/B,QAAS,OAGXvG,SAASiF,iBAAiB,UAAW9B,uBAAAC,EAAImF,GAAA,KAAmB,CAC1DhC,QAAS,KACTrB,QAAS,M,CAvCyC,IA2CtDoD,GAAAjH,IAAAC,MAAyB,SAACkD,GACxBrB,uBAAAC,EAAI3B,EAAA,KAAY+E,QAAQrD,uBAAAC,EAAIoF,GAAA,MAAsB,WAGhDhE,EAAMoD,iBAINzE,uBAAAC,EAAIgC,EAAA,KAAkBd,KAAtBlB,GAEAK,uBAAAL,EAAIhB,EAAkBoC,EAAK,I,OAI/BgE,GAAAnH,IAAAC,MAAsB,WAEpB,IAAM0B,EAAcI,EAAKM,GAAGgD,wBAG5BvD,uBAAAC,EAAIY,EAAA,KAAkCb,uBAAAC,EAAId,EAAA,MAAeU,GACzDS,uBAAAL,EAAIP,EAAkB,KAAI,KAG1BY,uBAAAL,EAAIjB,EAAqBgB,uBAAAC,EAAIhB,EAAA,KAAe,I,IAG9CmG,GAAAlH,IAAAC,MAAmB,WACjB8B,EAAK4E,SAAW,MAGhB,GAAI7E,uBAAAC,EAAI3B,EAAA,KAAa,CACnB0B,uBAAAC,EAAI3B,EAAA,KAAYoG,Q,CAIlB7H,SAASC,KAAKC,MAAMH,OAAS,KAG7BM,GAAY+C,EAAKM,GAAIzE,GAAmBkE,uBAAAC,EAAIpB,EAAA,MAC5C3B,GAAY+C,EAAKM,GAAIxE,GAAmBiE,uBAAAC,EAAInB,EAAA,MAG5CkB,uBAAAC,EAAIuC,EAAA,KAAoBrB,KAAxBlB,GAGAD,uBAAAC,EAAIqF,GAAA,KAAsBnE,KAA1BlB,GAKAkD,sBAAsBnD,uBAAAC,EAAIiB,EAAA,MAG1BrE,SAASmF,oBAAoB,YAAahC,uBAAAC,EAAIkF,GAAA,KAAyB,CACrE/B,QAAS,OAGXvG,SAASmF,oBAAoB,UAAWhC,uBAAAC,EAAImF,GAAA,KAAmB,CAC7DhC,QAAS,OAGXpD,uBAAAC,EAAImC,EAAA,KAAqBjB,KAAzBlB,GAGAK,uBAAAL,EAAI3B,EAAc,KAAI,KACtBgC,uBAAAL,EAAIjB,EAAqB,KAAI,KAC7BsB,uBAAAL,EAAIhB,EAAkB,KAAI,I,IAQ5BqG,GAAApH,IAAAC,MAAwB,W,MACtB,IAAK8B,EAAKsF,WAAatF,EAAKwB,OAAQ,CAClCzB,uBAAAC,EAAIiF,GAAA,KAAyB/D,KAA7BlB,GACA,M,CAGFK,uBAAAL,EAAAhC,GAAA0E,EAAA3C,uBAAAC,EAAAhC,EAAA,cAAA0E,SAAA,EAAAA,EAAwB,IAAIC,EAAa,KACzCtC,uBAAAL,EAAIvB,EAAuB,IAAIoE,eAAe9C,uBAAAC,EAAIuF,GAAA,MAAsB,KAGxExF,uBAAAC,EAAIvB,EAAA,KAAqBsE,QAAQ/C,EAAKM,GAAI,CAAEkF,IAAK,eACjDzF,uBAAAC,EAAIvB,EAAA,KAAqBsE,QAAQhD,uBAAAC,EAAIa,EAAA,K,IAGvC0E,GAAAtH,IAAAC,MAAuB,WACrB6B,uBAAAC,EAAIhC,EAAA,KAAgBoF,QAAQrD,uBAAAC,EAAIyF,GAAA,K,IAGlCA,GAAAxH,IAAAC,MAAoB,WAElB,IAAM5D,EAAgBiJ,iBAAiBvD,EAAKM,IAG5CN,EAAKM,GAAGxD,MAAMG,YACZd,GACA7B,EAAcoL,uBAGhB1F,EAAKM,GAAGxD,MAAMG,YACZb,GACA9B,EAAcqL,qBAGhB3F,EAAKM,GAAGxD,MAAMG,YACZZ,GACA/B,EAAcsL,wBAGhB5F,EAAKM,GAAGxD,MAAMG,YACZX,GACAhC,EAAcuL,qB,IAIlBZ,GAAAhH,IAAAC,MAA2B,WACzB,GAAI6B,uBAAAC,EAAIvB,EAAA,KAAsB,CAC5BsB,uBAAAC,EAAIvB,EAAA,KAAqBgE,aACzBpC,uBAAAL,EAAIvB,EAAuB,KAAI,I,CAGjC4B,uBAAAL,EAAIhC,EAAkB,KAAI,I,sHAjqBR,M,gBAOmB,M,4CA4Be,K,gBAKR,S,oBAkBQ,U,yBA2BN,M,gBAKT,K,YAMU,K,iBAsBF,S,qBAkBQ,U,UA4BY,O,iBAMG,O,eAMhC,K,6GAlKtC8H,EAAAC,UAAAC,mBAAA,SACEC,EACAC,GAGA7F,uBAAAnC,KAAIU,EAAqB,EAAC,KAC1ByB,uBAAAnC,KAAIW,EAAqB,EAAC,KAG1BlB,GAA2BuI,GAC3B5I,GAAwB2I,EAAkB/H,KAAKoC,IAAKpC,KAAKiI,YAGzD9F,uBAAAnC,KAAIK,EAAyB,KAAI,I,EAenCuH,EAAAC,UAAAK,kBAAA,WACE/F,uBAAAnC,KAAII,EAAoB,KAAI,I,EAiB9BwH,EAAAC,UAAAM,qBAAA,SAAqBC,GACnB,GAAIvG,uBAAA7B,KAAIuB,EAAA,KAAiB,CACvB,M,CAIF,GAAI6G,IAAa,UAAW,CAC1BpI,KAAKoC,GAAGxD,MAAMyJ,eAAexK,IAC7BmC,KAAKoC,GAAGxD,MAAMyJ,eAAetK,G,MACxB,GAAIqK,IAAa,iBAAkB,CACxCpI,KAAKoC,GAAGxD,MAAMyJ,eAAetK,G,KACxB,CACLiC,KAAKoC,GAAGxD,MAAMyJ,eAAexK,G,CAI/BsE,uBAAAnC,KAAII,EAAoB,KAAI,I,EAsB9BwH,EAAAC,UAAAS,mBAAA,SAAmBC,GAEjBpG,uBAAAnC,KAAIM,EAA2B,KAAI,KACnC6B,uBAAAnC,KAAIK,EAAyB,KAAI,KAGjC,GAAIkI,EAAgB,CAClB,GAAIvI,KAAK+E,WAAY,CACnBlD,uBAAA7B,KAAImE,EAAA,KAAgCnB,KAApChD,KAAqC,K,CAGvCA,KAAKoC,GAAGoG,a,KACH,CACL3G,uBAAA7B,KAAI6C,EAAA,KAAaG,KAAjBhD,K,GASJ4H,EAAAC,UAAAY,mBAAA,WACEtG,uBAAAnC,KAAII,EAAoB,KAAI,I,EAiB9BwH,EAAAC,UAAAa,sBAAA,SAAsBN,GACpB,GAAIvG,uBAAA7B,KAAIuB,EAAA,KAAiB,CACvB,M,CAIF,GAAI6G,IAAa,UAAW,CAC1BpI,KAAKoC,GAAGxD,MAAMyJ,eAAevK,IAC7BkC,KAAKoC,GAAGxD,MAAMyJ,eAAerK,G,MACxB,GAAIoK,IAAa,iBAAkB,CACxCpI,KAAKoC,GAAGxD,MAAMyJ,eAAerK,G,KACxB,CACLgC,KAAKoC,GAAGxD,MAAMyJ,eAAevK,G,CAI/BqE,uBAAAnC,KAAII,EAAoB,KAAI,I,EAwB9BwH,EAAAC,UAAAc,iBAAA,WAEExG,uBAAAnC,KAAIM,EAA2B,KAAI,I,EAgfrCsH,EAAAC,UAAAe,kBAAA,eAAA9G,EAAA9B,KACEmC,uBAAAnC,KAAI4C,EAAciG,OAAM,KAGxB1G,uBAAAnC,KAAIS,EAAe,IAAIqI,kBAAiB,WACtC3G,uBAAAL,EAAIf,EAAmBgI,IAAO,KAE9B,GAAIlH,uBAAAC,EAAIf,EAAA,KAAkB,CACxBe,EAAKM,GAAGxD,MAAMG,YAAYT,GAAaC,IACvCuD,EAAKM,GAAG2B,UAAUC,IAAI3F,G,KACjB,CACLyD,EAAKM,GAAGxD,MAAMyJ,eAAe/J,IAC7BwD,EAAKM,GAAG2B,UAAUG,OAAO7F,G,KAE3B,KAEF,GAAI2B,KAAK+E,WAAY,CACnBlD,uBAAA7B,KAAImE,EAAA,KAAgCnB,KAApChD,KAAqC,K,CAIvC6B,uBAAA7B,KAAIS,EAAA,KAAaoE,QAAQnG,SAASyG,gBAAiB,CACjD6D,gBAAiB,CAAC,Q,EAItBpB,EAAAC,UAAAoB,oBAAA,eAAAnH,EAAA9B,KACE,GAAI6B,uBAAA7B,KAAIK,EAAA,KAAwB,CAC9B8B,uBAAAnC,KAAIK,EAAyB,MAAK,KAGlCwB,uBAAA7B,KAAIqE,EAAA,KAAoBrB,KAAxBhD,K,CAGF,GAAI6B,uBAAA7B,KAAIM,EAAA,KAA0B,CAChC6B,uBAAAnC,KAAIM,EAA2B,MAAK,KAGpC0E,uBAAsB,WACpBnD,uBAAAC,EAAIqF,GAAA,KAAsBnE,KAA1BlB,E,IAIJ,GAAID,uBAAA7B,KAAII,EAAA,KAAmB,CACzB,IAAMrE,EAAe2C,SAASyG,gBAAgBC,wBAC9C,IAAMpJ,EAAagE,KAAKX,cAAc+F,wBACtC,IAAM1D,EAAc1B,KAAKoC,GAAGgD,wBAC5B,IAAMhJ,EAAgBiJ,iBAAiBrF,KAAKoC,IAE5C,IAAMnG,EAAoB4F,uBAAA7B,KAAIsF,EAAA,KAA8BtC,KAAlChD,KACxBjE,EACAC,GAGF6F,uBAAA7B,KAAIuF,EAAA,KAAwBvC,KAA5BhD,KACEjE,EACAC,EACAC,EACAyF,EACAtF,E,GAKNwL,EAAAC,UAAAqB,iBAAA,WAEE9J,GAAwBY,KAAKX,cAAeW,KAAKoC,IAAKpC,KAAKiI,YAG3DpG,uBAAA7B,KAAIqE,EAAA,KAAoBrB,KAAxBhD,MACA6B,uBAAA7B,KAAImH,GAAA,KAAsBnE,KAA1BhD,MAEA,IAAKA,KAAKsD,OAAQ,CAChBzB,uBAAA7B,KAAI6C,EAAA,KAAaG,KAAjBhD,K,GAIJ4H,EAAAC,UAAAsB,qBAAA,WACEtH,uBAAA7B,KAAIsE,EAAA,KAAuBtB,KAA3BhD,MACA6B,uBAAA7B,KAAI+G,GAAA,KAAyB/D,KAA7BhD,MAGAP,GAA2BO,KAAKX,eAGhCwC,uBAAA7B,KAAIoG,GAAA,KAAepD,KAAnBhD,MAGA6B,uBAAA7B,KAAIqD,EAAA,KAA2BL,KAA/BhD,MAGA,GAAI6B,uBAAA7B,KAAIS,EAAA,KAAc,CACpBoB,uBAAA7B,KAAIS,EAAA,KAAa8D,aACjBpC,uBAAAnC,KAAIS,EAAe,KAAI,I,GAI3BmH,EAAAC,UAAAuB,OAAA,W,MAAA,IAAAtH,EAAA9B,KACE,IAAMqJ,GAAmBrJ,KAAKsD,OAE9B,OACEgG,EAACC,EAAI,CAAAC,IAAA,2CACHC,OAAKjF,EAAA,CACH,yBACE6E,GAAmBrJ,KAAK0J,YAAc,UACxClF,EAACpH,IAAiB4C,KAAK0G,S,GAEzBiD,QAAS3J,KAAKyD,KACdmG,YACEP,GAAmBrJ,KAAK0J,YAAc,MAClC7H,uBAAA7B,KAAIkG,EAAA,KACJ,KAEN2D,SAAUhI,uBAAA7B,KAAI8F,EAAA,MAEb9F,KAAK0J,YAAc,UAClBJ,EAAA,OAAAE,IAAA,2CACEC,MAAM,SACNK,KAAK,SACLF,YAAaP,EAAkBxH,uBAAA7B,KAAIkG,EAAA,KAAoB,MAEvDoD,EAAA,QAAAE,IAAA,2CAAMO,KAAK,YAIfT,EAAA,QAAAE,IAAA,6CAECxJ,KAAKoH,YACHpH,KAAKsD,QAAU,CACdgG,EAAA,OAAAE,IAAA,2CACEC,MAAM,oBACNG,YAAa/H,uBAAA7B,KAAIwG,GAAA,KAAkBxD,KAAtBhD,KAAuB,iBAEtCsJ,EAAA,OAAAE,IAAA,2CACEC,MAAM,mBACNG,YAAa/H,uBAAA7B,KAAIwG,GAAA,KAAkBxD,KAAtBhD,KAAuB,gBAEtCsJ,EAAA,OAAAE,IAAA,2CACEC,MAAM,kBACNG,YAAa/H,uBAAA7B,KAAIwG,GAAA,KAAkBxD,KAAtBhD,KAAuB,eAEtCsJ,EAAA,OAAAE,IAAA,2CACEC,MAAM,qBACNG,YAAa/H,uBAAA7B,KAAIwG,GAAA,KAAkBxD,KAAtBhD,KAAuB,kBAGtCsJ,EAAA,OAAAE,IAAA,2CACEC,MAAM,mCACNG,YAAa/H,uBAAA7B,KAAIwG,GAAA,KAAkBxD,KAAtBhD,KAAuB,8BAEtCsJ,EAAA,OAAAE,IAAA,2CACEC,MAAM,iCACNG,YAAa/H,uBAAA7B,KAAIwG,GAAA,KAAkBxD,KAAtBhD,KAAuB,4BAEtCsJ,EAAA,OAAAE,IAAA,2CACEC,MAAM,iCACNG,YAAa/H,uBAAA7B,KAAIwG,GAAA,KAAkBxD,KAAtBhD,KAAuB,4BAEtCsJ,EAAA,OAAAE,IAAA,2CACEC,MAAM,+BACNG,YAAa/H,uBAAA7B,KAAIwG,GAAA,KAAkBxD,KAAtBhD,KAAuB,0BAGtCsJ,EAAA,OAAAE,IAAA,2CACEC,MAAM,eACNO,IAAK,SAAA5H,GAAE,OAAKD,uBAAAL,EAAIa,EAAgBP,EAAE,IAA3B,K,oWAr+BC,G"}