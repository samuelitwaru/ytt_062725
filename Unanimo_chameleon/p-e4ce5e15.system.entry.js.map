{"version":3,"names":["chGridInfiniteScrollCss","ChGridInfiniteScrollStyle0","ChGridInfiniteScroll","exports","this","intersectionObserverHandler","entries","observer","hasGridScroll","_this","gridLayoutElement","scrollHeight","clientHeight","emitInfinite","root","isIntersecting","status","infinite","emit","class_1","prototype","componentWillLoad","el","assignedSlot","closest","intersectionGridLayoutObserver","IntersectionObserver","rootMargin","observe","intersectionDocumentObserver","disconnectedCallback","disconnect","complete","render","h","key","class","hidden"],"sources":["src/components/grid/grid-infinite-scroll/ch-grid-infinite-scroll.scss?tag=ch-grid-infinite-scroll&encapsulation=shadow","src/components/grid/grid-infinite-scroll/ch-grid-infinite-scroll.tsx"],"sourcesContent":[":host {\r\n  display: flex;\r\n  grid-column-start: 1;\r\n  grid-column-end: -1;\r\n}\r\n.loading:not([hidden]) {\r\n  display: contents;\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Method,\r\n  Prop,\r\n  State,\r\n  h\r\n} from \"@stencil/core\";\r\n\r\nexport type ChGridInfiniteScrollState = \"loading\" | \"loaded\";\r\n\r\n/**\r\n * The 'ch-grid-infinite-scroll' provides infinite scroll functionality for a 'ch-grid' component\r\n */\r\n@Component({\r\n  tag: \"ch-grid-infinite-scroll\",\r\n  styleUrl: \"ch-grid-infinite-scroll.scss\",\r\n  shadow: true\r\n})\r\nexport class ChGridInfiniteScroll {\r\n  private gridLayoutElement: HTMLElement;\r\n  private intersectionGridLayoutObserver: IntersectionObserver;\r\n  private intersectionDocumentObserver: IntersectionObserver;\r\n\r\n  @Element() el: HTMLChGridInfiniteScrollElement;\r\n\r\n  @State() hasGridScroll: boolean;\r\n\r\n  /**\r\n   * Indicates whether the grid is loading or already loaded.\r\n   */\r\n  @Prop({ mutable: true }) status: ChGridInfiniteScrollState = \"loaded\";\r\n\r\n  /**\r\n   * Event emitted when end is reached.\r\n   */\r\n  @Event() infinite: EventEmitter;\r\n\r\n  componentWillLoad() {\r\n    this.gridLayoutElement = this.el.assignedSlot.closest(\"section.main\");\r\n\r\n    this.intersectionGridLayoutObserver = new IntersectionObserver(\r\n      this.intersectionObserverHandler,\r\n      {\r\n        root: this.gridLayoutElement,\r\n        rootMargin: \"1px\"\r\n      }\r\n    );\r\n    this.intersectionGridLayoutObserver.observe(this.el);\r\n\r\n    this.intersectionDocumentObserver = new IntersectionObserver(\r\n      this.intersectionObserverHandler,\r\n      {\r\n        rootMargin: \"1px\"\r\n      }\r\n    );\r\n    this.intersectionDocumentObserver.observe(this.el);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    if (this.intersectionGridLayoutObserver) {\r\n      this.intersectionGridLayoutObserver.disconnect();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Indicates that the grid is already loaded.\r\n   */\r\n  @Method()\r\n  async complete() {\r\n    this.status = \"loaded\";\r\n  }\r\n\r\n  private intersectionObserverHandler = (\r\n    entries: IntersectionObserverEntry[],\r\n    observer: IntersectionObserver\r\n  ) => {\r\n    const hasGridScroll =\r\n      this.gridLayoutElement.scrollHeight !==\r\n      this.gridLayoutElement.clientHeight;\r\n    const emitInfinite = observer.root ? hasGridScroll : !hasGridScroll;\r\n\r\n    if (emitInfinite && entries[0].isIntersecting && this.status === \"loaded\") {\r\n      this.status = \"loading\";\r\n      this.infinite.emit();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"loading\" hidden={!(this.status === \"loading\")}>\r\n        <slot></slot>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"wmDAAA,IAAMA,EAA0B,yHAChC,IAAAC,EAAeD,E,ICoBFE,EAAoBC,EAAA,qC,yBAsDvBC,KAAAC,4BAA8B,SACpCC,EACAC,GAEA,IAAMC,EACJC,EAAKC,kBAAkBC,eACvBF,EAAKC,kBAAkBE,aACzB,IAAMC,EAAeN,EAASO,KAAON,GAAiBA,EAEtD,GAAIK,GAAgBP,EAAQ,GAAGS,gBAAkBN,EAAKO,SAAW,SAAU,CACzEP,EAAKO,OAAS,UACdP,EAAKQ,SAASC,M,yFArD2C,Q,6GAO7DC,EAAAC,UAAAC,kBAAA,WACEjB,KAAKM,kBAAoBN,KAAKkB,GAAGC,aAAaC,QAAQ,gBAEtDpB,KAAKqB,+BAAiC,IAAIC,qBACxCtB,KAAKC,4BACL,CACES,KAAMV,KAAKM,kBACXiB,WAAY,QAGhBvB,KAAKqB,+BAA+BG,QAAQxB,KAAKkB,IAEjDlB,KAAKyB,6BAA+B,IAAIH,qBACtCtB,KAAKC,4BACL,CACEsB,WAAY,QAGhBvB,KAAKyB,6BAA6BD,QAAQxB,KAAKkB,G,EAGjDH,EAAAC,UAAAU,qBAAA,WACE,GAAI1B,KAAKqB,+BAAgC,CACvCrB,KAAKqB,+BAA+BM,Y,GAQlCZ,EAAAC,UAAAY,SAAN,W,qFACE5B,KAAKY,OAAS,S,iBAkBhBG,EAAAC,UAAAa,OAAA,WACE,OACEC,EAAA,OAAAC,IAAA,2CAAKC,MAAM,UAAUC,SAAUjC,KAAKY,SAAW,YAC7CkB,EAAA,QAAAC,IAAA,6C,WAxEyB,I"}