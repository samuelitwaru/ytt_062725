{"version":3,"names":["BLOCK_START","BLOCK_END","INLINE_START","INLINE_END","START_HALF_THRESHOLD","END_HALF_THRESHOLD","EDGE_SIZE","setProperty","element","property","value","style","inlineStart","mainViewRect","rtl","left","width","inlineEnd","documentRect","right","droppableAreaMap","top","height","center","lastDroppableArea","lastViewId","handleWidgetDrag","draggableView","droppableAreaRef","event","stopPropagation","document","documentElement","getBoundingClientRect","mainView","positionX","clientX","positionY","clientY","distanceToTheLeftEdge","distanceToTheTopEdge","relativePositionX","relativePositionY","droppableArea","inBetween","viewId","droppableAreaSizes","removeDroppableAreaStyles","undefined","removeAttribute","getWidgetDropInfo","dropAreaTarget","viewIdTarget","createAndSetLeafInfo","flexibleLayoutLeaf","renderedWidgets","widgetsInfo","leafId","id","leafType","type","widget","add","set","parentLeafId","info","exportParts","selectedWidgetId","widgets","tabOrientation","tabDirection","tabPosition","tabTypeToPart","forEach","wasRendered","selectedWidget","length","closeButtonHidden","dragOutsideDisabled","showCaptions","sortable","addCustomBehavior","item","layoutSplitterParts","dragBar","part","addNewLeafToInfo","leaf","parentItem","itemsInfo","flexibleLeafExtended","leafInfo","updateFlexibleSubModels","flexibleLayoutItems","flexibleItem","items","group","flexibleItemExtended","updateFlexibleModels","flexibleLayout","ROOT_VIEW","getLeafInfo","get","flexibleLayoutCss","ChFlexibleLayoutStyle0","LEAF_SELECTOR","ESCAPE_KEY","ChFlexibleLayout","draggableViews","dragInfo","viewsOutOfDroppableZoneController","draggedViewRef","layoutSplitterRef","viewItemClose","selectedViewItemChange","viewItemReorder","addSiblingView","parentGroup","siblingItem","placedInTheSibling","viewInfo","takeHalfTheSpaceOfTheSiblingItem","result","this","addSiblingLeaf","success","forceUpdate","refreshLeaf","leafRef","el","shadowRoot","querySelector","removeView","itemId","removeItem","reconnectedSubtree","removeItemPageInView","forceRerender","viewRef","removePage","getAllLeafs","views","itemView","push","handleItemChange","eventInfo","detail","emit","handleItemClose","handleDragStart","async","target","querySelectorAll","index","draggableViewsResult","Promise","allSettled","map","view","getDraggableViews","draggableViewResult","status","abortController","AbortController","extendedDraggableView","RTL","isRTL","addEventListener","capture","passive","signal","tabListView","pointerEvents","pageView","handleWidgetDragEnd","handleWidgetDragEndKeydown","showPopover","promoteDragPreviewToTopLayer","dragBarDisabled","code","preventDefault","endDragPreview","abort","removeEventListener","dropInfo","hidePopover","renderTab","h","key","slot","class","exportparts","direction","model","selectedId","onItemClose","onItemDragStart","onSelectedItemChange","name","renderView","render","layoutModel","Host","ref","popover","flexibleLayoutRenderCss","ChFlexibleLayoutRenderStyle0","GENERATE_GUID","currentDate","Date","getTime","replace","c","randomNumber","Math","random","floor","toString","ChFlexibleLayoutRender","Set","Map","flexibleLayoutRef","modelChanged","newModel","addWidget","selectWidget","leafUIModel","has","updateSelectedWidget","removeRenderedWidgets","itemInfo","leafInfoToRemove","nodeToRemoveUIModel","nodeToRemove","itemsOfNodeToRemove","nodeToReconnectUIModel","nodeToReconnect","itemToUpdateItsParent","nodeToReconnectLeafInfo","widgetsToUpdateParentLeafId","widgetUIModel","delete","deleteRenderedWidget","removeWidget","widgetId","checkViewStateToRemoveWidget","findIndex","layout","layoutSplitterPartsSet","values","join","handleLeafSelectedWidgetChange","selectedItemInfo","newSelectedItem","newSelectedIndex","handleLeafWidgetClose","itemCloseInfo","widgetIndex","itemIndex","widgetInfo","viewWidgets","widgetsCount","skipRenderRemoval","removeElement","conserveRenderState","handleLeafWidgetReorder","reorderInfo","leafIdTarget","leafTargetInfo","widgetToMove","handleViewItemReorderCreateView","viewTargetInfo","viewTargetUIModel","viewTargetParentInfo","newLeafToAddId","newLeafToAdd","size","viewTargetIsContainedInAGroupWithTheSameDirection","renderWidget","widgetRender","renders","renderId","addWrapper","componentWillLoad","cssClass","onViewItemClose","onViewItemReorder","onSelectedViewItemChange"],"sources":["src/components/flexible-layout/internal/flexible-layout/utils.ts","src/components/flexible-layout/utils.ts","src/components/flexible-layout/internal/flexible-layout/flexible-layout.scss?tag=ch-flexible-layout&encapsulation=shadow","src/components/flexible-layout/internal/flexible-layout/flexible-layout.tsx","src/components/flexible-layout/flexible-layout-render.scss?tag=ch-flexible-layout-render","src/components/flexible-layout/flexible-layout-render.tsx"],"sourcesContent":["import { inBetween } from \"../../../../common/utils\";\r\nimport {\r\n  DraggableViewExtendedInfo,\r\n  DroppableArea,\r\n  WidgetDropInfo\r\n} from \"./types\";\r\n\r\n/**\r\n * [block-start, block-end, inline-start, inline-end]\r\n */\r\ntype DroppableAreaSizes = [number, number, number, number];\r\n\r\n// Custom vars\r\nconst BLOCK_START = \"--ch-flexible-layout-drop-area-block-start\";\r\nconst BLOCK_END = \"--ch-flexible-layout-drop-area-block-end\";\r\nconst INLINE_START = \"--ch-flexible-layout-drop-area-inline-start\";\r\nconst INLINE_END = \"--ch-flexible-layout-drop-area-inline-end\";\r\n\r\n/**\r\n * If the mouse position is in the interval [0%, 30%] the droppable area should\r\n * be displayed at the START position with half the size.\r\n */\r\nconst START_HALF_THRESHOLD = 30; // In percentage\r\n\r\n/**\r\n * If the mouse position is in the interval [70%, 100%] the droppable area\r\n * should be displayed at the END position with half the size.\r\n */\r\nconst END_HALF_THRESHOLD = 100 - START_HALF_THRESHOLD; // In percentage\r\n\r\nconst EDGE_SIZE = 0.5;\r\n\r\nconst setProperty = (element: HTMLElement, property: string, value: number) =>\r\n  element.style.setProperty(property, `${value}px`);\r\n\r\nconst inlineStart = (mainViewRect: DOMRect, rtl: boolean) =>\r\n  rtl ? mainViewRect.left + mainViewRect.width * EDGE_SIZE : mainViewRect.left;\r\n\r\nconst inlineEnd = (\r\n  documentRect: DOMRect,\r\n  mainViewRect: DOMRect,\r\n  rtl: boolean\r\n) =>\r\n  rtl\r\n    ? documentRect.width - mainViewRect.right\r\n    : documentRect.width - (mainViewRect.left + mainViewRect.width * EDGE_SIZE);\r\n\r\nconst droppableAreaMap: {\r\n  [key in DroppableArea]: (\r\n    documentRect: DOMRect,\r\n    mainViewRect: DOMRect,\r\n    rtl: boolean\r\n  ) => DroppableAreaSizes;\r\n} = {\r\n  \"block-start\": (documentRect, mainViewRect) => [\r\n    mainViewRect.top,\r\n    documentRect.height - (mainViewRect.top + mainViewRect.height * EDGE_SIZE),\r\n    mainViewRect.left,\r\n    documentRect.width - mainViewRect.right\r\n  ],\r\n\r\n  \"block-end\": (documentRect, mainViewRect) => [\r\n    mainViewRect.top + mainViewRect.height * EDGE_SIZE,\r\n    documentRect.height - (mainViewRect.top + mainViewRect.height),\r\n    mainViewRect.left,\r\n    documentRect.width - mainViewRect.right\r\n  ],\r\n\r\n  \"inline-start\": (documentRect, mainViewRect, rtl) => [\r\n    mainViewRect.top,\r\n    documentRect.height - (mainViewRect.top + mainViewRect.height),\r\n    inlineStart(mainViewRect, rtl),\r\n    inlineEnd(documentRect, mainViewRect, rtl)\r\n  ],\r\n\r\n  \"inline-end\": (documentRect, mainViewRect, rtl) => [\r\n    mainViewRect.top,\r\n    documentRect.height - (mainViewRect.top + mainViewRect.height),\r\n    inlineStart(mainViewRect, !rtl),\r\n    inlineEnd(documentRect, mainViewRect, !rtl)\r\n  ],\r\n\r\n  center: (documentRect, mainViewRect) => [\r\n    mainViewRect.top,\r\n    documentRect.height - (mainViewRect.top + mainViewRect.height),\r\n    mainViewRect.left,\r\n    documentRect.width - mainViewRect.right\r\n  ]\r\n};\r\n\r\nlet lastDroppableArea: DroppableArea;\r\nlet lastViewId: string;\r\n\r\nexport const handleWidgetDrag =\r\n  (\r\n    draggableView: DraggableViewExtendedInfo,\r\n    droppableAreaRef: HTMLElement,\r\n    rtl: boolean\r\n  ) =>\r\n  (event: MouseEvent) => {\r\n    event.stopPropagation(); // Prevents the remove of the droppable area\r\n\r\n    // - - - - - - - - - - - DOM read operations - - - - - - - - - - -\r\n    const documentRect = document.documentElement.getBoundingClientRect();\r\n    const mainViewRect = draggableView.mainView.getBoundingClientRect();\r\n    const positionX = event.clientX; // Mouse position X\r\n    const positionY = event.clientY; // Mouse position Y\r\n\r\n    const distanceToTheLeftEdge = rtl\r\n      ? mainViewRect.width - (positionX - mainViewRect.left)\r\n      : positionX - mainViewRect.left;\r\n    const distanceToTheTopEdge = positionY - mainViewRect.top;\r\n\r\n    const relativePositionX =\r\n      (distanceToTheLeftEdge / mainViewRect.width) * 100;\r\n    const relativePositionY =\r\n      (distanceToTheTopEdge / mainViewRect.height) * 100;\r\n\r\n    let droppableArea: DroppableArea;\r\n\r\n    // Block start (Most likely droppable area)\r\n    if (\r\n      relativePositionY <= START_HALF_THRESHOLD &&\r\n      inBetween(relativePositionY, relativePositionX, 100 - relativePositionY)\r\n    ) {\r\n      droppableArea = \"block-start\";\r\n    }\r\n\r\n    // Inline End (second most likely droppable area)\r\n    else if (\r\n      relativePositionX >= END_HALF_THRESHOLD &&\r\n      inBetween(100 - relativePositionX, relativePositionY, relativePositionX)\r\n    ) {\r\n      droppableArea = \"inline-end\";\r\n    }\r\n\r\n    // Inline Start\r\n    else if (\r\n      relativePositionX <= START_HALF_THRESHOLD &&\r\n      inBetween(relativePositionX, relativePositionY, 100 - relativePositionX)\r\n    ) {\r\n      droppableArea = \"inline-start\";\r\n    }\r\n\r\n    // Block end\r\n    else if (\r\n      relativePositionY >= END_HALF_THRESHOLD &&\r\n      inBetween(100 - relativePositionY, relativePositionX, relativePositionY)\r\n    ) {\r\n      droppableArea = \"block-end\";\r\n    }\r\n\r\n    // Center\r\n    else {\r\n      droppableArea = \"center\";\r\n    }\r\n\r\n    // If the droppable area did not change, there is no need to update the DOM\r\n    if (\r\n      lastViewId === draggableView.viewId &&\r\n      lastDroppableArea === droppableArea\r\n    ) {\r\n      return;\r\n    }\r\n    lastDroppableArea = droppableArea;\r\n    lastViewId = draggableView.viewId;\r\n\r\n    const droppableAreaSizes = droppableAreaMap[droppableArea](\r\n      documentRect,\r\n      mainViewRect,\r\n      rtl\r\n    );\r\n\r\n    // - - - - - - - - - - - DOM write operations - - - - - - - - - - -\r\n    setProperty(droppableAreaRef, BLOCK_START, droppableAreaSizes[0]);\r\n    setProperty(droppableAreaRef, BLOCK_END, droppableAreaSizes[1]);\r\n\r\n    setProperty(droppableAreaRef, INLINE_START, droppableAreaSizes[2]);\r\n    setProperty(droppableAreaRef, INLINE_END, droppableAreaSizes[3]);\r\n  };\r\n\r\nexport const removeDroppableAreaStyles = (droppableAreaRef: HTMLElement) => {\r\n  lastDroppableArea = undefined;\r\n  lastViewId = undefined;\r\n  droppableAreaRef.removeAttribute(\"style\");\r\n};\r\n\r\nexport const getWidgetDropInfo = (): WidgetDropInfo | undefined =>\r\n  lastDroppableArea === undefined\r\n    ? undefined\r\n    : { dropAreaTarget: lastDroppableArea, viewIdTarget: lastViewId };\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { tabTypeToPart } from \"../list/utils\";\r\nimport {\r\n  FlexibleLayoutModel,\r\n  FlexibleLayoutGroupModel,\r\n  FlexibleLayoutItemModel,\r\n  FlexibleLayoutItemExtended,\r\n  FlexibleLayoutLeafModel,\r\n  FlexibleLayoutLeafInfo,\r\n  FlexibleLayoutLeafType,\r\n  FlexibleLayoutWidgetExtended\r\n} from \"./internal/flexible-layout/types\";\r\nimport { ROOT_VIEW } from \"../../common/utils\";\r\n\r\n// Aliases\r\ntype ItemExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutItemModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\ntype LeafExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutLeafModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\ntype GroupExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutGroupModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\nexport const createAndSetLeafInfo = (\r\n  flexibleLayoutLeaf: FlexibleLayoutLeafModel,\r\n  renderedWidgets: Set<string>,\r\n  widgetsInfo: Map<string, FlexibleLayoutWidgetExtended>\r\n): FlexibleLayoutLeafInfo<FlexibleLayoutLeafType> => {\r\n  const leafId = flexibleLayoutLeaf.id;\r\n  const leafType = flexibleLayoutLeaf.type;\r\n\r\n  if (leafType === \"single-content\") {\r\n    const widget = flexibleLayoutLeaf.widget;\r\n\r\n    // Mark the widget as rendered\r\n    renderedWidgets.add(widget.id);\r\n\r\n    // Store the widget info\r\n    widgetsInfo.set(leafId, { parentLeafId: leafId, info: widget });\r\n\r\n    return {\r\n      id: leafId,\r\n      type: leafType,\r\n      exportParts: \"\",\r\n      widget: widget\r\n    };\r\n  }\r\n\r\n  let selectedWidgetId = flexibleLayoutLeaf.selectedWidgetId;\r\n  const widgets = flexibleLayoutLeaf.widgets;\r\n  const tabOrientation = flexibleLayoutLeaf.tabDirection;\r\n  const tabPosition = flexibleLayoutLeaf.tabPosition;\r\n\r\n  const exportParts =\r\n    tabTypeToPart[\r\n      `${tabOrientation}-${\r\n        tabPosition ?? \"start\"\r\n      }` as keyof typeof tabTypeToPart\r\n    ](widgets);\r\n\r\n  widgets.forEach(widget => {\r\n    if (widget.wasRendered || selectedWidgetId === widget.id) {\r\n      // Ensure proper initialization\r\n      widget.wasRendered = true;\r\n\r\n      renderedWidgets.add(widget.id);\r\n    }\r\n\r\n    // Store the widget info\r\n    widgetsInfo.set(widget.id, { parentLeafId: leafId, info: widget });\r\n  });\r\n\r\n  // If there is no widget selected by default, select one\r\n  if (selectedWidgetId == null) {\r\n    const selectedWidget =\r\n      widgets[tabOrientation === \"block\" ? widgets.length - 1 : 0];\r\n    selectedWidgetId = selectedWidget.id;\r\n    selectedWidget.wasRendered = true;\r\n\r\n    // Mark the widget as rendered\r\n    renderedWidgets.add(selectedWidgetId);\r\n  }\r\n\r\n  return {\r\n    id: leafId,\r\n    exportParts,\r\n    closeButtonHidden: flexibleLayoutLeaf.closeButtonHidden ?? false,\r\n    dragOutsideDisabled: flexibleLayoutLeaf.dragOutsideDisabled ?? false,\r\n    selectedWidgetId: selectedWidgetId,\r\n    showCaptions: flexibleLayoutLeaf.showCaptions ?? true,\r\n    sortable: flexibleLayoutLeaf.sortable ?? true,\r\n    tabDirection: tabOrientation,\r\n    tabPosition: flexibleLayoutLeaf.tabPosition,\r\n    type: leafType,\r\n    widgets: widgets\r\n  };\r\n};\r\n\r\nconst addCustomBehavior = (\r\n  item: FlexibleLayoutItemModel,\r\n  layoutSplitterParts: Set<string>\r\n) => {\r\n  if (item.dragBar?.part) {\r\n    layoutSplitterParts.add(item.dragBar?.part);\r\n  }\r\n};\r\n\r\nexport const addNewLeafToInfo = (\r\n  leaf: FlexibleLayoutLeafModel,\r\n  parentItem: FlexibleLayoutGroupModel,\r\n  itemsInfo: Map<string, ItemExtended>,\r\n  renderedWidgets: Set<string>,\r\n  widgetsInfo: Map<string, FlexibleLayoutWidgetExtended>\r\n) => {\r\n  const flexibleLeafExtended: LeafExtended = {\r\n    item: leaf,\r\n    parentItem: parentItem,\r\n    leafInfo: createAndSetLeafInfo(leaf, renderedWidgets, widgetsInfo)\r\n  };\r\n\r\n  itemsInfo.set(leaf.id, flexibleLeafExtended);\r\n};\r\n\r\nconst updateFlexibleSubModels = (\r\n  flexibleLayoutItems: FlexibleLayoutItemModel[],\r\n  itemsInfo: Map<string, ItemExtended>,\r\n  layoutSplitterParts: Set<string>,\r\n  renderedWidgets: Set<string>,\r\n  widgetsInfo: Map<string, FlexibleLayoutWidgetExtended>,\r\n  parentItem: FlexibleLayoutGroupModel\r\n) => {\r\n  flexibleLayoutItems.forEach(flexibleItem => {\r\n    // Group\r\n    if ((flexibleItem as FlexibleLayoutGroupModel).items != null) {\r\n      const group = flexibleItem as FlexibleLayoutGroupModel;\r\n\r\n      const flexibleItemExtended: GroupExtended = {\r\n        item: group,\r\n        parentItem: parentItem\r\n      };\r\n      itemsInfo.set(group.id, flexibleItemExtended);\r\n\r\n      layoutSplitterParts.add(group.id);\r\n\r\n      updateFlexibleSubModels(\r\n        group.items, // Subitems\r\n        itemsInfo,\r\n        layoutSplitterParts,\r\n        renderedWidgets,\r\n        widgetsInfo,\r\n        group\r\n      );\r\n    }\r\n    // Leaf\r\n    else {\r\n      addNewLeafToInfo(\r\n        flexibleItem as FlexibleLayoutLeafModel,\r\n        parentItem,\r\n        itemsInfo,\r\n        renderedWidgets,\r\n        widgetsInfo\r\n      );\r\n    }\r\n\r\n    // Custom behaviors\r\n    addCustomBehavior(flexibleItem, layoutSplitterParts);\r\n  });\r\n};\r\n\r\nexport const updateFlexibleModels = (\r\n  flexibleLayout: FlexibleLayoutModel,\r\n  itemsInfo: Map<string, ItemExtended>,\r\n  layoutSplitterParts: Set<string>,\r\n  renderedWidgets: Set<string>,\r\n  widgetsInfo: Map<string, FlexibleLayoutWidgetExtended>\r\n) =>\r\n  updateFlexibleSubModels(\r\n    flexibleLayout.items,\r\n    itemsInfo,\r\n    layoutSplitterParts,\r\n    renderedWidgets,\r\n    widgetsInfo,\r\n    ROOT_VIEW // Root item\r\n  );\r\n\r\nexport const getLeafInfo = (\r\n  itemsInfo: Map<string, ItemExtended>,\r\n  leafId: string\r\n): FlexibleLayoutLeafInfo<FlexibleLayoutLeafType> =>\r\n  (itemsInfo.get(leafId) as LeafExtended).leafInfo;\r\n",":host {\r\n  display: contents;\r\n}\r\n\r\n.droppable-area {\r\n  // Reset popover's browser defaults\r\n  width: auto;\r\n  height: auto;\r\n  padding: 0;\r\n  margin: 0;\r\n  border: unset;\r\n  color: unset;\r\n\r\n  inset-block: var(--ch-flexible-layout-drop-area-block-start)\r\n    var(--ch-flexible-layout-drop-area-block-end);\r\n\r\n  left: var(--ch-flexible-layout-drop-area-inline-start);\r\n  right: var(--ch-flexible-layout-drop-area-inline-end);\r\n\r\n  background-color: color-mix(in srgb, currentColor 15%, transparent);\r\n\r\n  transition: inset 150ms ease-in-out;\r\n  pointer-events: none; // Avoid the capture of pointer events\r\n}\r\n\r\n.ch-list-inline--end {\r\n  grid-template-columns: 1fr max-content;\r\n}\r\n\r\n.ch-list-block--end {\r\n  grid-template-rows: 1fr max-content;\r\n}\r\n\r\n// Change the visual order, but no the order in the HTML\r\n.ch-list-inline--end::part(tab-list),\r\n.ch-list-block--end::part(tab-list) {\r\n  order: 1;\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Method,\r\n  Prop,\r\n  State,\r\n  forceUpdate,\r\n  h\r\n} from \"@stencil/core\";\r\nimport {\r\n  DraggableView,\r\n  DraggableViewExtendedInfo,\r\n  FlexibleLayoutModel,\r\n  FlexibleLayoutItemModel,\r\n  FlexibleLayoutItemExtended,\r\n  FlexibleLayoutLeafModel,\r\n  FlexibleLayoutLeafInfo,\r\n  FlexibleLayoutLeafType,\r\n  FlexibleLayoutViewRemoveResult,\r\n  ViewItemCloseInfo,\r\n  ViewSelectedItemInfo,\r\n  WidgetDragInfo,\r\n  WidgetReorderInfo\r\n} from \"./types\";\r\n\r\n// import { mouseEventModifierKey } from \"../../common/helpers\";\r\n\r\nimport { ListItemCloseInfo, ListSelectedItemInfo } from \"../../../list/types\";\r\nimport { ChListCustomEvent } from \"../../../../components\";\r\nimport {\r\n  getWidgetDropInfo,\r\n  handleWidgetDrag,\r\n  removeDroppableAreaStyles\r\n} from \"./utils\";\r\nimport { getLeafInfo } from \"../../utils\";\r\nimport { isRTL } from \"../../../../common/utils\";\r\n\r\nconst LEAF_SELECTOR = (id: string) => `[id=\"${id}\"]`;\r\n\r\n// Keys\r\nconst ESCAPE_KEY = \"Escape\";\r\n// const KEY_B = \"KeyB\";\r\n\r\n@Component({\r\n  shadow: true,\r\n  styleUrl: \"flexible-layout.scss\",\r\n  tag: \"ch-flexible-layout\"\r\n})\r\nexport class ChFlexibleLayout {\r\n  #draggableViews: DraggableViewExtendedInfo[];\r\n\r\n  #dragInfo: WidgetDragInfo;\r\n  #viewsOutOfDroppableZoneController: AbortController; // Allocated at runtime to reduce memory usage\r\n\r\n  // Refs\r\n  #draggedViewRef: DraggableView;\r\n  #droppableAreaRef: HTMLDivElement;\r\n  #layoutSplitterRef: HTMLChLayoutSplitterElement;\r\n\r\n  @Element() el: HTMLChFlexibleLayoutElement;\r\n\r\n  @State() dragBarDisabled = false;\r\n\r\n  /**\r\n   * Specifies the information of each view displayed.\r\n   */\r\n  @Prop() readonly itemsInfo: Map<\r\n    string,\r\n    FlexibleLayoutItemExtended<FlexibleLayoutItemModel, FlexibleLayoutLeafType>\r\n  >;\r\n\r\n  /**\r\n   * Specifies additional parts to export.\r\n   */\r\n  @Prop() readonly layoutSplitterParts: string;\r\n\r\n  /**\r\n   * Specifies the distribution of the items in the flexible layout.\r\n   */\r\n  @Prop() readonly model: FlexibleLayoutModel;\r\n\r\n  /**\r\n   * Fired when a item of a view request to be closed.\r\n   */\r\n  @Event() viewItemClose: EventEmitter<ViewItemCloseInfo>;\r\n\r\n  /**\r\n   * Fired when the selected item change.\r\n   */\r\n  @Event() selectedViewItemChange: EventEmitter<ViewSelectedItemInfo>;\r\n\r\n  /**\r\n   * Fired when a widget is dragged and dropped into a view.\r\n   */\r\n  @Event() viewItemReorder: EventEmitter<WidgetReorderInfo>;\r\n\r\n  /**\r\n   *\r\n   */\r\n  @Method()\r\n  async addSiblingView(\r\n    parentGroup: string,\r\n    siblingItem: string,\r\n    placedInTheSibling: \"before\" | \"after\",\r\n    viewInfo: FlexibleLayoutLeafModel,\r\n    takeHalfTheSpaceOfTheSiblingItem: boolean\r\n  ): Promise<boolean> {\r\n    const result = await this.#layoutSplitterRef.addSiblingLeaf(\r\n      parentGroup,\r\n      siblingItem,\r\n      placedInTheSibling,\r\n      viewInfo,\r\n      takeHalfTheSpaceOfTheSiblingItem\r\n    );\r\n\r\n    if (result.success) {\r\n      // Queue re-renders\r\n      forceUpdate(this);\r\n    }\r\n\r\n    return result.success;\r\n  }\r\n\r\n  /**\r\n   * Schedules a new render for a leaf even if no state changed.\r\n   */\r\n  @Method()\r\n  async refreshLeaf(leafId: string) {\r\n    const leafRef = this.el.shadowRoot.querySelector(LEAF_SELECTOR(leafId));\r\n\r\n    if (!leafRef) {\r\n      return;\r\n    }\r\n\r\n    forceUpdate(leafRef);\r\n  }\r\n\r\n  /**\r\n   * Removes the view that is identified by the given ID.\r\n   * The layout is rearranged depending on the state of the removed view.\r\n   */\r\n  @Method()\r\n  async removeView(itemId: string): Promise<FlexibleLayoutViewRemoveResult> {\r\n    const result = await this.#layoutSplitterRef.removeItem(itemId);\r\n\r\n    if (result.success) {\r\n      // Queue re-renders\r\n      forceUpdate(this);\r\n    }\r\n\r\n    return {\r\n      success: result.success,\r\n      reconnectedSubtree: result.reconnectedSubtree\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Given the view ID and the item id, remove the page of the item from the view.\r\n   */\r\n  @Method()\r\n  async removeItemPageInView(\r\n    viewId: string,\r\n    itemId: string,\r\n    forceRerender = true\r\n  ) {\r\n    const viewInfo = this.#getLeafInfo(viewId);\r\n    if (!viewInfo) {\r\n      return;\r\n    }\r\n\r\n    const viewRef = this.el.shadowRoot.querySelector(\r\n      `ch-list[id='${viewInfo.id}']`\r\n    ) as HTMLChListElement;\r\n    await viewRef.removePage(itemId, forceRerender);\r\n  }\r\n\r\n  #getLeafInfo = (\r\n    leafId: string\r\n  ): FlexibleLayoutLeafInfo<FlexibleLayoutLeafType> =>\r\n    getLeafInfo(this.itemsInfo, leafId);\r\n\r\n  #getAllLeafs = (): FlexibleLayoutLeafInfo<FlexibleLayoutLeafType>[] => {\r\n    const views: FlexibleLayoutLeafInfo<FlexibleLayoutLeafType>[] = [];\r\n\r\n    this.itemsInfo.forEach(item => {\r\n      const itemView = (\r\n        item as FlexibleLayoutItemExtended<\r\n          FlexibleLayoutLeafModel,\r\n          FlexibleLayoutLeafType\r\n        >\r\n      ).leafInfo;\r\n\r\n      if (itemView != null) {\r\n        views.push(itemView);\r\n      }\r\n    });\r\n\r\n    return views;\r\n  };\r\n\r\n  // @Listen(\"keydown\", { target: \"document\" })\r\n  // handleKeyDownEvent(event: KeyboardEvent) {\r\n  // if (\r\n  //   !mouseEventModifierKey(event) ||\r\n  //   event.code !== KEY_B ||\r\n  //   this.layout.inlineStart == null\r\n  // ) {\r\n  //   return;\r\n  // }\r\n  // event.stopPropagation();\r\n  // event.preventDefault();\r\n\r\n  // this.layout.inlineStart.expanded = !(\r\n  //   this.layout.inlineStart.expanded ?? true\r\n  // );\r\n  //   forceUpdate(this);\r\n  // }\r\n\r\n  // private handleMainGroupExpand = () => {\r\n  //   // if (this.layout.inlineStart) {\r\n  //   //   this.layout.inlineStart.expanded = false;\r\n  //   // }\r\n\r\n  //   // if (this.layout.inlineEnd) {\r\n  //   //   this.layout.inlineEnd.expanded = false;\r\n  //   // }\r\n\r\n  //   // if (this.layout.blockEnd) {\r\n  //   //   this.layout.blockEnd.expanded = false;\r\n  //   // }\r\n\r\n  //   forceUpdate(this);\r\n  // };\r\n\r\n  private handleItemChange =\r\n    (viewId: string) => (event: ChListCustomEvent<ListSelectedItemInfo>) => {\r\n      event.stopPropagation();\r\n\r\n      // Add the view id to properly update the render\r\n      const eventInfo: ViewSelectedItemInfo = {\r\n        ...event.detail,\r\n        viewId: viewId\r\n      };\r\n\r\n      this.selectedViewItemChange.emit(eventInfo);\r\n    };\r\n\r\n  private handleItemClose =\r\n    (viewId: string) => (event: ChListCustomEvent<ListItemCloseInfo>) => {\r\n      event.stopPropagation();\r\n\r\n      // Add the view id to properly update the render\r\n      const eventInfo: ViewItemCloseInfo = {\r\n        ...event.detail,\r\n        viewId: viewId\r\n      };\r\n\r\n      this.viewItemClose.emit(eventInfo);\r\n    };\r\n\r\n  private handleDragStart =\r\n    (viewId: string) => async (event: ChListCustomEvent<number>) => {\r\n      event.stopPropagation();\r\n\r\n      // We MUST store the reference before the Promise.allSettle, otherwise\r\n      // the event target will be the flexible-layout control\r\n      this.#draggedViewRef = event.target;\r\n\r\n      const views = [...this.el.shadowRoot.querySelectorAll(\"ch-list\")];\r\n\r\n      this.#dragInfo = {\r\n        index: event.detail,\r\n        viewId: viewId\r\n      };\r\n\r\n      // Get all draggable views\r\n      const draggableViewsResult = await Promise.allSettled(\r\n        views.map(view => view.getDraggableViews())\r\n      );\r\n\r\n      // Allocate memory\r\n      this.#draggableViews = [];\r\n\r\n      // Add handlers to manage droppable areas\r\n      draggableViewsResult.forEach((draggableViewResult, index) => {\r\n        if (draggableViewResult.status === \"fulfilled\") {\r\n          const draggableView = draggableViewResult.value;\r\n          const abortController = new AbortController(); // Necessary to remove the event listener\r\n\r\n          const extendedDraggableView = {\r\n            ...draggableView,\r\n            viewId: views[index].id, // All views have an id in the DOM\r\n            abortController: abortController\r\n          };\r\n\r\n          this.#draggableViews.push(extendedDraggableView);\r\n\r\n          const RTL = isRTL();\r\n\r\n          draggableView.mainView.addEventListener(\r\n            \"mousemove\",\r\n            handleWidgetDrag(\r\n              extendedDraggableView,\r\n              this.#droppableAreaRef,\r\n              RTL\r\n            ),\r\n            { capture: true, passive: true, signal: abortController.signal }\r\n          );\r\n\r\n          // Remove pointer events to not interfere on the mousemove event\r\n          extendedDraggableView.tabListView.style.pointerEvents = \"none\";\r\n          extendedDraggableView.pageView.style.pointerEvents = \"none\";\r\n        }\r\n      });\r\n\r\n      document.addEventListener(\"mouseup\", this.#handleWidgetDragEnd, {\r\n        passive: true\r\n      });\r\n      document.addEventListener(\"keydown\", this.#handleWidgetDragEndKeydown, {\r\n        passive: true\r\n      });\r\n\r\n      // Removes view when they are out of a droppable area\r\n      this.#viewsOutOfDroppableZoneController = new AbortController();\r\n      document.addEventListener(\r\n        \"mousemove\",\r\n        () => removeDroppableAreaStyles(this.#droppableAreaRef),\r\n        {\r\n          passive: true,\r\n          signal: this.#viewsOutOfDroppableZoneController.signal\r\n        }\r\n      );\r\n\r\n      // Show droppable area\r\n      this.#droppableAreaRef.showPopover(); // Layer 1\r\n\r\n      // After that, promote the drag preview to the second layer\r\n      this.#draggedViewRef.promoteDragPreviewToTopLayer(); // Layer 2\r\n\r\n      // Disable drag bars in layout-splitter to improve the drag experience\r\n      this.dragBarDisabled = true;\r\n    };\r\n\r\n  #handleWidgetDragEndKeydown = (event: KeyboardEvent) => {\r\n    if (event.code !== ESCAPE_KEY) {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n\r\n    // Cancels the drop by removing the drop info\r\n    removeDroppableAreaStyles(this.#droppableAreaRef);\r\n\r\n    this.#handleWidgetDragEnd();\r\n    this.#draggedViewRef.endDragPreview();\r\n  };\r\n\r\n  #handleWidgetDragEnd = () => {\r\n    // Remove mousemove handlers\r\n    this.#draggableViews.forEach(draggableView => {\r\n      draggableView.abortController.abort();\r\n\r\n      // Reset pointer events\r\n      draggableView.tabListView.style.pointerEvents = null;\r\n      draggableView.pageView.style.pointerEvents = null;\r\n    });\r\n\r\n    // Remove mouseup and keydown handlers\r\n    document.removeEventListener(\"mouseup\", this.#handleWidgetDragEnd);\r\n    document.removeEventListener(\"keydown\", this.#handleWidgetDragEndKeydown);\r\n    this.#viewsOutOfDroppableZoneController.abort();\r\n\r\n    // Check if must update the view due to a drop\r\n    const dropInfo = getWidgetDropInfo();\r\n\r\n    if (dropInfo) {\r\n      this.viewItemReorder.emit({ ...this.#dragInfo, ...dropInfo });\r\n    }\r\n\r\n    // Hide droppable area\r\n    this.#droppableAreaRef.hidePopover();\r\n    removeDroppableAreaStyles(this.#droppableAreaRef);\r\n\r\n    // Free the memory\r\n    this.#draggableViews = undefined;\r\n    this.#dragInfo = undefined;\r\n\r\n    // Re-enable drag bars\r\n    this.dragBarDisabled = false;\r\n  };\r\n\r\n  private renderTab = (viewInfo: FlexibleLayoutLeafInfo<\"tabbed\">) => (\r\n    <ch-list\r\n      id={viewInfo.id}\r\n      key={viewInfo.id}\r\n      slot={viewInfo.id}\r\n      class={{\r\n        [`ch-list-${viewInfo.tabDirection}--end`]:\r\n          viewInfo.tabPosition === \"end\"\r\n      }}\r\n      part={`leaf ${viewInfo.tabDirection} ${viewInfo.tabPosition ?? \"start\"} ${\r\n        viewInfo.id\r\n      }`}\r\n      exportparts={viewInfo.exportParts}\r\n      closeButtonHidden={viewInfo.closeButtonHidden}\r\n      dragOutsideDisabled={viewInfo.dragOutsideDisabled}\r\n      direction={viewInfo.tabDirection}\r\n      model={viewInfo.widgets}\r\n      selectedId={viewInfo.selectedWidgetId}\r\n      showCaptions={viewInfo.showCaptions}\r\n      sortable={viewInfo.sortable}\r\n      // onExpandMainGroup={tabType === \"main\" ? this.handleMainGroupExpand : null}\r\n      onItemClose={this.handleItemClose(viewInfo.id)}\r\n      onItemDragStart={this.handleDragStart(viewInfo.id)}\r\n      onSelectedItemChange={this.handleItemChange(viewInfo.id)}\r\n    >\r\n      {viewInfo.widgets.map(\r\n        widget =>\r\n          widget.wasRendered && <slot name={widget.id} slot={widget.id} />\r\n      )}\r\n    </ch-list>\r\n  );\r\n\r\n  private renderView = <T extends FlexibleLayoutLeafType>(\r\n    leaf: FlexibleLayoutLeafInfo<T>\r\n  ) =>\r\n    leaf.type === \"single-content\" ? (\r\n      <slot key={leaf.id} slot={leaf.id} name={leaf.id} />\r\n    ) : (\r\n      this.renderTab(leaf)\r\n    );\r\n\r\n  render() {\r\n    const layoutModel = this.model;\r\n\r\n    if (layoutModel == null) {\r\n      return \"\";\r\n    }\r\n\r\n    return (\r\n      <Host>\r\n        <ch-layout-splitter\r\n          dragBarDisabled={this.dragBarDisabled}\r\n          model={layoutModel}\r\n          exportparts={\"bar,\" + this.layoutSplitterParts}\r\n          ref={el => (this.#layoutSplitterRef = el)}\r\n        >\r\n          {this.#getAllLeafs().map(this.renderView)}\r\n        </ch-layout-splitter>\r\n\r\n        <div\r\n          aria-hidden=\"true\"\r\n          class=\"droppable-area\"\r\n          part=\"droppable-area\"\r\n          popover=\"manual\"\r\n          ref={el => (this.#droppableAreaRef = el)}\r\n        ></div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","ch-flexible-layout-render,\r\n.ch-flexible-layout-render-slot {\r\n  display: contents;\r\n}\r\n","import { Component, Method, Prop, Watch, forceUpdate, h } from \"@stencil/core\";\r\nimport {\r\n  FlexibleLayoutModel,\r\n  FlexibleLayoutItemModel,\r\n  FlexibleLayoutItemExtended,\r\n  FlexibleLayoutLeafModel,\r\n  FlexibleLayoutRenders,\r\n  FlexibleLayoutLeafInfo,\r\n  ViewItemCloseInfo,\r\n  ViewSelectedItemInfo,\r\n  WidgetReorderInfo,\r\n  FlexibleLayoutViewRemoveResult,\r\n  FlexibleLayoutGroupModel,\r\n  DroppableArea,\r\n  FlexibleLayoutWidget,\r\n  FlexibleLayoutLeafType,\r\n  FlexibleLayoutWidgetExtended\r\n} from \"./internal/flexible-layout/types\";\r\nimport { ChFlexibleLayoutCustomEvent } from \"../../components\";\r\nimport { removeElement } from \"../../common/array\";\r\nimport { addNewLeafToInfo, getLeafInfo, updateFlexibleModels } from \"./utils\";\r\n\r\n// Aliases\r\ntype ItemExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutItemModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\ntype LeafExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutLeafModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\ntype GroupExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutGroupModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\nconst GENERATE_GUID = () => {\r\n  let currentDate = new Date().getTime();\r\n\r\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, c => {\r\n    let randomNumber = Math.random() * 16; // random number in range 0 to 16\r\n    randomNumber = (currentDate + randomNumber) % 16 | 0;\r\n    currentDate = Math.floor(currentDate / 16);\r\n\r\n    return (c === \"x\" ? randomNumber : (randomNumber & 0x3) | 0x8).toString(16);\r\n  });\r\n};\r\n\r\n@Component({\r\n  shadow: false,\r\n  styleUrl: \"flexible-layout-render.scss\",\r\n  tag: \"ch-flexible-layout-render\"\r\n})\r\nexport class ChFlexibleLayoutRender {\r\n  /**\r\n   * This Set provides optimizations to not render items that were never\r\n   * shown on the screen.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #renderedWidgets: Set<string> = new Set();\r\n\r\n  #widgetsInfo: Map<string, FlexibleLayoutWidgetExtended> = new Map();\r\n\r\n  #itemsInfo: Map<string, ItemExtended> = new Map();\r\n\r\n  #layoutSplitterParts = \"\";\r\n\r\n  // Refs\r\n  #flexibleLayoutRef: HTMLChFlexibleLayoutElement;\r\n\r\n  /**\r\n   * A CSS class to set as the `ch-flexible-layout` element class.\r\n   */\r\n  @Prop() readonly cssClass: string = \"flexible-layout\";\r\n\r\n  /**\r\n   * Specifies the distribution of the items in the flexible layout.\r\n   */\r\n  @Prop() readonly model: FlexibleLayoutModel;\r\n  @Watch(\"model\")\r\n  modelChanged(newModel: FlexibleLayoutModel) {\r\n    this.#updateFlexibleModels(newModel);\r\n  }\r\n\r\n  /**\r\n   * Specifies the distribution of the items in the flexible layout.\r\n   */\r\n  @Prop() readonly renders: FlexibleLayoutRenders;\r\n\r\n  /**\r\n   * Add a view with widgets to render. The view will take the half space of\r\n   * the sibling view that its added with.\r\n   */\r\n  @Method()\r\n  async addSiblingView(\r\n    parentGroup: string,\r\n    siblingItem: string,\r\n    placedInTheSibling: \"before\" | \"after\",\r\n    viewInfo: FlexibleLayoutLeafModel,\r\n    takeHalfTheSpaceOfTheSiblingItem: boolean\r\n  ): Promise<boolean> {\r\n    const success = await this.#flexibleLayoutRef.addSiblingView(\r\n      parentGroup,\r\n      siblingItem,\r\n      placedInTheSibling,\r\n      viewInfo,\r\n      takeHalfTheSpaceOfTheSiblingItem\r\n    );\r\n\r\n    if (!success) {\r\n      return false;\r\n    }\r\n\r\n    addNewLeafToInfo(\r\n      viewInfo,\r\n      this.#itemsInfo.get(parentGroup).item as FlexibleLayoutGroupModel,\r\n      this.#itemsInfo,\r\n      this.#renderedWidgets,\r\n      this.#widgetsInfo\r\n    );\r\n\r\n    // Queue re-render\r\n    forceUpdate(this);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Add a widget in a `\"tabbed\"` type leaf.\r\n   * Only works if the parent leaf is `\"tabbed\"` type.\r\n   * If a widget with the same ID already exists, this method has not effect.\r\n   *\r\n   * To add a widget in a `\"single-content\"` type leaf, use the\r\n   * `addSiblingView` method.\r\n   */\r\n  @Method()\r\n  async addWidget(\r\n    leafId: string,\r\n    widget: FlexibleLayoutWidget,\r\n    selectWidget = true\r\n  ) {\r\n    const leafUIModel = this.#itemsInfo.get(leafId) as LeafExtended;\r\n\r\n    if (\r\n      !leafUIModel ||\r\n      leafUIModel.leafInfo == null ||\r\n      leafUIModel.leafInfo.type === \"single-content\" ||\r\n      this.#widgetsInfo.has(widget.id)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    leafUIModel.leafInfo.widgets.push(widget);\r\n    this.#widgetsInfo.set(widget.id, { parentLeafId: leafId, info: widget });\r\n\r\n    if (selectWidget) {\r\n      this.#updateSelectedWidget(leafUIModel.leafInfo, widget);\r\n\r\n      // Queue re-renders\r\n      forceUpdate(this);\r\n      forceUpdate(this.#flexibleLayoutRef);\r\n    } else {\r\n      // Queue re-render for the specific leaf\r\n      this.#flexibleLayoutRef.refreshLeaf(leafId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes a view and optionally all its rendered widget from the render.\r\n   * The reserved space will be given to the closest view.\r\n   */\r\n  @Method()\r\n  async removeView(\r\n    leafId: string,\r\n    removeRenderedWidgets: boolean\r\n  ): Promise<FlexibleLayoutViewRemoveResult> {\r\n    const itemInfo = this.#itemsInfo.get(leafId);\r\n\r\n    // The leaf didn't exist\r\n    if (!itemInfo) {\r\n      return { success: false, reconnectedSubtree: undefined };\r\n    }\r\n    const leafInfoToRemove = (itemInfo as LeafExtended).leafInfo;\r\n\r\n    // The item is not a leaf (it's a group) or is not \"tabbed\".\r\n    if (\r\n      leafInfoToRemove == null ||\r\n      leafInfoToRemove.type === \"single-content\"\r\n    ) {\r\n      return { success: false, reconnectedSubtree: undefined };\r\n    }\r\n\r\n    const result = await this.#flexibleLayoutRef.removeView(leafId);\r\n\r\n    if (!result.success) {\r\n      return result;\r\n    }\r\n\r\n    // Update view info, since it got renamed\r\n    const reconnectedSubtree = result.reconnectedSubtree;\r\n\r\n    if (reconnectedSubtree) {\r\n      // - - - - - - - - - - - - - - - - - - - - - - - - -\r\n      // INPUT MODEL:\r\n      //                       secondParentItem\r\n      //                              / \\\r\n      //                           /       \\\r\n      //                        /             \\\r\n      //        (Id x) nodeToReconnect  Other items...\r\n      //                       / \\\r\n      //                    /       \\\r\n      //                 /             \\\r\n      // (Id y) leafInfoToRemove  (Id z) nodeToRemove\r\n      //                                     / \\\r\n      //                                  /       \\\r\n      //                              subtree or widgets\r\n      //\r\n      //\r\n      // OUTPUT MODEL:\r\n      //                  secondParentItem\r\n      //                         / \\\r\n      //                      /       \\\r\n      //                   /             \\\r\n      //    (Id x) nodeToReconnect  Other items...\r\n      //                / \\\r\n      //             /       \\\r\n      //         subtree or widgets\r\n      // - - - - - - - - - - - - - - - - - - - - - - - - -\r\n\r\n      const nodeToRemoveUIModel = this.#itemsInfo.get(\r\n        reconnectedSubtree.nodeToRemove\r\n      );\r\n\r\n      // The node to reconnect is still a group (since the nodeToRemove is a group).\r\n      // We must reconnect the nodeToRemove's children\r\n      if ((nodeToRemoveUIModel as LeafExtended).leafInfo == null) {\r\n        const itemsOfNodeToRemove = (nodeToRemoveUIModel as GroupExtended).item\r\n          .items;\r\n\r\n        const nodeToReconnectUIModel = this.#itemsInfo.get(\r\n          reconnectedSubtree.nodeToReconnect\r\n        ) as GroupExtended;\r\n\r\n        // Reconnect the parent of the removedNode subtree\r\n        itemsOfNodeToRemove.forEach(itemToUpdateItsParent => {\r\n          this.#itemsInfo.get(itemToUpdateItsParent.id).parentItem =\r\n            nodeToReconnectUIModel.item;\r\n        });\r\n      }\r\n      // The node to reconnect is a leaf, since the nodeToRemove is a leaf\r\n      else {\r\n        const nodeToReconnectUIModel = this.#itemsInfo.get(\r\n          reconnectedSubtree.nodeToReconnect\r\n        ) as LeafExtended;\r\n\r\n        // Add leaf information\r\n        nodeToReconnectUIModel.leafInfo = (\r\n          nodeToRemoveUIModel as LeafExtended\r\n        ).leafInfo;\r\n        const nodeToReconnectLeafInfo = nodeToReconnectUIModel.leafInfo;\r\n\r\n        // Update leaf id\r\n        nodeToReconnectLeafInfo.id = reconnectedSubtree.nodeToReconnect;\r\n\r\n        const widgetsToUpdateParentLeafId: FlexibleLayoutWidget[] =\r\n          nodeToReconnectLeafInfo.type === \"single-content\"\r\n            ? [nodeToReconnectLeafInfo.widget]\r\n            : nodeToReconnectLeafInfo.widgets;\r\n\r\n        // Update the parent leaf id in the reconnected widgets\r\n        widgetsToUpdateParentLeafId.forEach(widget => {\r\n          const widgetUIModel = this.#widgetsInfo.get(widget.id);\r\n          widgetUIModel.parentLeafId = nodeToReconnectLeafInfo.id;\r\n        });\r\n      }\r\n\r\n      // Delete the old item\r\n      this.#itemsInfo.delete(reconnectedSubtree.nodeToRemove);\r\n    }\r\n\r\n    // Remove rendered widgets\r\n    if (removeRenderedWidgets) {\r\n      leafInfoToRemove.widgets.forEach(this.#deleteRenderedWidget);\r\n    }\r\n\r\n    // Delete the view\r\n    this.#itemsInfo.delete(leafId);\r\n\r\n    // Queue re-renders\r\n    forceUpdate(this);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Remove a widget from a `\"tabbed\"` type leaf.\r\n   * Only works if the parent leaf is `\"tabbed\"` type.\r\n   *\r\n   * To remove a widget from a `\"single-content\"` type leaf, use the\r\n   * `removeView` method.\r\n   */\r\n  @Method()\r\n  async removeWidget(widgetId: string) {\r\n    const widgetUIModel = this.#widgetsInfo.get(widgetId);\r\n\r\n    if (!widgetUIModel) {\r\n      return;\r\n    }\r\n    const leafInfo = this.#getLeafInfo(widgetUIModel.parentLeafId);\r\n\r\n    if (leafInfo.type === \"single-content\") {\r\n      return;\r\n    }\r\n\r\n    this.#checkViewStateToRemoveWidget(\r\n      leafInfo,\r\n      widgetUIModel.info,\r\n      leafInfo.widgets.findIndex(widget => widget.id === widgetId) // Find the index of the widget\r\n    );\r\n  }\r\n\r\n  #updateFlexibleModels = (layout: FlexibleLayoutModel) => {\r\n    // Empty layout\r\n    if (layout == null) {\r\n      return;\r\n    }\r\n\r\n    const layoutSplitterPartsSet: Set<string> = new Set();\r\n\r\n    updateFlexibleModels(\r\n      layout,\r\n      this.#itemsInfo,\r\n      layoutSplitterPartsSet,\r\n      this.#renderedWidgets,\r\n      this.#widgetsInfo\r\n    );\r\n\r\n    this.#layoutSplitterParts = [...layoutSplitterPartsSet.values()].join(\",\");\r\n  };\r\n\r\n  #getLeafInfo = (\r\n    leafId: string\r\n  ): FlexibleLayoutLeafInfo<FlexibleLayoutLeafType> =>\r\n    getLeafInfo(this.#itemsInfo, leafId);\r\n\r\n  #handleLeafSelectedWidgetChange = (\r\n    event: ChFlexibleLayoutCustomEvent<ViewSelectedItemInfo>\r\n  ) => {\r\n    event.stopPropagation();\r\n\r\n    const selectedItemInfo = event.detail;\r\n    const leafInfo = this.#getLeafInfo(\r\n      selectedItemInfo.viewId\r\n    ) as FlexibleLayoutLeafInfo<\"tabbed\">;\r\n\r\n    // Mark the item as rendered\r\n    const newSelectedItem = leafInfo.widgets[selectedItemInfo.newSelectedIndex];\r\n\r\n    // Select the new item\r\n    this.#updateSelectedWidget(leafInfo, newSelectedItem);\r\n\r\n    // Queue re-renders\r\n    forceUpdate(this);\r\n    forceUpdate(this.#flexibleLayoutRef);\r\n  };\r\n\r\n  #handleLeafWidgetClose = (\r\n    event: ChFlexibleLayoutCustomEvent<ViewItemCloseInfo>\r\n  ) => {\r\n    event.stopPropagation();\r\n\r\n    const itemCloseInfo = event.detail;\r\n    const viewInfo = this.#getLeafInfo(\r\n      itemCloseInfo.viewId\r\n    ) as FlexibleLayoutLeafInfo<\"tabbed\">;\r\n\r\n    const widgetIndex = itemCloseInfo.itemIndex;\r\n    const widgetInfo = viewInfo.widgets[widgetIndex];\r\n\r\n    this.#checkViewStateToRemoveWidget(viewInfo, widgetInfo, widgetIndex);\r\n  };\r\n\r\n  #checkViewStateToRemoveWidget = (\r\n    viewInfo: FlexibleLayoutLeafInfo<\"tabbed\">,\r\n    widgetInfo: FlexibleLayoutWidget,\r\n    widgetIndex: number\r\n  ) => {\r\n    // Last item from the view. Destroy the view and adjust the layout\r\n    if (viewInfo.widgets.length === 1) {\r\n      this.removeView(viewInfo.id, true);\r\n      return;\r\n    }\r\n\r\n    const viewWidgets = viewInfo.widgets;\r\n    const widgetsCount = viewInfo.widgets.length;\r\n\r\n    // If the item was selected, select another item\r\n    if (widgetInfo.id === viewInfo.selectedWidgetId) {\r\n      const newSelectedItem =\r\n        widgetIndex === widgetsCount - 1 // If it's the last item\r\n          ? viewWidgets[widgetsCount - 2] // Select the previous\r\n          : viewWidgets[widgetIndex + 1]; // Otherwise, select the next\r\n\r\n      // Mark the item as selected and rendered\r\n      this.#updateSelectedWidget(viewInfo, newSelectedItem);\r\n    }\r\n\r\n    this.#removeWidget(viewInfo, widgetIndex);\r\n\r\n    // Queue re-renders\r\n    forceUpdate(this);\r\n    forceUpdate(this.#flexibleLayoutRef);\r\n  };\r\n\r\n  /**\r\n   * @param skipRenderRemoval Useful to determine if the render of the widget must not be destroyed.\r\n   * Used when the widget of the leaf must be reconnected in another parent\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #removeWidget = (\r\n    leafInfo: FlexibleLayoutLeafInfo<\"tabbed\">,\r\n    itemIndex: number,\r\n    skipRenderRemoval = false\r\n  ) => {\r\n    // Remove the item from the view\r\n    const widgetInfo = removeElement(leafInfo.widgets, itemIndex);\r\n    this.#flexibleLayoutRef.removeItemPageInView(leafInfo.id, widgetInfo.id);\r\n\r\n    // Remove the item from the flexible-layout-render to optimize resources\r\n    if (!skipRenderRemoval) {\r\n      this.#deleteRenderedWidget(widgetInfo);\r\n    }\r\n  };\r\n\r\n  #deleteRenderedWidget = (widgetInfo: FlexibleLayoutWidget) => {\r\n    if (widgetInfo.conserveRenderState === true) {\r\n      return;\r\n    }\r\n\r\n    // Remove the item from the flexible-layout-render to optimize resources\r\n    this.#renderedWidgets.delete(widgetInfo.id);\r\n    this.#widgetsInfo.delete(widgetInfo.id);\r\n  };\r\n\r\n  #updateSelectedWidget = (\r\n    leafInfo: FlexibleLayoutLeafInfo<\"tabbed\">,\r\n    widget: FlexibleLayoutWidget\r\n  ) => {\r\n    // Mark the item as rendered\r\n    this.#renderedWidgets.add(widget.id);\r\n\r\n    // Mark the item as rendered\r\n    widget.wasRendered = true;\r\n\r\n    leafInfo.selectedWidgetId = widget.id;\r\n  };\r\n\r\n  /**\r\n   * This handler can only be triggered by \"tabbed\" leafs.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #handleLeafWidgetReorder = async (\r\n    event: ChFlexibleLayoutCustomEvent<WidgetReorderInfo>\r\n  ) => {\r\n    const reorderInfo = event.detail;\r\n    const leafId = reorderInfo.viewId;\r\n    const leafIdTarget = reorderInfo.viewIdTarget;\r\n    const dropAreaTarget = reorderInfo.dropAreaTarget;\r\n\r\n    const leafInfo = this.#getLeafInfo(\r\n      leafId\r\n    ) as FlexibleLayoutLeafInfo<\"tabbed\">;\r\n\r\n    // Dropping in the same view. Nothing to change\r\n    if (\r\n      leafId === leafIdTarget &&\r\n      (dropAreaTarget === \"center\" || leafInfo.widgets.length === 1)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const leafTargetInfo = this.#getLeafInfo(\r\n      leafIdTarget\r\n    ) as FlexibleLayoutLeafInfo<\"tabbed\">;\r\n    const widgetIndex = reorderInfo.index;\r\n    const widgetToMove = leafInfo.widgets[widgetIndex];\r\n\r\n    // Update parent leaf id in the widget to move\r\n    this.#widgetsInfo.get(widgetToMove.id).parentLeafId = leafIdTarget;\r\n\r\n    // Mark the item as rendered, because the drag does not have to trigger item\r\n    // selection (which trigger item rendering)\r\n    this.#renderedWidgets.add(widgetToMove.id);\r\n    widgetToMove.wasRendered = true;\r\n\r\n    // The drop does not create a new view\r\n    if (dropAreaTarget === \"center\") {\r\n      leafTargetInfo.widgets.push(widgetToMove);\r\n\r\n      // Update the selected widget in the target view\r\n      this.#updateSelectedWidget(leafTargetInfo, widgetToMove);\r\n    } else {\r\n      await this.#handleViewItemReorderCreateView(\r\n        widgetToMove,\r\n        leafTargetInfo,\r\n        dropAreaTarget\r\n      );\r\n    }\r\n\r\n    // Remove the view, since it has no more items, but don't destroy the\r\n    // render of the widget, since the widget is only moved\r\n    if (leafInfo.widgets.length === 1) {\r\n      await this.removeView(leafId, false);\r\n\r\n      // Refresh reference to force re-render\r\n      // this.#layoutSplitterModels = { ...this.#layoutSplitterModels }; // TODO: UPDATE THIS\r\n    }\r\n    // Remove the item in the view that belongs\r\n    else {\r\n      // Select the previous item if the removed item was selected\r\n      if (leafInfo.selectedWidgetId === widgetToMove.id) {\r\n        const newSelectedIndex = widgetIndex === 0 ? 1 : widgetIndex - 1;\r\n        const newSelectedItem = leafInfo.widgets[newSelectedIndex];\r\n\r\n        // Mark the item as selected and rendered\r\n        this.#updateSelectedWidget(leafInfo, newSelectedItem);\r\n      }\r\n\r\n      // Remove the item from the view\r\n      this.#removeWidget(leafInfo, widgetIndex, true);\r\n\r\n      // Queue re-renders\r\n      forceUpdate(this); // Update rendered items\r\n      // forceUpdate(this.#flexibleLayoutRef);\r\n    }\r\n\r\n    // this.#flexibleLayoutRef.refreshLayout();\r\n  };\r\n\r\n  #handleViewItemReorderCreateView = async (\r\n    widget: FlexibleLayoutWidget,\r\n    viewTargetInfo: FlexibleLayoutLeafInfo<\"tabbed\">,\r\n    dropAreaTarget: DroppableArea\r\n  ) => {\r\n    // Implementation note: If the direction matches the dropAreaTarget\r\n    // (for example, dropAreaTarget === \"block-start\" and parent direction === \"row\")\r\n    // we can use addSiblingView\r\n\r\n    // const viewUIModel = this.#itemsInfo.get(\r\n    //   viewId\r\n    // ) as FlexibleLayoutItemExtended<FlexibleLayoutLeaf>;\r\n    const viewTargetUIModel = this.#itemsInfo.get(\r\n      viewTargetInfo.id\r\n    ) as FlexibleLayoutItemExtended<FlexibleLayoutLeafModel, \"tabbed\">;\r\n    const viewTargetParentInfo = viewTargetUIModel.parentItem; // TODO: CHECK FOR ROOT NODE <------------------\r\n\r\n    const newLeafToAddId = GENERATE_GUID();\r\n    const newLeafToAdd: FlexibleLayoutLeafModel = {\r\n      id: newLeafToAddId,\r\n      selectedWidgetId: widget.id,\r\n      size: undefined,\r\n      tabDirection: viewTargetUIModel.leafInfo.tabDirection,\r\n      type: \"tabbed\",\r\n      widgets: [widget],\r\n      dragBar: {\r\n        size: viewTargetUIModel.item.dragBar?.size,\r\n        part: viewTargetUIModel.item.dragBar?.part // TODO: IMPROVE THIS\r\n      }\r\n    };\r\n\r\n    const viewTargetIsContainedInAGroupWithTheSameDirection =\r\n      (viewTargetParentInfo.direction === \"rows\" &&\r\n        (dropAreaTarget === \"block-start\" || dropAreaTarget === \"block-end\")) ||\r\n      (viewTargetParentInfo.direction === \"columns\" &&\r\n        (dropAreaTarget === \"inline-start\" || dropAreaTarget === \"inline-end\"));\r\n\r\n    // Add a sibling\r\n    if (viewTargetIsContainedInAGroupWithTheSameDirection) {\r\n      await this.addSiblingView(\r\n        viewTargetParentInfo.id,\r\n        viewTargetInfo.id,\r\n        dropAreaTarget === \"block-start\" || dropAreaTarget === \"inline-start\"\r\n          ? \"before\"\r\n          : \"after\",\r\n        newLeafToAdd,\r\n        true\r\n      );\r\n    }\r\n\r\n    // The current target must be modified to be a group\r\n    else {\r\n      // TODO: Add implementation\r\n    }\r\n\r\n    // VERIFY THE PARENT NODE\r\n    // HANDLE NEW VIEW CREATION\r\n    // CHECK IF THE PREVIOUS VIEW HAS ONLY ONE ITEM TO REUSE ITS VIEW ID?\r\n  };\r\n\r\n  #renderWidget = (widgetId: string) => {\r\n    const widgetInfo = this.#widgetsInfo.get(widgetId).info;\r\n    const widgetRender = this.renders[widgetInfo.renderId ?? widgetId];\r\n\r\n    return widgetInfo.addWrapper ? (\r\n      <div\r\n        key={widgetId}\r\n        slot={widgetId}\r\n        class=\"ch-flexible-layout-render-slot\"\r\n      >\r\n        {widgetRender(widgetInfo)}\r\n      </div>\r\n    ) : (\r\n      widgetRender(widgetInfo)\r\n    );\r\n  };\r\n\r\n  componentWillLoad() {\r\n    this.#updateFlexibleModels(this.model);\r\n  }\r\n\r\n  render() {\r\n    // Check render against the \"layout\" property\r\n    if (this.model == null) {\r\n      return \"\";\r\n    }\r\n\r\n    return (\r\n      <ch-flexible-layout\r\n        class={this.cssClass || null}\r\n        model={this.model}\r\n        layoutSplitterParts={this.#layoutSplitterParts}\r\n        itemsInfo={this.#itemsInfo}\r\n        onViewItemClose={this.#handleLeafWidgetClose}\r\n        onViewItemReorder={this.#handleLeafWidgetReorder}\r\n        onSelectedViewItemChange={this.#handleLeafSelectedWidgetChange}\r\n        ref={el => (this.#flexibleLayoutRef = el)}\r\n      >\r\n        {[...this.#renderedWidgets.values()].map(this.#renderWidget)}\r\n      </ch-flexible-layout>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}