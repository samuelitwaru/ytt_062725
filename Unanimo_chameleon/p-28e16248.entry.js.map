{"version":3,"names":["nextDataModelingCss","ChNextDataModelingStyle0","NextDataModeling","render","h","Host","key","role","nextDataModelingItemCss","ChNextDataModelingItemStyle0","NAME","PART_PREFIX","CANCEL_CLASS","CONFIRM_CLASS","BUTTON_CONFIRM_PART","disabledPart","BUTTON_CANCEL_PART","SELECT_OPTION_PART","NextDataModelingSubitem","actions","captions","add","label","confirm","class","part","event","this","confirmAction","cancel","toggleShowNewField","delete","undefined","emitDelete","toggleMode","edit","normal","errorName","lastEditInfo","name","type","focusInputInNextRender","inputName","inputType","deleteField","editField","newEntity","firstNewField","firstNewFieldErrors","newField","handleExpandedChange","stopPropagation","handleFirstNewField","level","detail","handleFirstNewFieldErrors","setAddingMode","clearInput","waitingMode","inputRef","shadowRoot","firstElementChild","value","errorType","checkErrors","errors","hideWaitingMode","mode","entityItem","el","makeAttsPrettier","atts","maxAtts","length","join","slice","fieldNames","parentItem","parentElement","emit","showNewFieldBtn","getGxEditInputValue","editElement","handleKeyDown","actionType","code","KEY_CODES","ENTER","preventDefault","checkChildErrors","validateErrorsWhenAddingEntity","actionsVisible","itemInfo","trimmedInput","trim","includes","expanded","loading","height","viewBox","cx","cy","r","errorText","errorTexts","Empty","AlreadyDefinedEntity1","AlreadyDefined1","AlreadyDefined2","readonlyContent","id","collection","entityNameToATTs","dataType","editableContent","errorPart","disabled","ref","onKeydown","selected","ATT","ENTITY","LEVEL","newFieldMode","onClick","addNewEntity","addNewField","slot","tabindex","normalMode","waitingModePart","showWaitingModeTexts","header","toLowerCase","readonly","optimization","deleteMode","componentDidUpdate","requestAnimationFrame","click","accessibleName","exportparts"],"sources":["src/components/next/data-modeling/next-data-modeling.scss?tag=ch-next-data-modeling","src/components/next/data-modeling/next-data-modeling.tsx","src/components/next/data-modeling-item/next-data-modeling-item.scss?tag=ch-next-data-modeling-item&encapsulation=shadow","src/components/next/data-modeling-item/next-data-modeling-item.tsx"],"sourcesContent":["ch-next-data-modeling {\r\n  --delete-icon: url('data:image/svg+xml,<svg width=\"14\" height=\"16\" viewBox=\"0 0 14 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M1.87729 4.55154H12.1585V14.3936C12.1613 14.8186 11.9944 15.2273 11.6949 15.5288C11.3953 15.8304 10.9878 16 10.5627 16H3.47304C3.04797 16 2.64046 15.8304 2.34089 15.5288C2.04133 15.2273 1.87447 14.8186 1.87729 14.3936V4.55154ZM10.5734 1.42436V1.25301C10.5676 0.559264 10.0035 0 9.30972 0H4.72605C4.03228 0 3.46821 0.559264 3.46233 1.25301V1.42436H0.078125V3.03079H14.0005V1.42436H10.5734Z\" fill=\"%23000\"/></svg>');\r\n  --edit-icon: url('data:image/svg+xml,<svg width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14.4291 5.4137L10.8838 1.73151L12.0517 0.50411C12.3715 0.168037 12.7644 0 13.2304 0C13.6964 0 14.089 0.168037 14.4082 0.50411L15.5761 1.73151C15.8958 2.06758 16.0627 2.47321 16.0766 2.94838C16.0905 3.42356 15.9376 3.82889 15.6178 4.16438L14.4291 5.4137ZM13.2195 6.70685L4.37728 16H0.832031V12.274L9.67429 2.98082L13.2195 6.70685Z\" fill=\"%23000\"/></svg>');\r\n\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-auto-rows: min-content;\r\n  flex: 1;\r\n  height: 100%;\r\n}\r\n","import { Component, Host, h } from \"@stencil/core\";\r\nimport { Component as ChComponent } from \"../../../common/interfaces\";\r\n\r\n/**\r\n * @slot - The first level items (entities) of the data model\r\n */\r\n@Component({\r\n  shadow: false,\r\n  styleUrl: \"next-data-modeling.scss\",\r\n  tag: \"ch-next-data-modeling\"\r\n})\r\nexport class NextDataModeling implements ChComponent {\r\n  render() {\r\n    return (\r\n      <Host role=\"list\">\r\n        <slot />\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","$separation-between-icons: 12px;\r\n$transition-duration: 250ms;\r\n\r\n// Reset browser defaults\r\n:where(button) {\r\n  all: unset;\r\n  display: inline-flex;\r\n  cursor: pointer;\r\n}\r\n\r\n// // WA to add mouse pointer un gx-button\r\n// gx-button {\r\n//   cursor: pointer;\r\n// }\r\n\r\n// // WA to disable the gx-button\r\n// .gx-disabled {\r\n//   pointer-events: none;\r\n// }\r\n\r\n*,\r\n::before,\r\n::after {\r\n  box-sizing: border-box;\r\n}\r\n\r\n// Reset browser defaults\r\n.error-text,\r\n.name {\r\n  color: inherit;\r\n  font: inherit;\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: 0;\r\n}\r\n\r\n// WA to customize auto-fill in gx-edit\r\ngx-edit:is(.gx-edit--auto-fill, .gx-edit--auto-fill:focus-within, .gx-edit--auto-fill:hover) {\r\n  background-color: var(--gx-edit-auto-fill-background-color);\r\n}\r\n\r\n:host {\r\n  display: grid;\r\n  --chevron-color: #ccc;\r\n}\r\n\r\n:host(:not(.gx-disabled):hover),\r\n:host(:not(.gx-disabled):focus-within) {\r\n  .button-primary {\r\n    display: grid;\r\n\r\n    &::before {\r\n      content: \"\";\r\n    }\r\n  }\r\n}\r\n\r\n:host(.gx-disabled) {\r\n  pointer-events: none;\r\n\r\n  .accordion {\r\n    pointer-events: all;\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//          Add new field\r\n// - - - - - - - - - - - - - - - -\r\n.add-new-field--level-0 {\r\n  display: grid;\r\n  grid-template: \"name . . .\" min-content \"field-name type confirm cancel\" 1fr \"error-text . confirm cancel\" min-content \"sub-item sub-item confirm cancel\" min-content / 1fr min-content 56px 32px;\r\n  row-gap: 8px;\r\n\r\n  ::slotted(ch-next-data-modeling) {\r\n    grid-area: sub-item;\r\n  }\r\n}\r\n\r\n.add-new-field--level-1 {\r\n  display: grid;\r\n  grid-template: \"name . . .\" min-content \"field-name type confirm cancel\" 1fr \"error-text . . .\" min-content / 1fr min-content 56px 32px;\r\n  row-gap: 8px;\r\n}\r\n\r\n.add-new-field--level-2 {\r\n  display: grid;\r\n  grid-template: \"sub-field name . . .\" min-content \". field-name type confirm cancel\" 1fr \". error-text . . .\" min-content / min-content 1fr min-content 56px 32px;\r\n  row-gap: 4px;\r\n}\r\n\r\n.add-new-field--no-actions {\r\n  grid-template: \"sub-field name .\" min-content \". field-name type\" 1fr \". error-text .\" min-content / min-content 1fr min-content;\r\n}\r\n\r\n// Accordion\r\n.accordion:hover,\r\n.accordion:focus-within {\r\n  .edit-button,\r\n  .delete-button {\r\n    display: grid;\r\n  }\r\n}\r\n\r\n.sub-field {\r\n  grid-area: sub-field;\r\n}\r\n\r\n.field-name {\r\n  grid-area: field-name;\r\n  margin-inline-end: 8px;\r\n}\r\n\r\n.button-confirm {\r\n  grid-area: confirm;\r\n  margin-inline: 16px 8px;\r\n}\r\n\r\n.button-cancel {\r\n  grid-area: cancel;\r\n}\r\n\r\n.error-text {\r\n  grid-area: error-text;\r\n  display: flex;\r\n  white-space: break-spaces; // Show empty spaces even when using \"display: flex\"\r\n}\r\n\r\n.header {\r\n  display: grid;\r\n  grid-template: \"sub-field name type edit delete\" 1fr / min-content max-content 1fr min-content max-content;\r\n  align-items: center;\r\n  width: 100%;\r\n  margin-inline-end: $separation-between-icons;\r\n}\r\n\r\n// Separation between the actions and the chevron\r\n.accordion::part(accordion__header) {\r\n  column-gap: 24px;\r\n}\r\n\r\n.edit-mode {\r\n  grid-template: \"sub-field field-name type confirm cancel\" min-content \"sub-field error-text error-text confirm cancel\" min-content / min-content 1fr min-content 56px 32px;\r\n}\r\n\r\n.name {\r\n  grid-area: name;\r\n\r\n  &-entity {\r\n    text-decoration: underline;\r\n  }\r\n}\r\n\r\n.type {\r\n  grid-area: type;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//             Select\r\n// - - - - - - - - - - - - - - - -\r\n.select-wrapper {\r\n  --chevron: url('data:image/svg+xml,<svg width=\"12\" height=\"8\" viewBox=\"0 0 12 8\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M1.41 0L6 4.59L10.59 0L12 1.42L6 7.42L0 1.42L1.41 0Z\"/></svg>');\r\n  grid-area: type;\r\n  position: relative;\r\n\r\n  &::after {\r\n    content: \"\";\r\n    display: flex;\r\n    position: absolute;\r\n    inset-inline-end: 0;\r\n    inset-block-start: calc(50% - 3.75px);\r\n    width: 12px;\r\n    height: 7.5px;\r\n    margin-inline: 8px 16px;\r\n    -webkit-mask: var(--chevron) no-repeat;\r\n    background-color: var(--chevron-color);\r\n    pointer-events: none;\r\n  }\r\n}\r\n\r\n.select {\r\n  display: flex;\r\n  height: 100%;\r\n  appearance: none;\r\n  background-color: unset;\r\n  cursor: pointer;\r\n  outline: unset;\r\n\r\n  transition-property: background-color, border-color, color;\r\n  transition-duration: $transition-duration;\r\n}\r\n\r\n.button-new-entity {\r\n  align-items: center;\r\n  transition: color $transition-duration;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//         Primary actions\r\n// - - - - - - - - - - - - - - - -\r\n// This class is only used to trigger an Stencil optimization by reusing DOM nodes\r\n.optimization {\r\n  display: contents;\r\n}\r\n\r\n.button-primary {\r\n  display: none; // By default, it's hidden\r\n  align-self: center;\r\n  height: 20px;\r\n  padding: 2px;\r\n\r\n  &::before {\r\n    display: flex;\r\n  }\r\n}\r\n\r\n.button-edit {\r\n  grid-area: edit;\r\n  width: 21px;\r\n\r\n  &::before {\r\n    -webkit-mask: var(--edit-icon) no-repeat;\r\n  }\r\n}\r\n\r\n.button-delete {\r\n  grid-area: delete;\r\n  width: 18px;\r\n  margin-inline-start: $separation-between-icons;\r\n\r\n  &::before {\r\n    -webkit-mask: var(--delete-icon) no-repeat;\r\n  }\r\n}\r\n\r\n// Delete mode\r\n.delete-mode,\r\n.waiting-mode {\r\n  grid-area: delete;\r\n  display: grid;\r\n  grid-template-columns: 1fr 24px 24px;\r\n  align-items: center;\r\n  column-gap: 8px;\r\n  cursor: auto; // Remove \"cursor: pointer\" inherited from <button> tag\r\n  animation: fade-in $transition-duration ease-in-out;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//          Waiting mode\r\n// - - - - - - - - - - - - - - - -\r\n.waiting-mode {\r\n  grid-template-columns: 24px 1fr;\r\n}\r\n\r\n.waiting-mode__loading {\r\n  order: -1;\r\n  width: 100%;\r\n  fill: none;\r\n  animation: rotate 1.5s linear 0.125s infinite;\r\n}\r\n\r\ncircle {\r\n  stroke: currentColor;\r\n  stroke-dasharray: 1, 200;\r\n  stroke-linecap: round;\r\n  animation: indeterminate-loading 1.25s ease-in-out 0.125s infinite;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//           Key frames\r\n// - - - - - - - - - - - - - - - -\r\n@keyframes fade-in {\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n@keyframes rotate {\r\n  100% {\r\n    transform: rotate(1turn);\r\n  }\r\n}\r\n\r\n@keyframes indeterminate-loading {\r\n  50%,\r\n  60% {\r\n    stroke-dasharray: 20, 200;\r\n    stroke-dashoffset: -8px;\r\n  }\r\n  100% {\r\n    stroke-dashoffset: -24px;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Listen,\r\n  Method,\r\n  Prop,\r\n  State,\r\n  h\r\n} from \"@stencil/core\";\r\nimport { Component as ChComponent } from \"../../../common/interfaces\";\r\nimport { EntityItemType, EntityNameToATTs } from \"../data-modeling/data-model\";\r\nimport { KEY_CODES } from \"../../../common/reserverd-names\";\r\n\r\nexport type ErrorText =\r\n  | \"Empty\"\r\n  | \"AlreadyDefined1\"\r\n  | \"AlreadyDefinedEntity1\"\r\n  | \"AlreadyDefined2\";\r\nexport type ErrorType = \"Empty\" | \"AlreadyDefined\" | \"None\";\r\n\r\nexport type DataModelItemLabels = { [key in DataModelItemLabel]: string };\r\n\r\n/**\r\n * | Value        | Details                                                                  |\r\n * | ------------ | ------------------------------------------------------------------------ |\r\n * | `collection` | The caption used when the entity is a collection (`type === \"LEVEL\"`).   |\r\n */\r\nexport type DataModelItemLabel =\r\n  | \"ATT\"\r\n  | \"ENTITY\"\r\n  | \"LEVEL\"\r\n  | \"adding\"\r\n  | \"addNewEntity\"\r\n  | \"addNewField\"\r\n  | \"cancel\"\r\n  | \"collection\"\r\n  | \"confirm\"\r\n  | \"edit\"\r\n  | \"editing\"\r\n  | \"delete\"\r\n  | \"deleting\"\r\n  | \"deleteMode\"\r\n  | \"newEntity\"\r\n  | \"newField\";\r\n\r\nexport type EntityInfo = { name: string; level: ItemInfo[] };\r\nexport type ItemInfo = { name: string; type?: EntityItemType };\r\n\r\ntype ActionMetadata = {\r\n  label: string;\r\n  class: string;\r\n  part: string;\r\n  event: (event: UIEvent) => void;\r\n};\r\n\r\ntype ActionsMetadata = {\r\n  [key in Mode]: ActionMetadata[];\r\n};\r\n\r\ntype ActionsMetadataFunction = (\r\n  captions: DataModelItemLabels,\r\n  disabledPart: string\r\n) => ActionsMetadata;\r\n\r\nexport type Mode = \"add\" | \"delete\" | \"edit\" | \"normal\";\r\ntype WaitingMode = \"adding\" | \"deleting\" | \"editing\" | \"none\";\r\n\r\nconst NAME = \"name\";\r\nconst PART_PREFIX = \"dm-item__\";\r\n\r\nconst CANCEL_CLASS = \"button-cancel\";\r\nconst CONFIRM_CLASS = \"button-confirm\";\r\n\r\nconst BUTTON_CONFIRM_PART = (disabledPart: string) =>\r\n  `${PART_PREFIX}button-action confirm${disabledPart}`;\r\n\r\nconst BUTTON_CANCEL_PART = (disabledPart: string) =>\r\n  `${PART_PREFIX}button-action cancel${disabledPart}`;\r\n\r\nconst SELECT_OPTION_PART = `${PART_PREFIX}select-option`;\r\n\r\n/**\r\n * @slot items - The first level items (entities) of the data model\r\n */\r\n@Component({\r\n  shadow: true,\r\n  styleUrl: \"next-data-modeling-item.scss\",\r\n  tag: \"ch-next-data-modeling-item\"\r\n})\r\nexport class NextDataModelingSubitem implements ChComponent {\r\n  /**\r\n   * The metadata used for the different actions in the UI.\r\n   */\r\n  private actions: ActionsMetadataFunction = (\r\n    captions: DataModelItemLabels,\r\n    disabledPart: string\r\n  ) => ({\r\n    add: [\r\n      {\r\n        // Confirm add\r\n        label: captions.confirm,\r\n        class: CONFIRM_CLASS,\r\n        part: BUTTON_CONFIRM_PART(disabledPart),\r\n        event: this.confirmAction(\"new\")\r\n      },\r\n      {\r\n        // Cancel add\r\n        label: captions.cancel,\r\n        class: CANCEL_CLASS,\r\n        part: BUTTON_CANCEL_PART(disabledPart),\r\n        event: this.toggleShowNewField\r\n      }\r\n    ],\r\n\r\n    delete: [\r\n      {\r\n        // Confirm delete\r\n        label: captions.confirm,\r\n        class: undefined,\r\n        part: `${PART_PREFIX}button-delete-action confirm${disabledPart}`,\r\n        event: this.emitDelete\r\n      },\r\n      {\r\n        // Cancel delete\r\n        label: captions.cancel,\r\n        class: undefined,\r\n        part: `${PART_PREFIX}button-delete-action cancel${disabledPart}`,\r\n        event: this.toggleMode(\"delete\")\r\n      }\r\n    ],\r\n    edit: [\r\n      {\r\n        // Confirm edit\r\n        label: captions.confirm,\r\n        class: CONFIRM_CLASS,\r\n        part: BUTTON_CONFIRM_PART(disabledPart),\r\n        event: this.confirmAction(\"edit\")\r\n      },\r\n      {\r\n        // Cancel edit\r\n        label: captions.cancel,\r\n        class: CANCEL_CLASS,\r\n        part: BUTTON_CANCEL_PART(disabledPart),\r\n        event: this.toggleMode(\"edit\")\r\n      }\r\n    ],\r\n    normal: [\r\n      {\r\n        // Edit action\r\n        label: captions.edit,\r\n        class: \"button-primary button-edit\",\r\n        part: `${PART_PREFIX}button-primary edit${disabledPart}`,\r\n        event: this.toggleMode(\"edit\")\r\n      },\r\n      {\r\n        // Delete action\r\n        label: captions.delete,\r\n        class: \"button-primary button-delete\",\r\n        part: `${PART_PREFIX}button-primary delete${disabledPart}`,\r\n        event: this.toggleMode(\"delete\")\r\n      }\r\n    ]\r\n  });\r\n\r\n  private errorName: string;\r\n  private lastEditInfo: ItemInfo = { name: \"\", type: \"ATT\" };\r\n  private focusInputInNextRender = false;\r\n\r\n  // Refs\r\n  private inputName: HTMLElement;\r\n  private inputType: HTMLSelectElement;\r\n\r\n  @Element() el: HTMLChNextDataModelingItemElement;\r\n\r\n  @State() expanded = false;\r\n\r\n  // Modes\r\n  @State() errorType: ErrorType = \"None\";\r\n  @State() waitingMode: WaitingMode = \"none\";\r\n\r\n  /**\r\n   * This attribute lets you specify if the actions in the `mode === \"add\"` are\r\n   * visible.\r\n   */\r\n  @Prop() readonly actionsVisible: boolean = true;\r\n\r\n  /**\r\n   * The labels used in the buttons of the items. Important for accessibility.\r\n   */\r\n  @Prop() readonly captions: DataModelItemLabels;\r\n\r\n  /**\r\n   * The dataType of the field.\r\n   */\r\n  @Prop() readonly dataType: string = \"\";\r\n\r\n  /**\r\n   * This attribute lets you specify if the element is disabled.\r\n   * If disabled, it will not fire any user interaction related event.\r\n   */\r\n  @Prop() readonly disabled: boolean = false;\r\n\r\n  /**\r\n   * This property maps entities of the current dataModel with their\r\n   * corresponding ATTs.\r\n   */\r\n  @Prop() readonly entityNameToATTs: EntityNameToATTs = {};\r\n\r\n  /**\r\n   * The error texts used for the new field input.\r\n   */\r\n  @Prop() readonly errorTexts: { [key in ErrorText]: string };\r\n\r\n  /**\r\n   * This property specifies the defined field names of the entity parent.\r\n   */\r\n  @Prop() readonly fieldNames: string[] = [];\r\n\r\n  /**\r\n   * This property specifies at which collection level the field is located.\r\n   */\r\n  @Prop() readonly level: 0 | 1 | 2 = 1;\r\n\r\n  /**\r\n   * Determine the maximum amount of ATTs displayed per entity.\r\n   */\r\n  @Prop() readonly maxAtts: number = 3;\r\n\r\n  /**\r\n   * This attribute specifies the operating mode of the control\r\n   */\r\n  @Prop({ mutable: true }) mode: Mode = \"normal\";\r\n\r\n  /**\r\n   * The name of the field.\r\n   */\r\n  @Prop() readonly name: string = \"\";\r\n\r\n  /**\r\n   * This attribute indicates that the user cannot modify the value of the control.\r\n   * Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)\r\n   * attribute for `input` elements.\r\n   */\r\n  @Prop() readonly readonly: boolean = false;\r\n\r\n  /**\r\n   * `true` to show the new field button when `mode === \"add\"`\r\n   */\r\n  @Prop({ mutable: true }) showNewFieldBtn = true;\r\n\r\n  /**\r\n   * The type of the field.\r\n   */\r\n  @Prop() readonly type: EntityItemType = \"LEVEL\";\r\n\r\n  /**\r\n   * Fired when the item is confirmed to be deleted\r\n   */\r\n  @Event() deleteField: EventEmitter;\r\n\r\n  /**\r\n   * Fired when the item is edited\r\n   */\r\n  @Event() editField: EventEmitter<ItemInfo>;\r\n\r\n  /**\r\n   * Fired when a new entity is committed to be added\r\n   */\r\n  @Event() newEntity: EventEmitter<EntityInfo>;\r\n\r\n  /**\r\n   * Fired when a new file is committed to be added when adding a new entity (level === 0)\r\n   */\r\n  @Event() firstNewField: EventEmitter<ItemInfo>;\r\n\r\n  /**\r\n   * Fired when the new field of the new entity tries to commits the adding\r\n   * operation, but fails because it has errors\r\n   */\r\n  @Event() firstNewFieldErrors: EventEmitter;\r\n\r\n  /**\r\n   * Fired when a new file is committed to be added\r\n   */\r\n  @Event() newField: EventEmitter<ItemInfo>;\r\n\r\n  @Listen(\"expandedChange\")\r\n  handleExpandedChange(event: CustomEvent) {\r\n    event.stopPropagation();\r\n  }\r\n\r\n  @Listen(\"firstNewField\")\r\n  handleFirstNewField(event: CustomEvent<ItemInfo>) {\r\n    if (this.level !== 0) {\r\n      return;\r\n    }\r\n    this.confirmAction(\"new\", \"no\", event.detail)(event);\r\n  }\r\n\r\n  @Listen(\"firstNewFieldErrors\")\r\n  handleFirstNewFieldErrors(event: CustomEvent<ItemInfo>) {\r\n    this.confirmAction(\"new\", \"yes\")(event);\r\n  }\r\n\r\n  /**\r\n   * Set the adding mode for the first field of the entity.\r\n   */\r\n  @Method()\r\n  async setAddingMode() {\r\n    this.clearInput();\r\n    this.waitingMode = \"adding\";\r\n  }\r\n\r\n  /**\r\n   * Remove the value of the input when mode === \"add\" | \"edit\"\r\n   */\r\n  @Method()\r\n  async clearInput() {\r\n    if (this.inputName) {\r\n      const inputRef = (this.inputName as HTMLElement).shadowRoot\r\n        .firstElementChild as HTMLInputElement; // TODO: Improve typing\r\n      inputRef.value = \"\";\r\n    }\r\n\r\n    this.errorType = \"None\";\r\n  }\r\n\r\n  /**\r\n   * Check errors in the item when `level !== 0`\r\n   */\r\n  @Method()\r\n  async checkErrors(\r\n    errors: \"yes\" | \"no\" | \"unknown\",\r\n    event: CustomEvent | UIEvent\r\n  ) {\r\n    this.confirmAction(\"new\", errors)(event);\r\n  }\r\n\r\n  /**\r\n   * Deletes the field.\r\n   */\r\n  @Method()\r\n  async delete(event: UIEvent) {\r\n    this.emitDelete(event);\r\n  }\r\n\r\n  /**\r\n   * Hides the waiting mode to continue editing the field.\r\n   */\r\n  @Method()\r\n  async hideWaitingMode() {\r\n    if (this.mode === \"add\" && this.level === 0) {\r\n      const entityItem = this.el.firstElementChild\r\n        .firstElementChild as HTMLChNextDataModelingItemElement;\r\n      entityItem.hideWaitingMode();\r\n    }\r\n    // The add mode should not be changed\r\n    else if (this.mode !== \"add\") {\r\n      this.mode = \"normal\";\r\n    }\r\n    this.waitingMode = \"none\";\r\n  }\r\n\r\n  /**\r\n   * Returns:\r\n   *   @example ```(Scorer, Goals)```\r\n   *   @example ```(Name, Age, Nationality (+3))```\r\n   */\r\n  private makeAttsPrettier = (atts: string[], maxAtts) =>\r\n    atts.length <= maxAtts\r\n      ? \"(\" + atts.join(\", \") + \")\"\r\n      : `(${atts.slice(0, maxAtts).join(\", \")} (+${atts.length - maxAtts}))`;\r\n\r\n  private emitDelete = (event: UIEvent) => {\r\n    // The subitem is the last one of the parent. Delete the parent instead\r\n    if (this.level !== 0 && this.fieldNames.length === 1) {\r\n      const parentItem = this.el.parentElement\r\n        .parentElement as HTMLChNextDataModelingItemElement;\r\n\r\n      parentItem.delete(event);\r\n      this.mode = \"normal\";\r\n      return;\r\n    }\r\n\r\n    event.stopPropagation();\r\n    this.waitingMode = \"deleting\";\r\n    this.deleteField.emit();\r\n  };\r\n\r\n  private toggleMode = (mode: Mode) => (event: CustomEvent | UIEvent) => {\r\n    event.stopPropagation();\r\n    this.mode = this.mode === \"normal\" ? mode : \"normal\";\r\n\r\n    this.focusInputInNextRender = mode === \"edit\";\r\n  };\r\n\r\n  private toggleShowNewField = (event: CustomEvent | UIEvent) => {\r\n    event.stopPropagation();\r\n    this.errorType = \"None\";\r\n    const showNewFieldBtn = !this.showNewFieldBtn;\r\n\r\n    this.showNewFieldBtn = showNewFieldBtn;\r\n    this.focusInputInNextRender = !showNewFieldBtn;\r\n\r\n    if (!showNewFieldBtn && this.level === 0) {\r\n      const entityItem = this.el.firstElementChild\r\n        .firstElementChild as HTMLChNextDataModelingItemElement;\r\n      entityItem.clearInput();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @todo TODO: Improve typing\r\n   * WA function to get the gx-edit's input value\r\n   * @param editElement An HTMLGxEditElement that is implemented in the web-controls-library\r\n   */\r\n  private getGxEditInputValue = (editElement: HTMLElement) =>\r\n    (editElement.shadowRoot.firstElementChild as HTMLInputElement).value;\r\n\r\n  private handleKeyDown =\r\n    (actionType: \"edit\" | \"new\") => (event: KeyboardEvent) => {\r\n      if (event.code !== KEY_CODES.ENTER) {\r\n        return;\r\n      }\r\n      event.preventDefault();\r\n\r\n      this.confirmAction(actionType)(event);\r\n    };\r\n\r\n  private checkChildErrors = (\r\n    errors: \"yes\" | \"no\" | \"unknown\",\r\n    event: CustomEvent | UIEvent\r\n  ) => {\r\n    (\r\n      this.el.firstElementChild\r\n        .firstElementChild as HTMLChNextDataModelingItemElement\r\n    ).checkErrors(errors, event);\r\n  };\r\n\r\n  private validateErrorsWhenAddingEntity = (\r\n    actionType: \"edit\" | \"new\",\r\n    errors: \"yes\" | \"no\" | \"unknown\" = \"unknown\",\r\n    event: CustomEvent | UIEvent\r\n  ) => {\r\n    // Validate child errors when adding a new entity\r\n    if (this.level === 0 && actionType === \"new\" && errors === \"unknown\") {\r\n      this.checkChildErrors(errors, event);\r\n    }\r\n    // Validate parent errors when adding a new field in the new entity\r\n    else if (!this.actionsVisible && errors === \"unknown\") {\r\n      this.firstNewFieldErrors.emit();\r\n    }\r\n  };\r\n\r\n  private confirmAction =\r\n    (\r\n      actionType: \"edit\" | \"new\",\r\n      errors: \"yes\" | \"no\" | \"unknown\" = \"unknown\",\r\n      itemInfo: ItemInfo = null\r\n    ) =>\r\n    (event: CustomEvent | UIEvent) => {\r\n      event.stopPropagation();\r\n      const trimmedInput = this.getGxEditInputValue(this.inputName).trim();\r\n\r\n      // Force re-render. Useful when the error type don't change but the\r\n      // displayed error text must change\r\n      this.errorType = \"None\";\r\n\r\n      if (trimmedInput === \"\") {\r\n        this.errorType = \"Empty\";\r\n\r\n        this.validateErrorsWhenAddingEntity(actionType, errors, event);\r\n        return;\r\n      }\r\n\r\n      // The field already exists\r\n      if (\r\n        this.name !== trimmedInput &&\r\n        this.fieldNames.includes(trimmedInput)\r\n      ) {\r\n        this.errorType = \"AlreadyDefined\";\r\n        this.errorName = trimmedInput;\r\n\r\n        this.validateErrorsWhenAddingEntity(actionType, errors, event);\r\n        return;\r\n      }\r\n\r\n      // New field\r\n      if (actionType === \"new\") {\r\n        this.lastEditInfo = {\r\n          name: trimmedInput,\r\n          type:\r\n            this.level === 0 ? \"ATT\" : (this.inputType.value as EntityItemType) // Doesn't matter the type when level = 0\r\n        };\r\n\r\n        // Adding a entity\r\n        if (this.level === 0) {\r\n          // Must check child errors\r\n          if (errors === \"unknown\") {\r\n            this.checkChildErrors(errors, event);\r\n          }\r\n          // The child does not have errors, commit the new entity\r\n          else if (errors === \"no\") {\r\n            this.waitingMode = \"adding\";\r\n            this.expanded = true;\r\n            this.newEntity.emit({ name: trimmedInput, level: [itemInfo] });\r\n            this.toggleShowNewField(event);\r\n\r\n            (\r\n              this.el.firstElementChild\r\n                .firstElementChild as HTMLChNextDataModelingItemElement\r\n            ).setAddingMode(); // TODO: Improve typing\r\n          }\r\n        }\r\n        // Normal case: Adding a field that is not the first field of the entity\r\n        else if (this.actionsVisible) {\r\n          this.waitingMode = \"adding\";\r\n          this.newField.emit(this.lastEditInfo);\r\n          this.toggleShowNewField(event);\r\n        }\r\n        // Adding a field that is the first field of the entity\r\n        else {\r\n          this.firstNewField.emit(this.lastEditInfo);\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      // Edit field (level 0 fields don't have a type, because they are always entities)\r\n      if (\r\n        this.name !== trimmedInput ||\r\n        (this.level !== 0 && this.type !== this.inputType.value)\r\n      ) {\r\n        this.waitingMode = \"editing\";\r\n\r\n        this.lastEditInfo = {\r\n          name: trimmedInput,\r\n          type:\r\n            this.level === 0 ? \"ATT\" : (this.inputType.value as EntityItemType) // Doesn't matter the type when level = 0\r\n        };\r\n        this.editField.emit(this.lastEditInfo);\r\n      }\r\n\r\n      this.toggleMode(\"edit\")(event);\r\n    };\r\n\r\n  private loading = () => (\r\n    <svg class=\"waiting-mode__loading\" height=\"28\" viewBox=\"6 6 12 12\">\r\n      <circle cx=\"12\" cy=\"12\" r=\"4\" stroke-width=\"1.125\"></circle>\r\n    </svg>\r\n  );\r\n\r\n  private errorText = (errorTexts: { [key in ErrorText]: string }) => (\r\n    <p class=\"error-text\" part={`${PART_PREFIX}error-text`}>\r\n      {this.errorType === \"Empty\"\r\n        ? errorTexts.Empty\r\n        : [\r\n            this.level === 0\r\n              ? errorTexts.AlreadyDefinedEntity1\r\n              : errorTexts.AlreadyDefined1,\r\n            <span part={`${PART_PREFIX}error-text-name`}>\r\n              {this.errorName}\r\n            </span>,\r\n            errorTexts.AlreadyDefined2\r\n          ]}\r\n    </p>\r\n  );\r\n\r\n  private readonlyContent = (\r\n    captions: DataModelItemLabels,\r\n    name: string,\r\n    type: EntityItemType\r\n  ) => [\r\n    // Readonly\r\n    <h1\r\n      id={NAME}\r\n      class={{\r\n        name: true,\r\n        \"name-entity\": type === \"ENTITY\"\r\n      }}\r\n      part={`${PART_PREFIX}name`}\r\n    >\r\n      {name}\r\n    </h1>,\r\n\r\n    this.level !== 0 && type !== \"ATT\" && (\r\n      <span\r\n        class=\"type\"\r\n        part={\r\n          type === \"LEVEL\" ? `${PART_PREFIX}collection` : `${PART_PREFIX}entity`\r\n        }\r\n      >\r\n        {type === \"LEVEL\"\r\n          ? captions.collection\r\n          : this.makeAttsPrettier(\r\n              this.entityNameToATTs[this.dataType] || [],\r\n              this.maxAtts\r\n            )}\r\n      </span>\r\n    )\r\n  ];\r\n\r\n  private editableContent = (\r\n    actionType: \"new\" | \"edit\",\r\n    captions: DataModelItemLabels,\r\n    disabledPart: string,\r\n    errorPart: string\r\n  ) => [\r\n    // Editable\r\n    <gx-edit\r\n      class=\"field-name\"\r\n      part={`${PART_PREFIX}input${errorPart}${disabledPart}`}\r\n      disabled={this.disabled}\r\n      type=\"text\"\r\n      value={this.name}\r\n      ref={el => (this.inputName = el as HTMLElement)}\r\n      onKeydown={this.handleKeyDown(actionType)}\r\n    ></gx-edit>,\r\n\r\n    this.level !== 0 && (\r\n      <div class=\"select-wrapper\">\r\n        <select\r\n          class=\"select\"\r\n          part={`${PART_PREFIX}input${disabledPart} select`}\r\n          disabled={this.disabled}\r\n          ref={el => (this.inputType = el)}\r\n        >\r\n          <option\r\n            part={SELECT_OPTION_PART}\r\n            value={\"ATT\" as EntityItemType}\r\n            selected={this.type === \"ATT\"}\r\n          >\r\n            {captions.ATT}\r\n          </option>\r\n\r\n          <option\r\n            part={SELECT_OPTION_PART}\r\n            value={\"ENTITY\" as EntityItemType}\r\n            selected={this.type === \"ENTITY\"}\r\n          >\r\n            {captions.ENTITY}\r\n          </option>\r\n\r\n          <option\r\n            part={SELECT_OPTION_PART}\r\n            value={\"LEVEL\" as EntityItemType}\r\n            selected={this.type === \"LEVEL\"}\r\n          >\r\n            {captions.LEVEL}\r\n          </option>\r\n        </select>\r\n      </div>\r\n    ),\r\n\r\n    this.errorType !== \"None\" && this.errorText(this.errorTexts)\r\n  ];\r\n\r\n  private newFieldMode = (\r\n    captions: DataModelItemLabels,\r\n    errorPart: string,\r\n    disabledPart: string,\r\n    actions: ActionMetadata[]\r\n  ) =>\r\n    this.showNewFieldBtn ? (\r\n      <button\r\n        class=\"button-new-entity\"\r\n        part={`${PART_PREFIX}button-new-entity${disabledPart}`}\r\n        disabled={this.disabled}\r\n        type=\"button\"\r\n        onClick={this.toggleShowNewField}\r\n      >\r\n        {this.level === 0 ? captions.addNewEntity : captions.addNewField}\r\n      </button>\r\n    ) : (\r\n      <div\r\n        slot={this.level === 0 ? \"header\" : undefined}\r\n        class={{\r\n          [`add-new-field--level-${this.level}`]: true,\r\n          \"add-new-field--no-actions\": !this.actionsVisible\r\n        }}\r\n        part={`${PART_PREFIX}header-content`}\r\n        tabindex={this.level !== 0 && this.actionsVisible ? \"0\" : undefined}\r\n      >\r\n        {this.level === 2 && (\r\n          <div\r\n            aria-hidden=\"true\"\r\n            class=\"sub-field\"\r\n            part={`${PART_PREFIX}sub-field`}\r\n          ></div>\r\n        )}\r\n\r\n        <h1 class=\"name\" part={`${PART_PREFIX}name`}>\r\n          {this.level === 0 ? captions.newEntity : captions.newField}\r\n        </h1>\r\n\r\n        {this.editableContent(\"new\", captions, disabledPart, errorPart)}\r\n\r\n        {this.level === 0 && <slot />}\r\n\r\n        {this.actionsVisible && [\r\n          <button\r\n            aria-label={actions[0].label}\r\n            class={actions[0].class}\r\n            part={actions[0].part}\r\n            disabled={this.disabled}\r\n            type=\"button\"\r\n            onClick={actions[0].event}\r\n          ></button>,\r\n\r\n          <button\r\n            aria-label={actions[1].label}\r\n            class={actions[1].class}\r\n            part={actions[1].part}\r\n            disabled={this.disabled}\r\n            type=\"button\"\r\n            onClick={actions[1].event}\r\n          ></button>\r\n        ]}\r\n      </div>\r\n    );\r\n\r\n  private normalMode = (\r\n    captions: DataModelItemLabels,\r\n    errorPart: string,\r\n    disabledPart: string,\r\n    waitingModePart: string,\r\n    actions: ActionMetadata[],\r\n    showWaitingModeTexts: boolean\r\n  ) => [\r\n    <div\r\n      slot={this.level === 0 ? \"header\" : undefined}\r\n      class={{\r\n        header: true,\r\n        \"edit-mode\": this.mode === \"edit\"\r\n      }}\r\n      part={`${PART_PREFIX}header-content ${\r\n        this.level !== 0 ? this.type.toLowerCase() : \"\"\r\n      }`}\r\n      tabindex={this.level !== 0 ? \"0\" : undefined}\r\n    >\r\n      {this.level === 2 && (\r\n        <div\r\n          aria-hidden=\"true\"\r\n          class=\"sub-field\"\r\n          part={`${PART_PREFIX}sub-field`}\r\n        ></div>\r\n      )}\r\n\r\n      {this.mode === \"edit\"\r\n        ? this.editableContent(\"edit\", captions, disabledPart, errorPart)\r\n        : this.readonlyContent(\r\n            captions,\r\n            showWaitingModeTexts ? this.lastEditInfo.name : this.name,\r\n            showWaitingModeTexts ? this.lastEditInfo.type : this.type\r\n          )}\r\n\r\n      {!this.readonly && this.actionsVisible && (\r\n        <div\r\n          class={{\r\n            \"delete-mode\": this.mode === \"delete\",\r\n            optimization: this.mode !== \"delete\",\r\n            \"waiting-mode\": this.waitingMode !== \"none\"\r\n          }}\r\n          part={`${PART_PREFIX}delete-mode${waitingModePart}`}\r\n        >\r\n          {this.waitingMode === \"none\"\r\n            ? [\r\n                this.mode === \"delete\" && captions.deleteMode, // Delete Mode\r\n\r\n                <button\r\n                  aria-label={actions[0].label}\r\n                  class={actions[0].class}\r\n                  part={actions[0].part}\r\n                  disabled={this.disabled}\r\n                  type=\"button\"\r\n                  onClick={actions[0].event}\r\n                ></button>,\r\n\r\n                <button\r\n                  aria-label={actions[1].label}\r\n                  class={actions[1].class}\r\n                  part={actions[1].part}\r\n                  disabled={this.disabled}\r\n                  type=\"button\"\r\n                  onClick={actions[1].event}\r\n                ></button>\r\n              ]\r\n            : [captions[this.waitingMode], this.loading()]}\r\n        </div>\r\n      )}\r\n    </div>,\r\n\r\n    this.type === \"LEVEL\" &&\r\n      (this.level === 0 ? (\r\n        <div slot=\"content\" part={`${PART_PREFIX}content`}>\r\n          <slot />\r\n        </div>\r\n      ) : (\r\n        <slot />\r\n      ))\r\n  ];\r\n\r\n  componentDidUpdate() {\r\n    // Focus the edit input when the render method has finished\r\n    if (this.focusInputInNextRender && this.inputName) {\r\n      this.focusInputInNextRender = false;\r\n\r\n      // Wait until the gx-edit control has render\r\n      requestAnimationFrame(() => {\r\n        this.inputName.click(); // The click method focuses the inner input of the gx-edit\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // Parts\r\n    const disabledPart = this.disabled ? \" disabled\" : \"\";\r\n    const waitingModePart =\r\n      this.waitingMode === \"none\" ? \"\" : ` ${PART_PREFIX}waiting-mode`;\r\n    const errorPart = this.errorType !== \"None\" ? \" error\" : \"\";\r\n\r\n    const captions = this.captions;\r\n    const actions = this.actions(captions, disabledPart)[this.mode];\r\n\r\n    const showWaitingModeTexts =\r\n      this.waitingMode === \"editing\" || this.waitingMode === \"adding\";\r\n\r\n    return (\r\n      <Host\r\n        role=\"listitem\"\r\n        aria-labelledby={NAME}\r\n        class={{\r\n          \"gx-disabled\": this.disabled\r\n        }}\r\n      >\r\n        {\r\n          // Add new field layout (last cell of the collection/entity)\r\n          // eslint-disable-next-line no-nested-ternary\r\n          this.mode === \"add\" && this.waitingMode !== \"adding\" ? (\r\n            this.newFieldMode(captions, errorPart, disabledPart, actions)\r\n          ) : this.level === 0 ? ( // Normal mode. Level === 0\r\n            <ch-accordion\r\n              class=\"accordion\"\r\n              part={`${PART_PREFIX}accordion`}\r\n              accessibleName={this.name}\r\n              expanded={this.expanded}\r\n              exportparts={`accordion__chevron:${PART_PREFIX}chevron,accordion__expandable:${PART_PREFIX}expandable,accordion__header:${PART_PREFIX}header`}\r\n            >\r\n              {this.normalMode(\r\n                captions,\r\n                errorPart,\r\n                disabledPart,\r\n                waitingModePart,\r\n                actions,\r\n                showWaitingModeTexts\r\n              )}\r\n            </ch-accordion>\r\n          ) : (\r\n            // Normal mode. Level !== 0\r\n            this.normalMode(\r\n              captions,\r\n              errorPart,\r\n              disabledPart,\r\n              waitingModePart,\r\n              actions,\r\n              showWaitingModeTexts\r\n            )\r\n          )\r\n        }\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}