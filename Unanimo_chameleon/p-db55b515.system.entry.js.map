{"version":3,"names":["chSuggestCss","ChSuggestStyle0","ARROW_DOWN","ARROW_UP","ChSuggest","exports","this","keyEventsDictionary","ArrowDown","e","newFocusedItem","_this","getNewFocusedItem","currentFocusedItem","nextFocusedItem","focus","scrollListToBottom","ArrowUp","scrollListToTop","evaluateSlotIsEmpty","chWindow","hidden","el","firstElementChild","setFocusOnFirstItem","firstItem","querySelector","getChSuggestListItems","Array","from","querySelectorAll","direction","getListChild","list","listItems","listChild","length","parentListItems","nextElementSibling","previousElementSibling","nodeName","parent","parentElement","sibling","parentIsList","parentList","handleInput","inputValue","target","value","timeoutReference","clearTimeout","setTimeout","processInputEvent","debounce","handleKeyDown","key","preventDefault","evaluateWindowMaxHeight","viewportHeight","window","innerHeight","documentHeight","document","body","scrollHeight","height","inputBottomPosition","textInput","getBoundingClientRect","bottom","scrollY","windowMaxHeight","style","setProperty","partWindow","shadowRoot","scrollTop","valueChanged","emit","closeWindow","onFocusHandler","cursorEnd","setSelectionRange","class_1","prototype","itemSelectedHandler","event","stopPropagation","detail","selectionChanged","focusChangeAttemptHandler","keyEventHandler","code","currentFocusedItem_1","chSuggestListItemsArray","currentFocusedItemIndex","findIndex","item","newItemToSetFocusOn","windowClosedHandler","windowHidden","slot","innerHTML","selectInputText","select","render","h","Host","class","part","showLabel","label","id","htmlFor","type","ref","onInput","onKeyDown","onFocus","autocomplete","undefined","toString","container","xAlign","yAlign","showHeader","caption","suggestTitle","exportparts","onSlotchange","chSuggestListCss","ChSuggestListStyle0","ChSuggestList","class_2","chSuggestListItemCss","ChSuggestListItemStyle0","ChSuggestListItem","getItemIndexes","chSuggest","itemIndex","suggestListItemsArray","index","listIndex","chSuggestList_1","chSuggestListsArray","listItemsArray","handleClick","indexes","itemSelected","innerText","description","icon","iconSrc","focusChangeAttempt","class_3","role","onClick","name"],"sources":["src/components/suggest/ch-suggest.scss?tag=ch-suggest&encapsulation=shadow","src/components/suggest/ch-suggest.tsx","src/components/suggest/suggest-list/ch-suggest-list.scss?tag=ch-suggest-list&encapsulation=shadow","src/components/suggest/suggest-list/ch-suggest-list.tsx","src/components/suggest/suggest-list-item/ch-suggest-list-item.scss?tag=ch-suggest-list-item&encapsulation=shadow","src/components/suggest/suggest-list-item/ch-suggest-list-item.tsx"],"sourcesContent":["@import \"../../common/_base\";\r\n\r\n@include box-sizing();\r\n\r\n:host {\r\n  --window-max-height: none;\r\n  --window-gap: 50px;\r\n}\r\n.main-wrapper {\r\n  display: block;\r\n}\r\n/*label*/\r\n.label-input-wrapper {\r\n  display: flex;\r\n  .input {\r\n    flex: 1;\r\n  }\r\n}\r\n:host([label-position=\"start\"]) {\r\n  .label-input-wrapper {\r\n    flex-direction: row;\r\n  }\r\n}\r\n:host([label-position=\"above\"]) {\r\n  .label-input-wrapper {\r\n    flex-direction: column;\r\n  }\r\n}\r\n/*input*/\r\n.input {\r\n  background-color: unset;\r\n  border: none;\r\n  color: inherit;\r\n  font: inherit;\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: 0;\r\n}\r\n/*window*/\r\n.ch-window-container {\r\n  position: relative;\r\n}\r\nch-window::part(window) {\r\n  width: 100%;\r\n  max-height: calc(var(--window-max-height) - var(--window-gap));\r\n  overflow-y: auto;\r\n}\r\n","/* STENCIL IMPORTS */\r\nimport {\r\n  Component,\r\n  Host,\r\n  h,\r\n  Prop,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Listen,\r\n  State,\r\n  Method\r\n} from \"@stencil/core\";\r\n/* OTHER LIBRARIES IMPORTS */\r\n/* CUSTOM IMPORTS */\r\nimport {\r\n  SuggestItemSelectedEvent,\r\n  SuggestItemData,\r\n  FocusChangeAttempt\r\n} from \"./suggest-list-item/ch-suggest-list-item\";\r\nimport { SuggestListData } from \"./suggest-list/ch-suggest-list\";\r\nimport { LabelPosition } from \"../../common/types\";\r\n\r\nconst ARROW_DOWN = \"ArrowDown\";\r\nconst ARROW_UP = \"ArrowUp\";\r\n@Component({\r\n  tag: \"ch-suggest\",\r\n  styleUrl: \"ch-suggest.scss\",\r\n  shadow: { delegatesFocus: true }\r\n})\r\nexport class ChSuggest {\r\n  /*\r\nINDEX:\r\n1.OWN PROPERTIES\r\n2.REFERENCE TO ELEMENTS\r\n3.STATE() VARIABLES\r\n4.PUBLIC PROPERTY API / WATCH'S\r\n5.EVENTS (EMIT)\r\n6.COMPONENT LIFECYCLE EVENTS\r\n7.LISTENERS\r\n8.PUBLIC METHODS API\r\n9.LOCAL METHODS\r\n10.RENDER() FUNCTION\r\n*/\r\n\r\n  // 1.OWN PROPERTIES //\r\n  private timeoutReference;\r\n\r\n  private keyEventsDictionary: {\r\n    [key in ChSuggestKeyDownEvents]: (\r\n      eventData?: FocusChangeAttemptEventData\r\n    ) => void;\r\n  } = {\r\n    ArrowDown: (e: FocusChangeAttemptEventData) => {\r\n      const newFocusedItem = this.getNewFocusedItem(\r\n        e.currentFocusedItem,\r\n        ARROW_DOWN\r\n      );\r\n      const nextFocusedItem = this.getNewFocusedItem(\r\n        newFocusedItem,\r\n        ARROW_DOWN\r\n      );\r\n      newFocusedItem && newFocusedItem.focus();\r\n      if (!nextFocusedItem) {\r\n        /* This is the last item. Adjust window scroll to be at the very bottom*/\r\n        this.scrollListToBottom();\r\n      }\r\n    },\r\n    ArrowUp: (e: FocusChangeAttemptEventData) => {\r\n      const newFocusedItem = this.getNewFocusedItem(\r\n        e.currentFocusedItem,\r\n        ARROW_UP\r\n      );\r\n      const nextFocusedItem = this.getNewFocusedItem(newFocusedItem, ARROW_UP);\r\n      newFocusedItem && newFocusedItem.focus();\r\n      if (!nextFocusedItem) {\r\n        /* This is the first item. Adjust window scroll to be at the very top*/\r\n        this.scrollListToTop();\r\n      }\r\n    }\r\n  };\r\n\r\n  // 2. REFERENCE TO ELEMENTS //\r\n\r\n  private textInput!: HTMLInputElement;\r\n  private chWindow!: HTMLChWindowElement;\r\n  private slot!: HTMLSlotElement;\r\n  @Element() el: HTMLChSuggestElement;\r\n\r\n  // 3.STATE() VARIABLES //\r\n  @State() windowHidden = true;\r\n\r\n  // 4.PUBLIC PROPERTY API / WATCH'S //\r\n\r\n  /**\r\n   * The debounce amount in milliseconds (This is the time the suggest waits after the user has finished typing, to show the suggestions).\r\n   */\r\n  @Prop() readonly debounce: number = 300;\r\n\r\n  /**\r\n   * The label\r\n   */\r\n  @Prop() readonly label: string;\r\n\r\n  /**\r\n   * The label position\r\n   */\r\n  @Prop({ reflect: true }) readonly labelPosition: LabelPosition = \"start\";\r\n\r\n  /**\r\n   * Whether or not to display the label\r\n   */\r\n  @Prop() readonly showLabel: boolean = true;\r\n\r\n  /**\r\n   * This is the suggest value.\r\n   */\r\n  @Prop({ mutable: true }) value: string;\r\n\r\n  /**\r\n   * Wether or not the suggest has a header. The header will show the \"suggestTitle\" if provided, and a close button.\r\n   */\r\n  @Prop() readonly showHeader = false;\r\n\r\n  /**\r\n   * The suggest title (optional). This is not the same as the \"label\", rather, this is the title that will appear inside the dropdown. This title will only be visible if \"showHeader\" is set to true.\r\n   */\r\n  @Prop() readonly suggestTitle: string;\r\n\r\n  /**\r\n   * If true, it will position the cursor at the end when the input is focused.\r\n   */\r\n  @Prop() readonly cursorEnd = false;\r\n\r\n  // 5.EVENTS (EMIT) //\r\n\r\n  /**\r\n   * This event is emitted every time there input events fires, and it emits the actual input value.\r\n   */\r\n  @Event() valueChanged: EventEmitter<string>;\r\n\r\n  /**\r\n   * This event is emitted when an item was selected.\r\n   */\r\n  @Event() selectionChanged: EventEmitter<SuggestItemSelectedEvent>;\r\n\r\n  // 6.COMPONENT LIFECYCLE EVENTS //\r\n\r\n  // 7.LISTENERS //\r\n\r\n  @Listen(\"itemSelected\", { capture: true })\r\n  itemSelectedHandler(event: CustomEvent<SuggestItemSelectedEvent>) {\r\n    event.stopPropagation();\r\n    this.value = event.detail.value;\r\n    this.closeWindow();\r\n    this.selectionChanged.emit(event.detail);\r\n  }\r\n\r\n  @Listen(\"focusChangeAttempt\")\r\n  focusChangeAttemptHandler(event: CustomEvent<FocusChangeAttempt>) {\r\n    const keyEventHandler:\r\n      | ((event?: FocusChangeAttemptEventData) => void)\r\n      | undefined = this.keyEventsDictionary[event.detail.code];\r\n\r\n    if (keyEventHandler) {\r\n      const currentFocusedItem = event.detail.el;\r\n      const chSuggestListItemsArray = this.getChSuggestListItems();\r\n      const currentFocusedItemIndex = chSuggestListItemsArray.findIndex(\r\n        item => {\r\n          return item === currentFocusedItem;\r\n        }\r\n      );\r\n      const newItemToSetFocusOn = null;\r\n\r\n      keyEventHandler({\r\n        event: event.detail,\r\n        currentFocusedItem: currentFocusedItem,\r\n        chSuggestListItemsArray: chSuggestListItemsArray,\r\n        currentFocusedItemIndex: currentFocusedItemIndex,\r\n        newItemToSetFocusOn: newItemToSetFocusOn\r\n      });\r\n    }\r\n  }\r\n\r\n  @Listen(\"windowClosed\")\r\n  windowClosedHandler() {\r\n    this.textInput.focus();\r\n    this.windowHidden = true;\r\n    this.slot.innerHTML = \"\";\r\n  }\r\n\r\n  // 9.PUBLIC METHODS API //\r\n\r\n  /**\r\n   * @description It selects/highlights the input text.\r\n   */\r\n  @Method()\r\n  async selectInputText() {\r\n    this.textInput.focus();\r\n    this.textInput.select();\r\n  }\r\n\r\n  // 10.LOCAL METHODS //\r\n\r\n  private evaluateSlotIsEmpty = () => {\r\n    this.chWindow.hidden = !this.el.firstElementChild;\r\n  };\r\n\r\n  private setFocusOnFirstItem = () => {\r\n    const firstItem = this.el.querySelector(\"ch-suggest-list-item\");\r\n    firstItem && firstItem.focus();\r\n  };\r\n\r\n  private getChSuggestListItems = (): HTMLChSuggestListItemElement[] =>\r\n    Array.from(this.el.querySelectorAll(\"ch-suggest-list-item\"));\r\n\r\n  private getNewFocusedItem = (\r\n    currentFocusedItem: HTMLChSuggestListItemElement,\r\n    direction: typeof ARROW_DOWN | typeof ARROW_UP\r\n  ): HTMLChSuggestListItemElement => {\r\n    /* Helper function that returns the list item that should get focus (the first one, or the last one)*/\r\n    const getListChild = (list: HTMLChSuggestListElement) => {\r\n      const listItems = list.querySelectorAll(\"ch-suggest-list-item\");\r\n      let listChild = listItems && listItems[listItems.length - 1];\r\n      if (direction === ARROW_DOWN) {\r\n        listChild = list.querySelector(\"ch-suggest-list-item\");\r\n      } else {\r\n        const parentListItems = list.querySelectorAll(\"ch-suggest-list-item\");\r\n        listChild =\r\n          parentListItems && parentListItems[parentListItems.length - 1];\r\n      }\r\n      return listChild;\r\n    };\r\n\r\n    if (!currentFocusedItem) {\r\n      // @ts-expect-error: TODO: Fix this error\r\n      return;\r\n    }\r\n    let newFocusedItem =\r\n      direction === ARROW_DOWN\r\n        ? currentFocusedItem.nextElementSibling\r\n        : currentFocusedItem.previousElementSibling;\r\n    if (newFocusedItem?.nodeName === \"CH-SUGGEST-LIST\") {\r\n      newFocusedItem = getListChild(newFocusedItem as HTMLChSuggestListElement);\r\n    } else if (!newFocusedItem) {\r\n      /* this could be the last item of a list, but not the last item*/\r\n      const parent = currentFocusedItem.parentElement;\r\n      const sibling =\r\n        direction === ARROW_DOWN\r\n          ? parent.nextElementSibling\r\n          : parent.previousElementSibling;\r\n      const parentIsList = parent.nodeName === \"CH-SUGGEST-LIST\";\r\n      if (\r\n        parentIsList &&\r\n        sibling &&\r\n        sibling.nodeName === \"CH-SUGGEST-LIST-ITEM\"\r\n      ) {\r\n        newFocusedItem =\r\n          direction === ARROW_DOWN\r\n            ? parent.nextElementSibling\r\n            : parent.previousElementSibling;\r\n      } else if (\r\n        parentIsList &&\r\n        sibling &&\r\n        sibling.nodeName === \"CH-SUGGEST-LIST\"\r\n      ) {\r\n        const parentList =\r\n          direction === ARROW_DOWN\r\n            ? parent.nextElementSibling\r\n            : parent.previousElementSibling;\r\n        let listChild;\r\n        if (direction === ARROW_DOWN) {\r\n          listChild = parentList.querySelector(\"ch-suggest-list-item\");\r\n        } else {\r\n          listChild = getListChild(parentList as HTMLChSuggestListElement);\r\n        }\r\n        newFocusedItem = listChild ? listChild : null;\r\n      }\r\n    }\r\n    return newFocusedItem as HTMLChSuggestListItemElement;\r\n  };\r\n\r\n  /**\r\n   * Every time the input event is triggered, the value of the input is sent to processInputEvent, which is responsible for displaying a window with the suggested options. this.debounce is a delay that, along with clearTimeout, ensures that the window is only shown after the user has stopped typing.\r\n   */\r\n  private handleInput = (e: InputEvent) => {\r\n    const inputValue = (e.target as HTMLInputElement).value;\r\n    this.value = inputValue;\r\n    if (this.timeoutReference) {\r\n      clearTimeout(this.timeoutReference);\r\n    }\r\n    this.timeoutReference = setTimeout(() => {\r\n      this.processInputEvent(inputValue);\r\n    }, this.debounce);\r\n  };\r\n\r\n  private handleKeyDown = (e: KeyboardEvent) => {\r\n    if (e.key === ARROW_DOWN) {\r\n      e.preventDefault();\r\n      this.setFocusOnFirstItem();\r\n    }\r\n  };\r\n\r\n  private evaluateWindowMaxHeight = () => {\r\n    const viewportHeight = window.innerHeight;\r\n    const documentHeight = document.body.scrollHeight;\r\n    const height =\r\n      documentHeight >= viewportHeight ? documentHeight : viewportHeight;\r\n    const inputBottomPosition =\r\n      this.textInput.getBoundingClientRect().bottom + window.scrollY;\r\n    const windowMaxHeight = height - inputBottomPosition + \"px\";\r\n    this.el.style.setProperty(\"--window-max-height\", windowMaxHeight);\r\n  };\r\n\r\n  private scrollListToTop = () => {\r\n    const partWindow =\r\n      this.chWindow.shadowRoot.querySelector(\"[part='window']\");\r\n    partWindow.scrollTop = 0;\r\n  };\r\n\r\n  private scrollListToBottom = () => {\r\n    const partWindow =\r\n      this.chWindow.shadowRoot.querySelector(\"[part='window']\");\r\n    partWindow.scrollTop = partWindow.scrollHeight;\r\n  };\r\n\r\n  private processInputEvent = (inputValue: string) => {\r\n    this.valueChanged.emit(inputValue);\r\n    this.evaluateWindowMaxHeight();\r\n  };\r\n\r\n  private closeWindow = () => {\r\n    this.chWindow.hidden = true;\r\n  };\r\n\r\n  private onFocusHandler = () => {\r\n    if (this.cursorEnd) {\r\n      this.textInput.setSelectionRange(\r\n        this.textInput.value.length,\r\n        this.textInput.value.length\r\n      );\r\n    }\r\n  };\r\n\r\n  // 10.RENDER() FUNCTION //\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <div class=\"main-wrapper\" part=\"main-wrapper\">\r\n          <div class=\"label-input-wrapper\" part=\"label-input-wrapper\">\r\n            {this.showLabel && this.label && (\r\n              <label id=\"label\" htmlFor=\"input\" part=\"label\">\r\n                {this.label}\r\n              </label>\r\n            )}\r\n            <input\r\n              type=\"text\"\r\n              id=\"input\"\r\n              part=\"input\"\r\n              class=\"input\"\r\n              ref={el => (this.textInput = el as HTMLInputElement)}\r\n              onInput={this.handleInput}\r\n              onKeyDown={this.handleKeyDown}\r\n              onFocus={this.onFocusHandler}\r\n              value={this.value}\r\n              autocomplete=\"off\"\r\n              aria-controls=\"ch-window\"\r\n              aria-label={\r\n                !this.showLabel && this.label ? this.label : undefined\r\n              }\r\n              aria-labelledby={\r\n                this.showLabel && this.label ? \"label\" : undefined\r\n              }\r\n              aria-expanded={this.windowHidden.toString()}\r\n            ></input>\r\n          </div>\r\n\r\n          <ch-window\r\n            id=\"ch-window\"\r\n            container={this.textInput}\r\n            close-on-outside-click\r\n            close-on-escape\r\n            xAlign=\"inside-start\"\r\n            yAlign=\"outside-end\"\r\n            ref={el => (this.chWindow = el as HTMLChWindowElement)}\r\n            showHeader={this.showHeader}\r\n            caption={this.suggestTitle}\r\n            exportparts=\"\r\n            header:header, \r\n            caption:title, \r\n            close:close-button,\r\n            window:dropdown\"\r\n          >\r\n            <slot\r\n              onSlotchange={this.evaluateSlotIsEmpty}\r\n              ref={el => (this.slot = el as HTMLSlotElement)}\r\n            ></slot>\r\n          </ch-window>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n\r\nexport type ChSuggestKeyDownEvents = typeof ARROW_DOWN | typeof ARROW_UP;\r\ntype FocusChangeAttemptEventData = {\r\n  event: FocusChangeAttempt;\r\n  currentFocusedItem: HTMLChSuggestListItemElement;\r\n  chSuggestListItemsArray: HTMLChSuggestListItemElement[];\r\n  currentFocusedItemIndex: number;\r\n  newItemToSetFocusOn: HTMLElement | null;\r\n};\r\n\r\nexport type SuggestData = {\r\n  suggestItems: SuggestItemData[];\r\n  suggestLists: SuggestListData[];\r\n};\r\n","@import \"../../../common/_base\";\r\n\r\n@include box-sizing();\r\n\r\n:host {\r\n  display: block;\r\n}\r\n.title {\r\n  margin: 0;\r\n  font: inherit;\r\n}\r\n.list {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n","import { Component, Host, h, Prop } from \"@stencil/core\";\r\nimport { SuggestItemData } from \"../suggest-list-item/ch-suggest-list-item\";\r\n\r\n@Component({\r\n  tag: \"ch-suggest-list\",\r\n  styleUrl: \"ch-suggest-list.scss\",\r\n  shadow: true\r\n})\r\nexport class ChSuggestList {\r\n  /*\r\nINDEX:\r\n1.OWN PROPERTIES\r\n2.REFERENCE TO ELEMENTS\r\n3.STATE() VARIABLES\r\n4.PUBLIC PROPERTY API / WATCH'S\r\n5.EVENTS (EMIT)\r\n6.COMPONENT LIFECYCLE EVENTS\r\n7.LISTENERS\r\n8.PUBLIC METHODS API\r\n9.LOCAL METHODS\r\n10.RENDER() FUNCTION\r\n*/\r\n\r\n  // 1.OWN PROPERTIES //\r\n\r\n  /**\r\n   * The label\r\n   */\r\n  @Prop() readonly label: string;\r\n\r\n  // 2.REFERENCE TO ELEMENTS //\r\n\r\n  // 3.STATE() VARIABLES //\r\n\r\n  // 4.PUBLIC PROPERTY API / WATCH'S //\r\n\r\n  // 5.EVENTS (EMIT) //\r\n\r\n  // 6.COMPONENT LIFECYCLE EVENTS //\r\n\r\n  // 7.LISTENERS //\r\n\r\n  // 8.PUBLIC METHODS API //\r\n\r\n  // 9.LOCAL METHODS //\r\n\r\n  // 10.RENDER() FUNCTION //\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        {this.label && (\r\n          <h2 id=\"heading\" part=\"title\" class=\"title\">\r\n            {this.label}\r\n          </h2>\r\n        )}\r\n        <ul\r\n          aria-labelledby={this.label ? \"heading\" : undefined}\r\n          part=\"list\"\r\n          class=\"list\"\r\n        >\r\n          <slot></slot>\r\n        </ul>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n\r\nexport type SuggestListData = {\r\n  label: string;\r\n  items: SuggestItemData[];\r\n};\r\n","@import \"../../../common/_base\";\r\n\r\n:host {\r\n  display: block;\r\n}\r\n:where(button) {\r\n  all: unset;\r\n  display: flex;\r\n  width: 100%;\r\n  cursor: pointer;\r\n}\r\n\r\n@include box-sizing();\r\n","/* STENCIL IMPORTS */\r\nimport {\r\n  Component,\r\n  Host,\r\n  h,\r\n  Prop,\r\n  Event,\r\n  EventEmitter,\r\n  Element\r\n} from \"@stencil/core\";\r\n/* OTHER LIBRARIES IMPORTS */\r\n/* CUSTOM IMPORTS */\r\nimport { ChSuggestKeyDownEvents } from \"../ch-suggest\";\r\n\r\nconst ARROW_DOWN = \"ArrowDown\";\r\nconst ARROW_UP = \"ArrowUp\";\r\n@Component({\r\n  tag: \"ch-suggest-list-item\",\r\n  styleUrl: \"ch-suggest-list-item.scss\",\r\n  shadow: { delegatesFocus: true }\r\n})\r\nexport class ChSuggestListItem {\r\n  /*\r\nINDEX:\r\n1.OWN PROPERTIES\r\n2.REFERENCE TO ELEMENTS\r\n3.STATE() VARIABLES\r\n4.PUBLIC PROPERTY API / WATCH'S\r\n5.EVENTS (EMIT)\r\n6.COMPONENT LIFECYCLE EVENTS\r\n7.LISTENERS\r\n8.PUBLIC METHODS API\r\n9.LOCAL METHODS\r\n10.RENDER() FUNCTION\r\n*/\r\n\r\n  // 1.OWN PROPERTIES //\r\n\r\n  /**\r\n   * The icon url\r\n   */\r\n  @Prop() readonly iconSrc: string;\r\n\r\n  /**\r\n   * The item value\r\n   */\r\n  @Prop() readonly value;\r\n\r\n  // 2.REFERENCE TO ELEMENTS //\r\n\r\n  @Element() el: HTMLChSuggestListItemElement;\r\n\r\n  // 3.STATE() VARIABLES //\r\n\r\n  // 4.PUBLIC PROPERTY API / WATCH'S //\r\n\r\n  // 5.EVENTS (EMIT) //\r\n\r\n  /**\r\n   * This event is emitted every time the item is selected, either by clicking on it, or by pressing Enter.\r\n   */\r\n  @Event() itemSelected: EventEmitter<SuggestItemSelectedEvent>;\r\n\r\n  /**\r\n   * This event is emitted every time the item is about to lose focus, by pressing the \"ArrowUp\" or \"ArrowDown\" keyboard keys.\r\n   */\r\n  @Event() focusChangeAttempt: EventEmitter<FocusChangeAttempt>;\r\n\r\n  // 6.COMPONENT LIFECYCLE EVENTS //\r\n\r\n  // 7.LISTENERS //\r\n\r\n  // 8.PUBLIC METHODS API //\r\n\r\n  // 9.LOCAL METHODS //\r\n\r\n  // @ts-expect-error: TODO: Check if the notation in this function is correct\r\n  private getItemIndexes = (): SuggestItemIndexes => {\r\n    const parentElement = this.el.parentElement;\r\n    if (parentElement.nodeName === \"CH-SUGGEST\") {\r\n      const chSuggest = parentElement;\r\n      let itemIndex = -1;\r\n      const suggestListItemsArray = Array.from(\r\n        chSuggest.querySelectorAll(\":scope > ch-suggest-list-item\")\r\n      );\r\n      for (let index = 0; index < suggestListItemsArray.length; index++) {\r\n        // Then get the item index\r\n        if (suggestListItemsArray[index] === this.el) {\r\n          itemIndex = index;\r\n          break;\r\n        }\r\n      }\r\n      return {\r\n        itemIndex: itemIndex,\r\n        listIndex: undefined // the items does not belongs to a list\r\n      };\r\n    }\r\n    if (parentElement.nodeName === \"CH-SUGGEST-LIST\") {\r\n      const chSuggestList = parentElement;\r\n      const chSuggestListsArray = Array.from(\r\n        chSuggestList.parentElement.querySelectorAll(\":scope > ch-suggest-list\")\r\n      );\r\n      const listIndex = chSuggestListsArray.findIndex(list => {\r\n        return list === chSuggestList;\r\n      });\r\n      if (listIndex !== -1) {\r\n        const listItemsArray = Array.from(\r\n          chSuggestList.querySelectorAll(\"ch-suggest-list-item\")\r\n        );\r\n        const itemIndex = listItemsArray.findIndex(item => {\r\n          return item === this.el;\r\n        });\r\n        return {\r\n          itemIndex: itemIndex,\r\n          listIndex: listIndex\r\n        };\r\n      }\r\n    }\r\n  };\r\n\r\n  private handleClick = () => {\r\n    const indexes: SuggestItemIndexes = this.getItemIndexes();\r\n    this.itemSelected.emit({\r\n      value: this.value || this.el.innerText,\r\n      description: this.el.innerText,\r\n      icon: this.iconSrc,\r\n      indexes: indexes\r\n    });\r\n  };\r\n\r\n  private handleKeyDown = (e: KeyboardEvent) => {\r\n    if (e.code === ARROW_UP || e.code === ARROW_DOWN) {\r\n      e.preventDefault();\r\n      this.focusChangeAttempt.emit({\r\n        el: this.el,\r\n        code: e.code\r\n      });\r\n    }\r\n  };\r\n\r\n  // 10.RENDER() FUNCTION //\r\n\r\n  render() {\r\n    return (\r\n      <Host role=\"listitem\" onKeyDown={this.handleKeyDown}>\r\n        <button part=\"button\" onClick={this.handleClick}>\r\n          <slot name=\"icon\"></slot>\r\n          <div class=\"content-wrapper\" part=\"content-wrapper\">\r\n            <slot></slot>\r\n          </div>\r\n        </button>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n\r\nexport type SuggestItemData = {\r\n  value: any;\r\n  description?: string;\r\n  icon?: string;\r\n};\r\n\r\nexport type SuggestItemSelectedEvent = {\r\n  value: any;\r\n  indexes: SuggestItemIndexes;\r\n  description?: string;\r\n  icon?: string;\r\n};\r\n\r\nexport type FocusChangeAttempt = {\r\n  el: HTMLChSuggestListItemElement;\r\n  code: ChSuggestKeyDownEvents;\r\n};\r\n\r\nexport type SuggestItemIndexes = {\r\n  itemIndex: number;\r\n  listIndex: number | undefined;\r\n};\r\n"],"mappings":"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"}