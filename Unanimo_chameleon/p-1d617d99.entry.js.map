{"version":3,"names":["chGridVirtualScrollerCss","ChGridVirtualScrollerStyle0","ChGridVirtualScroller","document","documentElement","clientHeight","gridEl","gridLayoutEl","resizeObserver","hasGridScrollHandler","this","unobserveScroll","observeScroll","definePercentScroll","hasWindowScrollHandler","style","overflowX","hasWindowScroll","browserHeightHandler","defineMaxViewPortItems","defineVirtualHeight","headerHeightHandler","el","top","headerHeight","rowsHeightHandler","defineHeaderHeight","defineRowHeight","rowHeightHandler","virtualHeightHandler","unobserveResize","setProperty","virtualHeight","Math","ceil","percentScroll","hasGridScroll","scrollTop","scrollHeight","window","scrollY","browserHeight","observeResize","maxViewPortItemsHandler","defineViewPortItems","percentScrollHandler","defineStartIndex","startIndexHandler","isScrollingHandler","isScrolling","itemsHandler","startIndex","itemsCountHandler","viewPortItemsHandler","viewPortItemsChanged","emit","componentWillLoad","assignedSlot","parentElement","closest","ResizeObserver","resizeHandler","viewport","addEventListener","scrollHandler","passive","scrollEndHandler","observe","body","removeEventListener","unobserve","entries","forEach","entry","target","rowsHeight","contentRect","height","defineHasScroll","parseFloat","getComputedStyle","gridTemplateRows","viewPortItems","length","rowHeight","min","maxViewPortItems","items","slice","index","max","floor","hiddenHeight","scrollPosition","gridRect","getBoundingClientRect"],"sources":["src/components/grid/grid-virtual-scroller/ch-grid-virtual-scroller.scss?tag=ch-grid-virtual-scroller","src/components/grid/grid-virtual-scroller/ch-grid-virtual-scroller.tsx"],"sourcesContent":["@layer ch-grid {\r\n  ch-grid:has(ch-grid-virtual-scroller)::part(main) {\r\n    grid-template-rows: max-content var(--ch-grid-virtual-scroller-height);\r\n  }\r\n\r\n  ch-grid-virtual-scroller {\r\n    display: grid;\r\n    height: max-content;\r\n\r\n    position: sticky;\r\n    top: 0px;\r\n\r\n    grid-auto-rows: max-content;\r\n    grid-column: 1 / -1;\r\n    grid-row: 2;\r\n    grid-template-columns: subgrid;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Prop,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Watch,\r\n  State\r\n} from \"@stencil/core\";\r\n\r\n/**\r\n * The `ch-grid-virtual-scroller` component that displays a subset of items.\r\n * It optimizes the rendering of large data sets by only rendering the items that are currently visible on the screen\r\n * based on the viewport size and scroll position.\r\n */\r\n@Component({\r\n  tag: \"ch-grid-virtual-scroller\",\r\n  styleUrl: \"ch-grid-virtual-scroller.scss\",\r\n  shadow: false\r\n})\r\nexport class ChGridVirtualScroller {\r\n  private gridEl: HTMLElement;\r\n  private gridLayoutEl: HTMLElement;\r\n  private resizeObserver: ResizeObserver;\r\n\r\n  @Element() el: HTMLChGridVirtualScrollerElement;\r\n\r\n  /**\r\n   * Flag indicating whether the grid has a scrollbar.\r\n   */\r\n  @State() hasGridScroll = false;\r\n\r\n  @Watch(\"hasGridScroll\")\r\n  hasGridScrollHandler() {\r\n    this.unobserveScroll();\r\n    this.observeScroll();\r\n\r\n    this.definePercentScroll();\r\n  }\r\n\r\n  /**\r\n   * Flag indicating whether the browser window has a scrollbar.\r\n   */\r\n  @State() hasWindowScroll = false;\r\n\r\n  @Watch(\"hasWindowScroll\")\r\n  hasWindowScrollHandler() {\r\n    this.gridLayoutEl.style.overflowX = this.hasWindowScroll\r\n      ? \"visible\"\r\n      : \"auto\";\r\n\r\n    this.unobserveScroll();\r\n    this.observeScroll();\r\n\r\n    this.definePercentScroll();\r\n  }\r\n\r\n  /**\r\n   * Height of the browser window in pixels.\r\n   */\r\n  @State() browserHeight = document.documentElement.clientHeight;\r\n  @Watch(\"browserHeight\")\r\n  browserHeightHandler() {\r\n    this.defineMaxViewPortItems();\r\n    this.defineVirtualHeight();\r\n  }\r\n\r\n  /**\r\n   * Height of the header in pixels.\r\n   */\r\n  @State() headerHeight: number;\r\n\r\n  @Watch(\"headerHeight\")\r\n  headerHeightHandler() {\r\n    this.el.style.top = `${this.headerHeight}px`;\r\n  }\r\n\r\n  @State() rowsHeight = 0;\r\n  @Watch(\"rowsHeight\")\r\n  rowsHeightHandler() {\r\n    this.defineHeaderHeight();\r\n    this.defineRowHeight();\r\n  }\r\n\r\n  /**\r\n   * Height of each row in pixels.\r\n   */\r\n  @State() rowHeight = 0;\r\n  @Watch(\"rowHeight\")\r\n  rowHeightHandler() {\r\n    this.defineMaxViewPortItems();\r\n    this.defineVirtualHeight();\r\n  }\r\n\r\n  @State() virtualHeight = 0;\r\n  @Watch(\"virtualHeight\")\r\n  virtualHeightHandler() {\r\n    this.unobserveScroll();\r\n    this.unobserveResize();\r\n\r\n    this.gridLayoutEl.style.setProperty(\r\n      \"--ch-grid-virtual-scroller-height\",\r\n      `${this.virtualHeight}px`\r\n    );\r\n\r\n    if (Math.ceil(this.percentScroll) !== 100) {\r\n      if (this.hasGridScroll) {\r\n        this.gridLayoutEl.scrollTop =\r\n          this.percentScroll /\r\n          (100 /\r\n            (this.gridLayoutEl.scrollHeight - this.gridLayoutEl.clientHeight));\r\n      } else if (this.hasWindowScroll) {\r\n        window.scrollY =\r\n          this.percentScroll /\r\n          (100 / (this.gridEl.clientHeight - this.browserHeight));\r\n      }\r\n    }\r\n\r\n    this.observeScroll();\r\n    this.observeResize();\r\n  }\r\n\r\n  /**\r\n   * The maximum number of items that can fit on the screen at any given time.\r\n   */\r\n  @State() maxViewPortItems = 7;\r\n  @Watch(\"maxViewPortItems\")\r\n  maxViewPortItemsHandler() {\r\n    this.defineViewPortItems();\r\n  }\r\n\r\n  @State() percentScroll: number = 0;\r\n  @Watch(\"percentScroll\")\r\n  percentScrollHandler() {\r\n    this.defineStartIndex();\r\n  }\r\n\r\n  @State() startIndex: number = null;\r\n  @Watch(\"startIndex\")\r\n  startIndexHandler() {\r\n    this.defineViewPortItems();\r\n  }\r\n\r\n  @State() isScrolling: boolean = false;\r\n  @Watch(\"isScrolling\")\r\n  isScrollingHandler() {\r\n    if (!this.isScrolling) {\r\n      this.defineMaxViewPortItems();\r\n      this.defineVirtualHeight();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The list of items to be rendered in the grid.\r\n   */\r\n  @Prop() readonly items: any[];\r\n  @Watch(\"items\")\r\n  itemsHandler() {\r\n    if (!this.startIndex === null) {\r\n      this.defineStartIndex();\r\n    } else {\r\n      this.defineViewPortItems();\r\n      this.defineVirtualHeight();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The number of elements in the items list.\r\n   * Use if the list changes, without recreating the array.\r\n   */\r\n  @Prop() readonly itemsCount: number;\r\n  @Watch(\"itemsCount\")\r\n  itemsCountHandler() {\r\n    if (!this.startIndex === null) {\r\n      this.defineStartIndex();\r\n    } else {\r\n      this.defineViewPortItems();\r\n      this.defineVirtualHeight();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The list of items to display within the current viewport.\r\n   */\r\n  @Prop({ mutable: true }) viewPortItems: any[];\r\n  @Watch(\"viewPortItems\")\r\n  viewPortItemsHandler() {\r\n    this.viewPortItemsChanged.emit();\r\n  }\r\n\r\n  /**\r\n   *Event emitted when the list of visible items in the grid changes.\r\n   */\r\n  @Event() viewPortItemsChanged: EventEmitter;\r\n\r\n  componentWillLoad() {\r\n    this.gridLayoutEl = this.el.assignedSlot.parentElement;\r\n    this.gridEl = this.el.closest(\"ch-grid\");\r\n    this.resizeObserver = new ResizeObserver(this.resizeHandler);\r\n\r\n    this.observeScroll();\r\n    this.observeResize();\r\n  }\r\n\r\n  private observeScroll() {\r\n    let viewport: HTMLElement | Document;\r\n\r\n    if (this.hasGridScroll) {\r\n      viewport = this.gridLayoutEl;\r\n    } else if (this.hasWindowScroll) {\r\n      viewport = document;\r\n    }\r\n\r\n    viewport?.addEventListener(\"scroll\", this.scrollHandler, {\r\n      passive: true\r\n    });\r\n    viewport?.addEventListener(\"scrollend\", this.scrollEndHandler, {\r\n      passive: true\r\n    });\r\n  }\r\n\r\n  private observeResize() {\r\n    this.resizeObserver.observe(this.el);\r\n    this.resizeObserver.observe(this.gridEl);\r\n    this.resizeObserver.observe(document.documentElement);\r\n    this.resizeObserver.observe(document.body);\r\n  }\r\n\r\n  private unobserveScroll() {\r\n    document.removeEventListener(\"scroll\", this.scrollHandler);\r\n    this.gridLayoutEl.removeEventListener(\"scroll\", this.scrollHandler);\r\n  }\r\n\r\n  private unobserveResize() {\r\n    this.resizeObserver.unobserve(this.el);\r\n    this.resizeObserver.unobserve(this.gridEl);\r\n    this.resizeObserver.unobserve(document.documentElement);\r\n    this.resizeObserver.unobserve(document.body);\r\n  }\r\n\r\n  private scrollHandler = () => {\r\n    this.isScrolling = true;\r\n    this.definePercentScroll();\r\n  };\r\n\r\n  private scrollEndHandler = () => {\r\n    this.isScrolling = false;\r\n  };\r\n\r\n  private resizeHandler = (entries: ResizeObserverEntry[]) => {\r\n    entries.forEach(entry => {\r\n      switch (entry.target) {\r\n        case this.el:\r\n          this.rowsHeight = entry.contentRect.height;\r\n          break;\r\n        case document.documentElement:\r\n        case document.body:\r\n          this.browserHeight = document.documentElement.clientHeight;\r\n          break;\r\n      }\r\n    });\r\n\r\n    this.defineHasScroll();\r\n  };\r\n\r\n  private defineHasScroll() {\r\n    this.hasGridScroll =\r\n      this.gridLayoutEl.scrollHeight !== this.gridLayoutEl.clientHeight;\r\n    this.hasWindowScroll =\r\n      !this.hasGridScroll && this.gridEl.clientHeight > this.browserHeight;\r\n  }\r\n\r\n  private defineHeaderHeight() {\r\n    this.headerHeight = parseFloat(\r\n      getComputedStyle(this.gridLayoutEl).gridTemplateRows\r\n    );\r\n  }\r\n\r\n  private defineRowHeight() {\r\n    if (this.viewPortItems.length === 0) {\r\n      this.rowHeight = 0;\r\n    } else if (this.viewPortItems.length > 0 && this.percentScroll === 0) {\r\n      this.rowHeight = this.rowsHeight / this.viewPortItems.length;\r\n    } else {\r\n      this.rowHeight = Math.min(\r\n        this.rowHeight,\r\n        this.rowsHeight / this.viewPortItems.length\r\n      );\r\n    }\r\n  }\r\n\r\n  private defineMaxViewPortItems() {\r\n    if (this.rowHeight === 0) {\r\n      this.maxViewPortItems = 7;\r\n    } else {\r\n      this.maxViewPortItems = Math.ceil(this.browserHeight / this.rowHeight);\r\n    }\r\n  }\r\n\r\n  private defineVirtualHeight() {\r\n    if (!this.isScrolling) {\r\n      this.virtualHeight = this.items.length * this.rowHeight;\r\n    }\r\n  }\r\n\r\n  private defineViewPortItems() {\r\n    this.viewPortItems = this.items.slice(\r\n      this.startIndex,\r\n      this.startIndex + this.maxViewPortItems\r\n    );\r\n    // this.viewPortItems = this.items.slice(\r\n    //   Math.min(this.startIndex, this.items.length - this.maxViewPortItems),\r\n    //   this.startIndex + this.maxViewPortItems\r\n    // );\r\n  }\r\n\r\n  private defineStartIndex() {\r\n    const index =\r\n      (this.percentScroll *\r\n        Math.max(this.items.length - this.maxViewPortItems, 0)) /\r\n      100;\r\n    // const index = (this.percentScroll * (this.items.length - 1)) / 100;\r\n\r\n    this.startIndex =\r\n      this.percentScroll <= 50 ? Math.floor(index) : Math.ceil(index);\r\n  }\r\n\r\n  private definePercentScroll() {\r\n    let hiddenHeight = 0;\r\n    let scrollPosition = 0;\r\n\r\n    if (this.hasGridScroll) {\r\n      hiddenHeight =\r\n        this.gridLayoutEl.scrollHeight - this.gridLayoutEl.clientHeight;\r\n      scrollPosition = this.gridLayoutEl.scrollTop;\r\n    } else if (this.hasWindowScroll) {\r\n      const gridRect = this.gridEl.getBoundingClientRect();\r\n\r\n      hiddenHeight = this.gridEl.clientHeight - this.browserHeight;\r\n      scrollPosition = Math.min(\r\n        gridRect.top >= 0 ? 0 : gridRect.top * -1,\r\n        hiddenHeight\r\n      );\r\n    }\r\n\r\n    this.percentScroll =\r\n      hiddenHeight > 0 ? (scrollPosition * 100) / hiddenHeight : 0;\r\n  }\r\n}\r\n"],"mappings":"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"}