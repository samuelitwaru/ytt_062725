{"version":3,"names":["filterWithCase","stringToFilter","filter","matchCase","includes","toLowerCase","filterWithString","filterOptions","regularExpression","match","filterDictionary","caption","item","filterInfo","_a","value","none","computeFilter","filterType","hideMatchesAndShowNonMatches","filterSubModel","displayedValues","aSubItemIsRendered","itemSubGroup","items","index","length","itemLeaf","itemSatisfiesFilter","satisfiesFilter","add","comboBoxCss","ChComboBoxStyle0","SELECTED_PART","DISABLED_PART","SELECTED_ITEM_SELECTOR","concat","COMBO_BOX_MASK_BLOCK_START","COMBO_BOX_MASK_BLOCK_END","COMBO_BOX_MASK_INLINE_START","COMBO_BOX_MASK_INLINE_END","mobileDevice","isMobileDevice","autoId","negateBorderValue","borderSize","SELECTED_VALUE_DOES_NOT_EXISTS","type","isValidIndex","array","findSelectedIndex","valueToItemInfo","selectedValue","_e","get","findNextSelectedIndex","model","currentIndex","increment","hasFilters","firstLevelIndex","secondLevelIndex","firstLevelItemItems","disabled","has","nextFirstLevelIndex","nestedLevel","ChComboBox","exports","_b","_accessibleNameFromExternalLabel","set","this","_popoverId","_firstExpanded","_borderSizeRAF","_resizeObserver","_lastMaskInlineStart","undefined","_lastMaskInlineEnd","_lastMaskBlockStart","_lastMaskBlockEnd","_valueToItemInfo","Map","_applyFilters","_immediateFilter","_queuedFilterId","_displayedValues","_focusSelectAfterNextRender","_selectNextIndex","event","currentSelectedIndex","preventDefault","nextSelectedIndex","_this","newSelectedValue","currentSelectedValue","__classPrivateFieldSet","_keyEventsNoFiltersDictionary","ArrowUp","__classPrivateFieldGet","call","_isModelAlreadyFiltered","ArrowDown","Home","End","Enter","expanded","el","focus","Space","Tab","_keyEventsWithFiltersDictionary","_maskRef","_inputRef","_selectRef","_scheduleFilterProcessing","newImmediateFilter","_filterFunction","modelIsAlreadyFiltered","filterChange","emit","clear","_updateFilters","clearTimeout","processWithDebounce","filterDebounce","Set","setTimeout","forceUpdate","_mapValuesToItemInfo","forEach","itemGroup","subItems","firstExpanded","expandable","subItem","_checkAndEmitValueChange","input","_itemLeafParts","insideAGroup","isDisabled","_setResizeObserver","SyncWithRAF","ResizeObserver","_updateBorderSizeRAF","observe","box","perform","_updateBorderSize","computedStyle","getComputedStyle","negatedBorderInlineStartWidth","borderInlineStartWidth","negatedBorderInlineEndWidth","borderInlineEndWidth","negatedBorderBlockStartWidth","borderBlockStartWidth","negatedBorderBlockEndWidth","borderBlockEndWidth","style","setProperty","_handleSelectChange","_handleExpandedChange","stopPropagation","_handleExpandedChangeWithKeyBoard","keyboardHandler","code","KEY_CODES","ESCAPE","HOME","END","ARROW_LEFT","ARROW_RIGHT","_handlePopoverClose","focusComposedPath","_handleInputFilterChange","_displayPopoverWhenFiltersApplied","_focusInnerInputWhenFiltersApplied","_updateCurrentSelectedValue","itemValue","_selectedValue","_toggleExpandInGroup","_getItemImageCustomVars","hasImages","hasStartImg","hasEndImg","startImgSrc","endImgSrc","alreadyProcessed","_customItemRender","filtersAreApplied","customVars","canAddListeners","h","key","toString","role","class","part","group__header","onClick","_g","startImgType","_h","endImgType","id","_j","_k","group__content","map","tabindex","leaf","_f","_l","_m","onMouseEnter","_nativeItemRender","label","selected","_nativeRender","placeholder","accessibleName","onChange","ref","class_1","prototype","handleExpandedChange","newExpandedValue","filterChanged","filterDebounceChanged","filterOptionsChanged","filterTypeChanged","modelChanged","newModel","valueChange","newValue","internals","setFormValue","connectedCallback","labels","textContent","trim","componentShouldUpdate","_newValue","_oldValue","name","componentWillRender","componentDidLoad","componentDidRender","selectedElement","shadowRoot","querySelector","requestAnimationFrame","disconnectedCallback","disconnect","render","comboBoxIsInteractive","readonly","destroyRender","destroyItemsOnClose","Host","onKeyDown","mask","onClickCapture","autocomplete","readOnly","onInputCapture","actionById","actionElement","blockAlign","inlineAlign","closeOnClickOutside","hidden","popover","resizable","inlineSizeMatch","positionTry","onPopoverClosed","DROPDOWN_TAG_NAME","FIRST_DROPDOWN","LAST_DROPDOWN","elementIsDropdown","element","tagName","getFocusedDropdown","target","getDropdownFirstItem","dropdown","getDropdownLastItem","getFirstSiblingItem","sibling","parentElement","getLastSiblingItem","dropdownKeyEventsDictionary","ARROW_DOWN","focusedElement","level","focusElement","nextSiblingToFocus","nextElementSibling","ARROW_UP","previousElementSibling","__awaiter","expandDropdown","sent","parentDropdown","collapseDropdown","dropdownRenderCss","ChDropdownRenderStyle0","ChDropdownRender","_c","_showHeader","_showFooter","_mainDropdownExpanded","_handleItemClick","itemId","itemClickCallback","_renderItem","hasItems","exportparts","exportParts","cssClass","useGxRender","fromGxImageToURL","gxSettings","gxImageConstructor","href","link","url","position","itemsPosition","shortcut","onExpandedChange","wasExpanded","_handleItemExpanded","showSeparator","separatorClass","separatorCssClass","_handleKeyDownEvents","keyEventHandler","_handleMainDropdownExpand","DROPDOWN_EXPORT_PARTS","class_2","componentWillLoad","buttonAccessibleName","showHeader","showFooter","slot","radioGroupRenderCss","ChRadioGroupRenderStyle0","PARTS","checked","checkedValue","RADIO_ITEM_PARTS_DICTIONARY","CHECKED","UNCHECKED","DISABLED","ChRadioGroupRender","_d","_handleCheckedInputChange","change","_itemRender","additionalParts","RADIO_ITEM","container","CONTAINER","INPUT","onInput","option","OPTION","LABEL","htmlFor","class_3","handleValueChange"],"sources":["src/components/combobox/helpers.ts","src/components/combobox/combo-box.scss?tag=ch-combo-box&encapsulation=shadow","src/components/combobox/combo-box.tsx","src/components/dropdown/utils.ts","src/components/dropdown/dropdown-render.scss?tag=ch-dropdown-render","src/components/dropdown/dropdown-render.tsx","src/components/radio-group/radio-group-render.scss?tag=ch-radio-group-render&encapsulation=shadow","src/components/radio-group/radio-group-render.tsx"],"sourcesContent":["import {\r\n  ComboBoxFilterInfo,\r\n  ComboBoxFilterOptions,\r\n  ComboBoxFilterType,\r\n  ComboBoxItemGroup,\r\n  ComboBoxItemModel\r\n} from \"./types\";\r\n\r\nconst filterWithCase = (\r\n  stringToFilter: string,\r\n  filter: string,\r\n  matchCase?: boolean\r\n) =>\r\n  matchCase\r\n    ? stringToFilter.includes(filter)\r\n    : stringToFilter.toLowerCase().includes(filter.toLowerCase());\r\n\r\nconst filterWithString = (\r\n  stringToFilter: string,\r\n  filter: string,\r\n  filterOptions: ComboBoxFilterOptions\r\n) =>\r\n  filterOptions?.regularExpression\r\n    ? stringToFilter.match(filter) !== null\r\n    : filterWithCase(stringToFilter, filter, filterOptions?.matchCase);\r\n\r\nconst filterDictionary: {\r\n  [key in ComboBoxFilterType]: (\r\n    item: ComboBoxItemModel,\r\n    filterInfo: ComboBoxFilterInfo\r\n  ) => boolean;\r\n} = {\r\n  caption: (item, filterInfo) =>\r\n    filterInfo.filter\r\n      ? filterWithString(\r\n          item.caption ?? \"\",\r\n          filterInfo.filter,\r\n          filterInfo.filterOptions\r\n        )\r\n      : true,\r\n\r\n  value: (item, filterInfo) =>\r\n    filterInfo.filter\r\n      ? filterWithString(\r\n          item.value,\r\n          filterInfo.filter,\r\n          filterInfo.filterOptions\r\n        )\r\n      : true,\r\n\r\n  none: () => true\r\n};\r\n\r\nconst computeFilter = (\r\n  filterType: ComboBoxFilterType,\r\n  item: ComboBoxItemModel,\r\n  filterInfo: ComboBoxFilterInfo\r\n): boolean =>\r\n  filterInfo.filterOptions?.hideMatchesAndShowNonMatches === true\r\n    ? !filterDictionary[filterType](item, filterInfo)\r\n    : filterDictionary[filterType](item, filterInfo);\r\n\r\nexport const filterSubModel = (\r\n  item: ComboBoxItemModel,\r\n  filterType: ComboBoxFilterType,\r\n  filterInfo: ComboBoxFilterInfo,\r\n  displayedValues: Set<string>\r\n): boolean => {\r\n  // Check if a subitem is rendered\r\n  let aSubItemIsRendered = false;\r\n  const itemSubGroup = (item as ComboBoxItemGroup).items;\r\n\r\n  if (itemSubGroup != null) {\r\n    for (let index = 0; index < itemSubGroup.length; index++) {\r\n      const itemLeaf = itemSubGroup[index];\r\n      const itemSatisfiesFilter = filterSubModel(\r\n        itemLeaf,\r\n        filterType,\r\n        filterInfo,\r\n        displayedValues\r\n      );\r\n\r\n      aSubItemIsRendered ||= itemSatisfiesFilter;\r\n    }\r\n  }\r\n\r\n  // The current item is rendered if it satisfies the filter condition or a\r\n  // subitem exists that needs to be rendered\r\n  const satisfiesFilter =\r\n    aSubItemIsRendered || computeFilter(filterType, item, filterInfo);\r\n\r\n  // Update selected and checkbox items\r\n  if (satisfiesFilter) {\r\n    displayedValues.add(item.value);\r\n  }\r\n\r\n  return satisfiesFilter;\r\n};\r\n","@import \"../../common/base\";\r\n@import \"../../common/icons\";\r\n\r\n@include input-reset();\r\n@include button-reset(); // Should be placed before the box-sizing reset\r\n@include box-sizing();\r\n\r\n:host {\r\n  /**\r\n   * @prop --ch-combo-box-group__expandable-button-size:\r\n   * Specifies the expandable button size in the group items.\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-combo-box-group__expandable-button-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-combo-box-group__expandable-button-image-size:\r\n   * Specifies the image size of the expandable button size in the group items. \r\n   * @default 100%\r\n   */\r\n  --ch-combo-box-group__expandable-button-image-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-combo-box-item__image-size:\r\n   * Specifies the box size that contains an image in the items. For example,\r\n   * the box for the startImgSrc and endImgSrc\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-combo-box-item__image-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-combo-box-item__background-image-size:\r\n   * Specifies the image size of the items. For example, the image size for the\r\n   * startImgSrc and endImgSrc\r\n   * @default 100%\r\n   */\r\n  --ch-combo-box-item__background-image-size: 100%;\r\n\r\n  /**\r\n   * @prop --ch-combo-box__picker:\r\n   * Specifies the image of the combo-box's picker.\r\n   * @default url('data:image/svg+xml,<svg width=\"8\" height=\"12\" viewBox=\"0 0 8 12\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M4.16669 0.666626L7.66669 4.66663H0.666687L4.16669 0.666626ZM4.16669 11.3333L0.666687 7.33329H7.66669L4.16669 11.3333Z\"/></svg>')\r\n   */\r\n  --ch-combo-box__picker: url('data:image/svg+xml,<svg width=\"8\" height=\"12\" viewBox=\"0 0 8 12\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M4.16669 0.666626L7.66669 4.66663H0.666687L4.16669 0.666626ZM4.16669 11.3333L0.666687 7.33329H7.66669L4.16669 11.3333Z\"/></svg>');\r\n\r\n  /**\r\n   * @prop --ch-combo-box__picker-color:\r\n   * Specifies the color of the combo-box's picker.\r\n   * @default currentColor\r\n   */\r\n  --ch-combo-box__picker-color: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-combo-box__picker-size:\r\n   * Specifies the box size that contains the combo-box's picker.\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-combo-box__picker-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-combo-box__picker-mask-size:\r\n   * Specifies the image size of the combo-box's picker.\r\n   * @default 100%\r\n   */\r\n  --ch-combo-box__picker-image-size: 100%;\r\n\r\n  /**\r\n   * @prop --ch-combo-box-item-gap:\r\n   * Specifies the spacing between the images, text and the expandable button\r\n   * on items.\r\n   * @default 0px\r\n   */\r\n  --ch-combo-box-item-gap: 0px;\r\n\r\n  /**\r\n   * @prop --ch-combo-box-separation:\r\n   * Specifies the separation between the combo-box and the displayed popover.\r\n   * @default 0px\r\n   */\r\n  --ch-combo-box-separation: 0px;\r\n\r\n  /**\r\n   * @prop --ch-combo-box-separation-x:\r\n   * Specifies the separation between the combo-box and the popover displayed\r\n   * on the x-axis.\r\n   * @default var(--ch-combo-box-separation)\r\n   */\r\n  --ch-combo-box-separation-x: var(--ch-combo-box-separation);\r\n\r\n  /**\r\n   * @prop --ch-combo-box-separation-y:\r\n   * Specifies the separation between the combo-box and the popover displayed\r\n   * on the y-axis.\r\n   * @default var(--ch-combo-box-separation)\r\n   */\r\n  --ch-combo-box-separation-y: var(--ch-combo-box-separation);\r\n\r\n  --ch-combo-box-mask-inline-start-width: 0px;\r\n  --ch-combo-box-mask-inline-end-width: 0px;\r\n  --ch-combo-box-mask-block-start-width: 0px;\r\n  --ch-combo-box-mask-block-end-width: 0px;\r\n\r\n  display: inline-grid;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  // Remove outline of the focus state. This selector must not have higher\r\n  // specificity, since it should be overridden by the class applied to the control\r\n  outline: unset;\r\n\r\n  // Remove text selection on double click\r\n  user-select: none;\r\n\r\n  &::after {\r\n    content: \"\";\r\n    justify-self: flex-end;\r\n    inline-size: var(--ch-combo-box__picker-size);\r\n    block-size: var(--ch-combo-box__picker-size);\r\n    -webkit-mask: var(--ch-combo-box__picker) 50% 50% /\r\n      var(--ch-combo-box__picker-image-size)\r\n      var(--ch-combo-box__picker-image-size) no-repeat;\r\n    background-color: var(--ch-combo-box__picker-color);\r\n    pointer-events: none;\r\n  }\r\n}\r\n\r\n:host(.ch-disabled) {\r\n  pointer-events: none;\r\n}\r\n\r\nselect {\r\n  all: unset;\r\n  display: grid;\r\n  opacity: 0;\r\n  overflow: hidden;\r\n}\r\n\r\n.mask,\r\nselect {\r\n  position: absolute;\r\n  inset-inline: var(--ch-combo-box-mask-inline-start)\r\n    var(--ch-combo-box-mask-inline-end);\r\n  inset-block: var(--ch-combo-box-mask-block-start)\r\n    var(--ch-combo-box-mask-block-end);\r\n}\r\n\r\n.mask {\r\n  cursor: text;\r\n\r\n  &--no-filters {\r\n    cursor: pointer;\r\n  }\r\n}\r\n\r\n.mask,\r\n.value {\r\n  padding: inherit;\r\n  border: inherit;\r\n  border-color: transparent;\r\n}\r\n\r\n.value {\r\n  position: absolute;\r\n  inset-inline: var(--ch-combo-box-mask-inline-start)\r\n    var(--ch-combo-box-mask-inline-end);\r\n  inset-block: var(--ch-combo-box-mask-block-start)\r\n    var(--ch-combo-box-mask-block-end);\r\n\r\n  margin-inline-end: var(--ch-combo-box__picker-size);\r\n\r\n  &--readonly {\r\n    pointer-events: none;\r\n    text-overflow: ellipsis;\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//           Separation\r\n// - - - - - - - - - - - - - - - -\r\nch-popover {\r\n  --ch-popover-separation-x: var(--ch-combo-box-separation-x);\r\n  --ch-popover-separation-y: var(--ch-combo-box-separation-y);\r\n\r\n  // --ch-popover-min-inline-size: var(--ch-popover-action-width);\r\n\r\n  &:not(.hydrated) {\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n.window__content {\r\n  display: grid;\r\n  grid-auto-rows: max-content;\r\n  overflow: auto;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//         Leaf and Group\r\n// - - - - - - - - - - - - - - - -\r\n.leaf,\r\n.group__header,\r\n.group__header-caption {\r\n  display: flex;\r\n  gap: var(--ch-combo-box-item-gap);\r\n  align-items: center;\r\n}\r\n\r\n.group {\r\n  display: grid;\r\n  grid-template-rows: max-content 1fr;\r\n\r\n  &--expandable {\r\n    &::before {\r\n      content: \"\";\r\n      inline-size: var(--ch-combo-box-group__expandable-button-size);\r\n      block-size: var(--ch-combo-box-group__expandable-button-size);\r\n      background-color: currentColor;\r\n      -webkit-mask: $expandable-icon 50% 50% /\r\n        var(--ch-combo-box-group__expandable-button-image-size)\r\n        var(--ch-combo-box-group__expandable-button-image-size) no-repeat;\r\n    }\r\n  }\r\n\r\n  &--collapsed::before {\r\n    transform: rotate(-90deg); // TODO: Add RTL support\r\n  }\r\n\r\n  &__content {\r\n    display: grid;\r\n    grid-auto-rows: max-content;\r\n\r\n    &--collapsed {\r\n      display: none;\r\n    }\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//             Images\r\n// - - - - - - - - - - - - - - - -\r\n.img--start::before,\r\n.img--end::after {\r\n  content: \"\";\r\n  display: block;\r\n  inline-size: var(--ch-combo-box-item__image-size);\r\n  block-size: var(--ch-combo-box-item__image-size);\r\n  min-inline-size: var(--ch-combo-box-item__image-size);\r\n}\r\n\r\n.img--start {\r\n  --ch-combo-box-item-img: var(--ch-combo-box-item-start-img);\r\n}\r\n\r\n.img--end {\r\n  --ch-combo-box-item-img: var(--ch-combo-box-item-end-img);\r\n\r\n  &::after {\r\n    margin-inline-start: auto;\r\n  }\r\n}\r\n\r\n.start-img-type--background::before,\r\n.end-img-type--background::after {\r\n  background: no-repeat center / var(--ch-combo-box-item__background-image-size)\r\n    var(--ch-combo-box-item-img);\r\n}\r\n\r\n.start-img-type--mask::before,\r\n.end-img-type--mask::after {\r\n  -webkit-mask: var(--ch-combo-box-item-img) 50% 50% /\r\n    var(--ch-combo-box-item__background-image-size)\r\n    var(--ch-combo-box-item__background-image-size) no-repeat;\r\n  background-color: currentColor;\r\n}\r\n","import {\r\n  AttachInternals,\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  State,\r\n  Watch,\r\n  forceUpdate,\r\n  h\r\n} from \"@stencil/core\";\r\nimport {\r\n  AccessibleNameComponent,\r\n  DisableableComponent\r\n} from \"../../common/interfaces\";\r\nimport {\r\n  ComboBoxFilterOptions,\r\n  ComboBoxFilterType,\r\n  ComboBoxItemModel,\r\n  ComboBoxItemGroup,\r\n  ComboBoxItemLeaf,\r\n  ComboBoxFilterInfo,\r\n  ComboBoxModel\r\n} from \"./types\";\r\nimport { isMobileDevice } from \"../../common/utils\";\r\nimport { KEY_CODES } from \"../../common/reserverd-names\";\r\nimport { SyncWithRAF } from \"../../common/sync-with-frames\";\r\nimport { ChPopoverCustomEvent } from \"../../components\";\r\nimport { focusComposedPath } from \"../common/helpers\";\r\nimport { filterSubModel } from \"./helpers\";\r\n\r\nconst SELECTED_PART = \"selected\";\r\nconst DISABLED_PART = \"disabled\";\r\n\r\nconst SELECTED_ITEM_SELECTOR = `button[part*='${SELECTED_PART}']`;\r\n\r\nconst COMBO_BOX_MASK_BLOCK_START = \"--ch-combo-box-mask-block-start\";\r\nconst COMBO_BOX_MASK_BLOCK_END = \"--ch-combo-box-mask-block-end\";\r\nconst COMBO_BOX_MASK_INLINE_START = \"--ch-combo-box-mask-inline-start\";\r\nconst COMBO_BOX_MASK_INLINE_END = \"--ch-combo-box-mask-inline-end\";\r\n\r\nconst mobileDevice = isMobileDevice();\r\n\r\nlet autoId = 0;\r\n\r\nconst negateBorderValue = (borderSize: string) =>\r\n  borderSize === \"0px\" ? \"0px\" : `-${borderSize}`;\r\n\r\n// Keys\r\ntype KeyDownNoFiltersEvents =\r\n  | typeof KEY_CODES.ARROW_UP\r\n  | typeof KEY_CODES.ARROW_DOWN\r\n  | typeof KEY_CODES.HOME\r\n  | typeof KEY_CODES.END\r\n  | typeof KEY_CODES.ENTER\r\n  | typeof KEY_CODES.SPACE\r\n  | typeof KEY_CODES.TAB;\r\n\r\ntype KeyDownWithFiltersEvents =\r\n  | typeof KEY_CODES.ARROW_UP\r\n  | typeof KEY_CODES.ARROW_DOWN\r\n  | typeof KEY_CODES.ENTER\r\n  | typeof KEY_CODES.TAB;\r\n\r\ntype SelectedIndex =\r\n  | {\r\n      type: \"not-exists\";\r\n    }\r\n  | {\r\n      type: \"nested\";\r\n      firstLevelIndex: number;\r\n      secondLevelIndex: number;\r\n    }\r\n  | {\r\n      type: \"first-level\";\r\n      firstLevelIndex: number;\r\n    };\r\n\r\nconst SELECTED_VALUE_DOES_NOT_EXISTS: SelectedIndex = {\r\n  type: \"not-exists\"\r\n} as const;\r\n\r\nconst isValidIndex = (array: any, index: number) =>\r\n  0 <= index && index < array.length;\r\n\r\nconst findSelectedIndex = (\r\n  valueToItemInfo: Map<string, { caption: string; index: SelectedIndex }>,\r\n  selectedValue: string | undefined\r\n): SelectedIndex => {\r\n  if (!selectedValue) {\r\n    return SELECTED_VALUE_DOES_NOT_EXISTS;\r\n  }\r\n\r\n  return (\r\n    valueToItemInfo.get(selectedValue)?.index ?? SELECTED_VALUE_DOES_NOT_EXISTS\r\n  );\r\n};\r\n\r\nconst findNextSelectedIndex = (\r\n  model: ComboBoxModel,\r\n  currentIndex: SelectedIndex,\r\n  increment: 1 | -1,\r\n  hasFilters: boolean,\r\n  displayedValues: Set<string>\r\n): SelectedIndex => {\r\n  if (currentIndex.type === \"not-exists\") {\r\n    return SELECTED_VALUE_DOES_NOT_EXISTS;\r\n  }\r\n  const firstLevelIndex = currentIndex.firstLevelIndex;\r\n\r\n  if (currentIndex.type === \"nested\") {\r\n    let secondLevelIndex = currentIndex.secondLevelIndex + increment; // Start from the first valid index\r\n    const firstLevelItemItems = (model[firstLevelIndex] as ComboBoxItemGroup)\r\n      .items;\r\n\r\n    // Search in the nested level skipping disabled and not rendered items\r\n    while (\r\n      isValidIndex(firstLevelItemItems, secondLevelIndex) &&\r\n      (firstLevelItemItems[secondLevelIndex].disabled ||\r\n        (hasFilters &&\r\n          !displayedValues.has(firstLevelItemItems[secondLevelIndex].value)))\r\n    ) {\r\n      secondLevelIndex += increment;\r\n    }\r\n\r\n    // If the index is not after the end of the array, the new selected value\r\n    // was found\r\n    if (isValidIndex(firstLevelItemItems, secondLevelIndex)) {\r\n      return {\r\n        type: \"nested\",\r\n        firstLevelIndex: firstLevelIndex,\r\n        secondLevelIndex: secondLevelIndex\r\n      };\r\n    }\r\n  }\r\n\r\n  // At this point, either all items in the nested level were disabled or the\r\n  // \"currentIndex\" was not nested. In any case, we must check the next item\r\n  // in the first level\r\n  let nextFirstLevelIndex = firstLevelIndex + increment;\r\n\r\n  // Search for the next first level item that is not disabled and is not filtered\r\n  while (\r\n    isValidIndex(model, nextFirstLevelIndex) &&\r\n    (model[nextFirstLevelIndex].disabled ||\r\n      (hasFilters && !displayedValues.has(model[nextFirstLevelIndex].value)))\r\n  ) {\r\n    nextFirstLevelIndex += increment;\r\n  }\r\n\r\n  // With this flag, we also say that we are at the end of the combo-box\r\n  // and there isn't any new \"next value\" to select\r\n  if (!isValidIndex(model, nextFirstLevelIndex)) {\r\n    return SELECTED_VALUE_DOES_NOT_EXISTS;\r\n  }\r\n\r\n  const nestedLevel = (model[nextFirstLevelIndex] as ComboBoxItemGroup).items;\r\n\r\n  if (nestedLevel != null) {\r\n    return findNextSelectedIndex(\r\n      model,\r\n      {\r\n        type: \"nested\",\r\n        firstLevelIndex: nextFirstLevelIndex,\r\n        secondLevelIndex: increment === 1 ? -1 : nestedLevel.length // The algorithm will sum 1 (or -1) to the start index\r\n      },\r\n      increment,\r\n      hasFilters,\r\n      displayedValues\r\n    );\r\n  }\r\n\r\n  return {\r\n    type: \"first-level\",\r\n    firstLevelIndex: nextFirstLevelIndex\r\n  };\r\n};\r\n\r\ntype ImmediateFilter = \"immediate\" | \"debounced\" | undefined;\r\n\r\n/**\r\n * @part ... - ...\r\n */\r\n@Component({\r\n  formAssociated: true,\r\n  shadow: true,\r\n  styleUrl: \"combo-box.scss\",\r\n  tag: \"ch-combo-box\"\r\n})\r\nexport class ChComboBox\r\n  implements AccessibleNameComponent, DisableableComponent\r\n{\r\n  #accessibleNameFromExternalLabel: string | undefined;\r\n  #popoverId: string | undefined;\r\n  #firstExpanded = false;\r\n\r\n  #borderSizeRAF: SyncWithRAF | undefined;\r\n  #resizeObserver: ResizeObserver | undefined;\r\n\r\n  #lastMaskInlineStart = undefined;\r\n  #lastMaskInlineEnd = undefined;\r\n  #lastMaskBlockStart = undefined;\r\n  #lastMaskBlockEnd = undefined;\r\n\r\n  #valueToItemInfo: Map<\r\n    string,\r\n    { caption: string; index: SelectedIndex; firstExpanded?: boolean }\r\n  > = new Map();\r\n\r\n  // Filters info\r\n  #applyFilters = false;\r\n  #immediateFilter: ImmediateFilter;\r\n  #queuedFilterId: NodeJS.Timeout;\r\n\r\n  /**\r\n   * Collection of displayed values. If a filter is applied and the value\r\n   * belongs to this Set, the item is displayed.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #displayedValues: Set<string> | undefined; // Don't allocate memory until needed\r\n\r\n  /**\r\n   * When the control is used in a desktop environment, we need to manually\r\n   * focus the selected item when the control is expanded.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #focusSelectAfterNextRender = true;\r\n\r\n  #selectNextIndex = (\r\n    event: KeyboardEvent,\r\n    currentSelectedIndex: SelectedIndex,\r\n    increment: 1 | -1,\r\n    hasFilters: boolean,\r\n    displayedValues: Set<string>\r\n  ) => {\r\n    event.preventDefault(); // Stop ArrowDown key from scrolling\r\n\r\n    const nextSelectedIndex =\r\n      currentSelectedIndex.type === \"not-exists\"\r\n        ? findNextSelectedIndex(\r\n            this.model,\r\n            {\r\n              type: \"first-level\",\r\n              firstLevelIndex: increment === 1 ? -1 : this.model.length\r\n            },\r\n            increment,\r\n            hasFilters,\r\n            displayedValues\r\n          )\r\n        : findNextSelectedIndex(\r\n            this.model,\r\n            currentSelectedIndex,\r\n            increment,\r\n            hasFilters,\r\n            displayedValues\r\n          );\r\n\r\n    if (nextSelectedIndex.type === \"not-exists\") {\r\n      return;\r\n    }\r\n\r\n    // The new selected value is either in the first level or in the group\r\n    const newSelectedValue =\r\n      nextSelectedIndex.type === \"first-level\"\r\n        ? this.model[nextSelectedIndex.firstLevelIndex].value\r\n        : (this.model[nextSelectedIndex.firstLevelIndex] as ComboBoxItemGroup)\r\n            .items[nextSelectedIndex.secondLevelIndex].value;\r\n\r\n    if (this.currentSelectedValue !== newSelectedValue) {\r\n      this.currentSelectedValue = newSelectedValue;\r\n      this.#focusSelectAfterNextRender = true;\r\n    }\r\n  };\r\n\r\n  // Keyboard events when the control has no filters\r\n  #keyEventsNoFiltersDictionary: {\r\n    [key in KeyDownNoFiltersEvents]: (event: KeyboardEvent) => void;\r\n  } = {\r\n    ArrowUp: (event: KeyboardEvent) =>\r\n      this.#selectNextIndex(\r\n        event,\r\n        findSelectedIndex(this.#valueToItemInfo, this.currentSelectedValue),\r\n        -1,\r\n        this.filterType !== \"none\" && !this.#isModelAlreadyFiltered(),\r\n        this.#displayedValues\r\n      ),\r\n\r\n    ArrowDown: (event: KeyboardEvent) =>\r\n      this.#selectNextIndex(\r\n        event,\r\n        findSelectedIndex(this.#valueToItemInfo, this.currentSelectedValue),\r\n        1,\r\n        this.filterType !== \"none\" && !this.#isModelAlreadyFiltered(),\r\n        this.#displayedValues\r\n      ),\r\n\r\n    Home: (event: KeyboardEvent) =>\r\n      this.#selectNextIndex(\r\n        event,\r\n        {\r\n          type: \"first-level\",\r\n          firstLevelIndex: -1\r\n        }, // The algorithm will sum 1 to the start index\r\n        1,\r\n        this.filterType !== \"none\" && !this.#isModelAlreadyFiltered(),\r\n        this.#displayedValues\r\n      ),\r\n\r\n    End: (event: KeyboardEvent) =>\r\n      this.#selectNextIndex(\r\n        event,\r\n        {\r\n          type: \"first-level\",\r\n          firstLevelIndex: this.model.length\r\n        }, // The algorithm will sum -1 to the start index\r\n        -1,\r\n        this.filterType !== \"none\" && !this.#isModelAlreadyFiltered(),\r\n        this.#displayedValues\r\n      ),\r\n\r\n    Enter: () => {\r\n      // The focus must return to the Host when closing the popover\r\n      if (this.expanded) {\r\n        this.el.focus();\r\n      }\r\n\r\n      this.expanded = !this.expanded;\r\n    },\r\n\r\n    Space: event => {\r\n      event.preventDefault(); // Stop space key from scrolling\r\n\r\n      // Only expands the ComboBox\r\n      this.expanded ||= true;\r\n    },\r\n\r\n    Tab: event => {\r\n      // The focus must return to the Host when tabbing with the popover\r\n      // expanded\r\n      if (this.expanded) {\r\n        event.preventDefault();\r\n\r\n        this.el.focus();\r\n        this.expanded = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  // Keyboard events when the control has filters\r\n  #keyEventsWithFiltersDictionary: {\r\n    [key in KeyDownWithFiltersEvents]: (event: KeyboardEvent) => void;\r\n  } = {\r\n    ArrowUp: (event: KeyboardEvent) => {\r\n      if (this.expanded) {\r\n        this.#keyEventsNoFiltersDictionary.ArrowUp(event);\r\n      } else {\r\n        this.expanded = true;\r\n      }\r\n    },\r\n\r\n    ArrowDown: (event: KeyboardEvent) => {\r\n      if (this.expanded) {\r\n        this.#keyEventsNoFiltersDictionary.ArrowDown(event);\r\n      } else {\r\n        this.expanded = true;\r\n      }\r\n    },\r\n\r\n    Enter: () => {\r\n      // The focus must return to the Host when closing the popover\r\n      if (this.expanded) {\r\n        this.el.focus();\r\n        this.expanded = false;\r\n      }\r\n    },\r\n\r\n    Tab: this.#keyEventsNoFiltersDictionary.Tab\r\n  };\r\n\r\n  // Refs\r\n  #maskRef: HTMLDivElement;\r\n  #inputRef: HTMLInputElement;\r\n  #selectRef: HTMLSelectElement | undefined;\r\n\r\n  /**\r\n   * When the combo-box is expanded, the visually selected value must change,\r\n   * but in the interface the `value` property must only change when the\r\n   * popover is closed.\r\n   * This state help us to render the visually selected value, without updating\r\n   * the `value` property in the interface.\r\n   */\r\n  @State() currentSelectedValue: string;\r\n\r\n  @State() expanded = false;\r\n  @Watch(\"expanded\")\r\n  handleExpandedChange(newExpandedValue: boolean) {\r\n    this.#firstExpanded = true;\r\n\r\n    if (newExpandedValue && !mobileDevice) {\r\n      this.#focusSelectAfterNextRender = true;\r\n\r\n      // When the control is expanded and has filters applied, we should\r\n      // refresh the rendered items without any debounce\r\n      if (this.filterType !== \"none\") {\r\n        this.#scheduleFilterProcessing(\"immediate\");\r\n      }\r\n    }\r\n  }\r\n\r\n  @AttachInternals() internals: ElementInternals;\r\n\r\n  @Element() el: HTMLChComboBoxElement;\r\n\r\n  /**\r\n   * Specifies a short string, typically 1 to 3 words, that authors associate\r\n   * with an element to provide users of assistive technologies with a label\r\n   * for the element.\r\n   */\r\n  @Prop() readonly accessibleName?: string;\r\n\r\n  /**\r\n   * This attribute lets you specify if the element is disabled.\r\n   * If disabled, it will not fire any user interaction related event\r\n   * (for example, click event).\r\n   */\r\n  @Prop() readonly disabled: boolean = false;\r\n\r\n  /**\r\n   * Specifies whether the items should not stay rendered in the DOM if the\r\n   * control is closed.\r\n   * `true` to destroy the rendered items when the control is closed.\r\n   * Note: By default, the control does not rendered the items until the first\r\n   * expansion. The same applies if the control have groups.\r\n   */\r\n  @Prop() readonly destroyItemsOnClose: boolean = false;\r\n\r\n  /**\r\n   * This property lets you determine the expression that will be applied to the\r\n   * filter.\r\n   * Only works if `filterType = \"caption\" | \"value\"`.\r\n   */\r\n  @Prop({ mutable: true }) filter: string;\r\n  @Watch(\"filter\")\r\n  filterChanged() {\r\n    if (this.filterType === \"caption\" || this.filterType === \"value\") {\r\n      this.#scheduleFilterProcessing();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This property lets you determine the debounce time (in ms) that the\r\n   * control waits until it processes the changes to the filter property.\r\n   * Consecutive changes to the `filter` property between this range, reset the\r\n   * timeout to process the filter.\r\n   * Only works if `filterType = \"caption\" | \"value\"`.\r\n   */\r\n  @Prop() readonly filterDebounce: number = 250;\r\n  @Watch(\"filterDebounce\")\r\n  filterDebounceChanged() {\r\n    if (this.filterType === \"caption\" || this.filterType === \"value\") {\r\n      this.#scheduleFilterProcessing();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This property lets you determine the options that will be applied to the\r\n   * filter.\r\n   */\r\n  @Prop() readonly filterOptions: ComboBoxFilterOptions = {};\r\n  @Watch(\"filterOptions\")\r\n  filterOptionsChanged() {\r\n    this.#scheduleFilterProcessing(\"immediate\");\r\n  }\r\n\r\n  /**\r\n   * This attribute lets you define what kind of filter is applied to items.\r\n   * Only items that satisfy the filter predicate will be displayed.\r\n   *\r\n   * | Value     | Details                                                                                       |\r\n   * | --------- | --------------------------------------------------------------------------------------------- |\r\n   * | `caption` | Show only the items whose `caption` satisfies the regex determinate by the `filter` property. |\r\n   * | `value`   | Show only the items whose `value` satisfies the regex determinate by the `filter` property.   |\r\n   * | `none`    | Show all items.                                                                               |\r\n   */\r\n  @Prop() readonly filterType: ComboBoxFilterType = \"none\";\r\n  @Watch(\"filterType\")\r\n  filterTypeChanged() {\r\n    this.#scheduleFilterProcessing(\"immediate\");\r\n  }\r\n\r\n  /**\r\n   * Specifies the items of the control\r\n   */\r\n  @Prop() readonly model: ComboBoxModel = [];\r\n  @Watch(\"model\")\r\n  modelChanged(newModel: ComboBoxModel) {\r\n    this.#mapValuesToItemInfo(newModel);\r\n  }\r\n\r\n  /**\r\n   * This attribute indicates that multiple options can be selected in the list.\r\n   * If it is not specified, then only one option can be selected at a time.\r\n   * When multiple is specified, the control will show a scrolling list box\r\n   * instead of a single line dropdown.\r\n   */\r\n  @Prop() readonly multiple: boolean = false;\r\n\r\n  /**\r\n   * A hint to the user of what can be entered in the control. Same as\r\n   * [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder)\r\n   * attribute for `input` elements.\r\n   */\r\n  @Prop() readonly placeholder: string;\r\n\r\n  /**\r\n   * This attribute indicates that the user cannot modify the value of the control.\r\n   * Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)\r\n   * attribute for `input` elements.\r\n   */\r\n  @Prop() readonly readonly: boolean = false;\r\n\r\n  /**\r\n   * Specifies whether the control can be resized. If `true` the control can be\r\n   * resized at runtime by dragging the edges or corners.\r\n   */\r\n  @Prop() readonly resizable: boolean = false;\r\n\r\n  /**\r\n   * Specifies the value (selected item) of the control.\r\n   */\r\n  @Prop({ mutable: true }) value?: string;\r\n  @Watch(\"value\")\r\n  valueChange(newValue: string) {\r\n    this.currentSelectedValue = newValue;\r\n    this.filter = this.#valueToItemInfo.get(newValue)?.caption;\r\n\r\n    // Update form value\r\n    this.internals.setFormValue(newValue);\r\n  }\r\n\r\n  /**\r\n   * Emitted when a change to the element's filter is committed by the user.\r\n   * Only applies if `filterType !== \"none\"`. It contains the information about\r\n   * the new filter value.\r\n   *\r\n   * This event is debounced by the `filterDebounce` value.\r\n   */\r\n  @Event() filterChange: EventEmitter<string>;\r\n\r\n  /**\r\n   * The `input` event is emitted when a change to the element's value is\r\n   * committed by the user.\r\n   */\r\n  @Event() input: EventEmitter<string>;\r\n\r\n  #scheduleFilterProcessing = (newImmediateFilter?: ImmediateFilter) => {\r\n    this.#applyFilters = true;\r\n\r\n    if (newImmediateFilter !== undefined) {\r\n      this.#immediateFilter ??= newImmediateFilter;\r\n    }\r\n  };\r\n\r\n  #filterFunction = (modelIsAlreadyFiltered: boolean) => {\r\n    // Reset immediate filter\r\n    this.#immediateFilter = undefined;\r\n\r\n    // New filter value\r\n    this.filterChange.emit(this.filter);\r\n\r\n    if (modelIsAlreadyFiltered) {\r\n      return;\r\n    }\r\n\r\n    this.#displayedValues.clear();\r\n\r\n    const filterOptions: ComboBoxFilterInfo = {\r\n      filter: this.filter,\r\n      filterOptions: this.filterOptions\r\n    };\r\n\r\n    for (let index = 0; index < this.model.length; index++) {\r\n      const item = this.model[index];\r\n\r\n      filterSubModel(\r\n        item,\r\n        this.filterType,\r\n        filterOptions,\r\n        this.#displayedValues\r\n      );\r\n    }\r\n\r\n    // Remove the selected value if it is no longer rendered\r\n    if (!this.#displayedValues.has(this.currentSelectedValue)) {\r\n      this.currentSelectedValue = undefined;\r\n    }\r\n  };\r\n\r\n  #updateFilters = () => {\r\n    if (this.filterType === \"none\") {\r\n      this.#displayedValues = undefined;\r\n      return;\r\n    }\r\n\r\n    const modelIsAlreadyFiltered = this.#isModelAlreadyFiltered();\r\n\r\n    // Remove queued filter processing\r\n    clearTimeout(this.#queuedFilterId);\r\n\r\n    const processWithDebounce =\r\n      this.filterDebounce > 0 &&\r\n      (this.filterType === \"caption\" || this.filterType === \"value\");\r\n\r\n    // Check if the model already contains the filtered items\r\n    if (!modelIsAlreadyFiltered) {\r\n      this.#displayedValues ??= new Set();\r\n    }\r\n\r\n    // Check if should filter with debounce\r\n    if (processWithDebounce && this.#immediateFilter !== \"immediate\") {\r\n      this.#queuedFilterId = setTimeout(() => {\r\n        this.#filterFunction(modelIsAlreadyFiltered);\r\n        forceUpdate(this); // After the filter processing is completed, force a re-render\r\n      }, this.filterDebounce);\r\n    }\r\n    // No debounce\r\n    else {\r\n      this.#filterFunction(modelIsAlreadyFiltered);\r\n    }\r\n  };\r\n\r\n  #mapValuesToItemInfo = (model: ComboBoxModel) => {\r\n    this.#valueToItemInfo.clear();\r\n\r\n    if (model == null) {\r\n      return;\r\n    }\r\n\r\n    model.forEach((item, firstLevelIndex) => {\r\n      const itemGroup = item as ComboBoxItemGroup;\r\n      const subItems = itemGroup.items;\r\n\r\n      if (subItems != null) {\r\n        // First level item\r\n        this.#valueToItemInfo.set(itemGroup.value, {\r\n          caption: itemGroup.caption,\r\n          index: {\r\n            type: \"first-level\",\r\n            firstLevelIndex: firstLevelIndex\r\n          },\r\n          firstExpanded: itemGroup.expandable && !!itemGroup.expanded\r\n        });\r\n\r\n        // Second level items\r\n        subItems.forEach((subItem, secondLevelIndex) => {\r\n          this.#valueToItemInfo.set(subItem.value, {\r\n            caption: subItem.caption,\r\n            index: {\r\n              type: \"nested\",\r\n              firstLevelIndex: firstLevelIndex,\r\n              secondLevelIndex: secondLevelIndex\r\n            }\r\n          });\r\n        });\r\n      }\r\n      // First level item\r\n      else {\r\n        this.#valueToItemInfo.set(item.value, {\r\n          caption: item.caption,\r\n          index: {\r\n            type: \"first-level\",\r\n            firstLevelIndex: firstLevelIndex\r\n          }\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  #checkAndEmitValueChange = () => {\r\n    if (!this.expanded && this.currentSelectedValue !== this.value) {\r\n      this.value = this.currentSelectedValue;\r\n\r\n      // Emit event\r\n      this.input.emit(this.value);\r\n    }\r\n  };\r\n\r\n  #itemLeafParts = (\r\n    item: ComboBoxItemLeaf,\r\n    insideAGroup: boolean,\r\n    isDisabled: boolean\r\n  ) =>\r\n    `item${insideAGroup ? \" nested\" : \"\"}${\r\n      isDisabled ? ` ${DISABLED_PART}` : \"\"\r\n    }${item.value === this.currentSelectedValue ? ` ${SELECTED_PART}` : \"\"}`;\r\n\r\n  #setResizeObserver = () => {\r\n    this.#borderSizeRAF = new SyncWithRAF();\r\n    this.#resizeObserver = new ResizeObserver(this.#updateBorderSizeRAF);\r\n\r\n    // Observe the size of the edges to know if the border\r\n    this.#resizeObserver.observe(this.el, { box: \"border-box\" });\r\n    this.#resizeObserver.observe(this.#maskRef ?? this.#selectRef);\r\n  };\r\n\r\n  #updateBorderSizeRAF = () => {\r\n    this.#borderSizeRAF.perform(this.#updateBorderSize);\r\n  };\r\n\r\n  #updateBorderSize = () => {\r\n    // - - - - - - - - - - - - - DOM read operations - - - - - - - - - - - - -\r\n    const computedStyle = getComputedStyle(this.el);\r\n\r\n    const negatedBorderInlineStartWidth = negateBorderValue(\r\n      computedStyle.borderInlineStartWidth\r\n    );\r\n    const negatedBorderInlineEndWidth = negateBorderValue(\r\n      computedStyle.borderInlineEndWidth\r\n    );\r\n    const negatedBorderBlockStartWidth = negateBorderValue(\r\n      computedStyle.borderBlockStartWidth\r\n    );\r\n    const negatedBorderBlockEndWidth = negateBorderValue(\r\n      computedStyle.borderBlockEndWidth\r\n    );\r\n\r\n    if (\r\n      this.#lastMaskInlineStart === negatedBorderInlineStartWidth &&\r\n      this.#lastMaskInlineEnd === negatedBorderInlineEndWidth &&\r\n      this.#lastMaskBlockStart === negatedBorderBlockStartWidth &&\r\n      this.#lastMaskBlockEnd === negatedBorderBlockEndWidth\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n    this.el.style.setProperty(\r\n      COMBO_BOX_MASK_INLINE_START,\r\n      negatedBorderInlineStartWidth\r\n    );\r\n\r\n    this.el.style.setProperty(\r\n      COMBO_BOX_MASK_INLINE_END,\r\n      negatedBorderInlineEndWidth\r\n    );\r\n\r\n    this.el.style.setProperty(\r\n      COMBO_BOX_MASK_BLOCK_START,\r\n      negatedBorderBlockStartWidth\r\n    );\r\n\r\n    this.el.style.setProperty(\r\n      COMBO_BOX_MASK_BLOCK_END,\r\n      negatedBorderBlockEndWidth\r\n    );\r\n\r\n    // Store borders to avoid an extra call from the resize observer due to\r\n    // the size of the mask is updated\r\n    this.#lastMaskInlineStart = negatedBorderInlineStartWidth;\r\n    this.#lastMaskInlineEnd = negatedBorderInlineEndWidth;\r\n    this.#lastMaskBlockStart = negatedBorderBlockStartWidth;\r\n    this.#lastMaskBlockEnd = negatedBorderBlockEndWidth;\r\n  };\r\n\r\n  #handleSelectChange = (event: Event) => {\r\n    event.preventDefault();\r\n\r\n    this.value = this.#selectRef.value;\r\n    this.currentSelectedValue = this.#selectRef.value;\r\n\r\n    // Emit event\r\n    this.input.emit(this.value);\r\n  };\r\n\r\n  #handleExpandedChange = (event: MouseEvent) => {\r\n    event.stopPropagation();\r\n    this.expanded = !this.expanded;\r\n  };\r\n\r\n  #handleExpandedChangeWithKeyBoard = (event: KeyboardEvent) => {\r\n    if (this.filterType === \"none\") {\r\n      const keyboardHandler = this.#keyEventsNoFiltersDictionary[event.code];\r\n\r\n      if (keyboardHandler) {\r\n        keyboardHandler(event);\r\n      }\r\n    }\r\n    // Keyboard implementation for filters\r\n    else {\r\n      if (\r\n        event.code === KEY_CODES.ESCAPE ||\r\n        event.code === KEY_CODES.HOME ||\r\n        event.code === KEY_CODES.END ||\r\n        event.code === KEY_CODES.ARROW_LEFT ||\r\n        event.code === KEY_CODES.ARROW_RIGHT\r\n      ) {\r\n        return;\r\n      }\r\n      const keyboardHandler = this.#keyEventsWithFiltersDictionary[event.code];\r\n\r\n      if (keyboardHandler) {\r\n        keyboardHandler(event);\r\n        return;\r\n      }\r\n      this.expanded ||= true;\r\n    }\r\n\r\n    this.#checkAndEmitValueChange();\r\n  };\r\n\r\n  #handlePopoverClose = (event: ChPopoverCustomEvent<any>) => {\r\n    event.stopPropagation();\r\n\r\n    // The focus must return to the Host when the popover is closed using the\r\n    // Escape key\r\n    this.expanded = false;\r\n\r\n    // TODO: When destroyItemsOnClose === true, StencilJS would throw 'The\r\n    // \"popoverClosed\" event was emitted, but the dispatcher node is no longer\r\n    // connected to the dom.', because the popoverOnClose event is emitted twice\r\n    // in the ch-popover\r\n\r\n    // Return the focus to the control if the popover was closed with the\r\n    // escape key or by clicking again the combo-box\r\n    if (focusComposedPath().includes(this.el)) {\r\n      this.el.focus();\r\n    }\r\n\r\n    this.#checkAndEmitValueChange();\r\n  };\r\n\r\n  #handleInputFilterChange = (event: InputEvent) => {\r\n    event.stopPropagation();\r\n    this.filter = this.#inputRef.value;\r\n  };\r\n\r\n  #displayPopoverWhenFiltersApplied = (event: MouseEvent) => {\r\n    event.stopPropagation();\r\n    this.expanded = true;\r\n  };\r\n\r\n  #focusInnerInputWhenFiltersApplied = (event: MouseEvent) => {\r\n    event.stopPropagation();\r\n    this.#inputRef.focus();\r\n  };\r\n\r\n  #updateCurrentSelectedValue = (itemValue: string) => (event: MouseEvent) => {\r\n    event.stopPropagation();\r\n    this.currentSelectedValue = itemValue;\r\n  };\r\n\r\n  #selectedValue = (itemValue: string) => (event: MouseEvent) => {\r\n    event.stopPropagation();\r\n\r\n    this.expanded = false;\r\n    this.currentSelectedValue = itemValue;\r\n    this.#checkAndEmitValueChange();\r\n  };\r\n\r\n  #toggleExpandInGroup = (itemGroup: ComboBoxItemGroup) => () => {\r\n    this.#valueToItemInfo.get(itemGroup.value).firstExpanded = true;\r\n    itemGroup.expanded = !itemGroup.expanded;\r\n\r\n    forceUpdate(this);\r\n  };\r\n\r\n  #getItemImageCustomVars = (\r\n    item: ComboBoxItemModel,\r\n    hasImages: boolean,\r\n    hasStartImg: boolean,\r\n    hasEndImg: boolean\r\n  ) =>\r\n    hasImages\r\n      ? {\r\n          \"--ch-combo-box-item-start-img\": hasStartImg\r\n            ? `url(\"${item.startImgSrc}\")`\r\n            : null,\r\n          \"--ch-combo-box-item-end-img\": hasEndImg\r\n            ? `url(\"${item.endImgSrc}\")`\r\n            : null\r\n        }\r\n      : undefined;\r\n\r\n  #isModelAlreadyFiltered = () => this.filterOptions.alreadyProcessed === true;\r\n\r\n  #customItemRender =\r\n    (\r\n      insideAGroup: boolean,\r\n      disabled: boolean | undefined,\r\n      filtersAreApplied: boolean\r\n    ) =>\r\n    (item: ComboBoxItemModel, index: number) => {\r\n      if (\r\n        filtersAreApplied &&\r\n        !this.#isModelAlreadyFiltered() &&\r\n        !this.#displayedValues.has(item.value)\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      const hasStartImg = !!item.startImgSrc;\r\n      const hasEndImg = !!item.endImgSrc;\r\n      const hasImages = hasStartImg || hasEndImg;\r\n\r\n      const customVars = this.#getItemImageCustomVars(\r\n        item,\r\n        hasImages,\r\n        hasStartImg,\r\n        hasEndImg\r\n      );\r\n\r\n      // This variable inherits the disabled state from group parents. Useful\r\n      // to propagate the disabled state in the child buttons\r\n      const isDisabled = disabled ?? item.disabled;\r\n      const itemGroup = item as ComboBoxItemGroup;\r\n      const canAddListeners = !isDisabled && this.expanded;\r\n\r\n      return itemGroup.items != null ? (\r\n        <div\r\n          key={item.value}\r\n          aria-controls={itemGroup.expandable ? `${index}__content` : null}\r\n          aria-expanded={\r\n            itemGroup.expandable ? (!!itemGroup.expanded).toString() : null\r\n          }\r\n          aria-labelledby={index.toString()}\r\n          role=\"group\"\r\n          class=\"group\"\r\n          part={`group${isDisabled ? ` ${DISABLED_PART}` : \"\"}`}\r\n        >\r\n          {itemGroup.expandable ? (\r\n            <button\r\n              class={{\r\n                // eslint-disable-next-line camelcase\r\n                group__header: true,\r\n                \"group--expandable\": true,\r\n                \"group--collapsed\": !itemGroup.expanded\r\n              }}\r\n              part={`group__header expandable${isDisabled ? \" disabled\" : \"\"} ${\r\n                this.expanded ? \"expanded\" : \"collapsed\"\r\n              }`}\r\n              style={customVars}\r\n              disabled={isDisabled}\r\n              type=\"button\"\r\n              onClick={\r\n                canAddListeners ? this.#toggleExpandInGroup(itemGroup) : null\r\n              }\r\n            >\r\n              <span\r\n                class={{\r\n                  \"group__header-caption\": true,\r\n                  [`start-img-type--${\r\n                    item.startImgType ?? \"background\"\r\n                  } img--start`]: hasStartImg,\r\n                  [`end-img-type--${item.endImgType ?? \"background\"} img--end`]:\r\n                    hasEndImg\r\n                }}\r\n                part=\"group__header-caption\"\r\n              >\r\n                {item.caption}\r\n              </span>\r\n            </button>\r\n          ) : (\r\n            <span\r\n              id={index.toString()}\r\n              class={{\r\n                // eslint-disable-next-line camelcase\r\n                group__header: true,\r\n                [`start-img-type--${\r\n                  item.startImgType ?? \"background\"\r\n                } img--start`]: hasStartImg,\r\n                [`end-img-type--${item.endImgType ?? \"background\"} img--end`]:\r\n                  hasEndImg\r\n              }}\r\n              part={`group__header${this.disabled ? \" disabled\" : \"\"}`}\r\n              style={customVars}\r\n            >\r\n              {item.caption}\r\n            </span>\r\n          )}\r\n\r\n          <div\r\n            key={`${index}__content`}\r\n            id={itemGroup.expandable ? `${index}__content` : null}\r\n            class={{\r\n              // eslint-disable-next-line camelcase\r\n              group__content: true,\r\n              \"group__content--collapsed\":\r\n                itemGroup.expandable && !itemGroup.expanded\r\n            }}\r\n            part=\"group__content\"\r\n          >\r\n            {(!itemGroup.expandable ||\r\n              this.#valueToItemInfo.get(itemGroup.value).firstExpanded) &&\r\n              itemGroup.items.map(\r\n                this.#customItemRender(true, isDisabled, filtersAreApplied)\r\n              )}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <button\r\n          key={item.value}\r\n          role=\"option\"\r\n          aria-selected={item.value === this.currentSelectedValue}\r\n          tabindex=\"-1\"\r\n          class={\r\n            hasImages\r\n              ? {\r\n                  leaf: true,\r\n                  [`start-img-type--${\r\n                    item.startImgType ?? \"background\"\r\n                  } img--start`]: hasStartImg,\r\n                  [`end-img-type--${item.endImgType ?? \"background\"} img--end`]:\r\n                    hasEndImg\r\n                }\r\n              : undefined\r\n          }\r\n          part={this.#itemLeafParts(item, insideAGroup, isDisabled)}\r\n          style={customVars}\r\n          disabled={isDisabled}\r\n          type=\"button\"\r\n          onClick={canAddListeners ? this.#selectedValue(item.value) : null}\r\n          onMouseEnter={\r\n            canAddListeners\r\n              ? this.#updateCurrentSelectedValue(item.value)\r\n              : null\r\n          }\r\n        >\r\n          {item.caption}\r\n        </button>\r\n      );\r\n    };\r\n\r\n  #nativeItemRender = (item: ComboBoxItemModel) =>\r\n    (item as ComboBoxItemGroup).items != null ? (\r\n      <optgroup label={item.caption}>\r\n        {(item as ComboBoxItemGroup).items.map(this.#nativeItemRender)}\r\n      </optgroup>\r\n    ) : (\r\n      <option\r\n        key={item.value}\r\n        value={item.value}\r\n        disabled={item.disabled}\r\n        selected={item.value === this.value}\r\n      >\r\n        {item.caption}\r\n      </option>\r\n    );\r\n\r\n  #nativeRender = () => [\r\n    <span\r\n      aria-hidden={!this.currentSelectedValue ? \"true\" : null}\r\n      class=\"value\"\r\n    >\r\n      {this.currentSelectedValue\r\n        ? this.#valueToItemInfo.get(this.currentSelectedValue)?.caption ??\r\n          this.placeholder\r\n        : this.placeholder}\r\n    </span>,\r\n\r\n    <select\r\n      aria-label={this.accessibleName ?? this.#accessibleNameFromExternalLabel}\r\n      disabled={this.disabled}\r\n      onChange={!this.disabled ? this.#handleSelectChange : null}\r\n      ref={el => (this.#selectRef = el)}\r\n    >\r\n      {this.model.map(this.#nativeItemRender)}\r\n    </select>\r\n  ];\r\n\r\n  connectedCallback() {\r\n    this.#popoverId ??= `ch-combo-box-popover-${autoId++}`;\r\n    this.#mapValuesToItemInfo(this.model);\r\n\r\n    this.internals.setFormValue(this.value);\r\n    this.currentSelectedValue = this.value;\r\n\r\n    this.filter = this.#valueToItemInfo.get(this.value)?.caption;\r\n\r\n    const labels = this.internals.labels;\r\n\r\n    // Get external aria-label\r\n    if (!this.accessibleName && labels?.length > 0) {\r\n      this.#accessibleNameFromExternalLabel = labels[0].textContent.trim();\r\n    }\r\n  }\r\n\r\n  // Don't trigger the render method if the only changed property is \"filter\"\r\n  componentShouldUpdate(_newValue, _oldValue, name: string) {\r\n    if (name === \"filter\") {\r\n      // We need to check this condition here, because only the \"filter\" prop\r\n      // could be updated and because we return false (to avoid extra re-renders)\r\n      // the componentWillRender method won't be dispatched\r\n      if (this.#applyFilters) {\r\n        this.#updateFilters(); // TODO: THERE IS A BUG IF THE COMBO-BOX STARTS WITH FILTERS APPLIED\r\n        this.#applyFilters = false;\r\n      }\r\n\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  componentWillRender() {\r\n    // If the \"filter\" property was not updated, we still have to check if we\r\n    // should update filters. This verification MUST NOT be implemented in the\r\n    // componentShouldUpdate method, because not all properties are updated in\r\n    // that method, leaving to race-conditions in some cases when checking\r\n    // filters in the componentShouldUpdate method\r\n\r\n    if (this.#applyFilters) {\r\n      this.#updateFilters(); // TODO: THERE IS A BUG IF THE COMBO-BOX STARTS WITH FILTERS APPLIED\r\n      this.#applyFilters = false;\r\n    }\r\n  }\r\n\r\n  componentDidLoad() {\r\n    this.#setResizeObserver();\r\n  }\r\n\r\n  componentDidRender() {\r\n    // Focus the input when there are filters and the control is expanded\r\n    if (this.filterType !== \"none\" && this.expanded) {\r\n      this.#focusSelectAfterNextRender = false;\r\n      this.#inputRef.focus();\r\n      return;\r\n    }\r\n\r\n    // Only focus elements when filter are not applied\r\n    if (!this.#focusSelectAfterNextRender) {\r\n      return;\r\n    }\r\n    this.#focusSelectAfterNextRender = false;\r\n\r\n    const selectedElement = this.el.shadowRoot.querySelector(\r\n      SELECTED_ITEM_SELECTOR\r\n    ) as HTMLElement | undefined;\r\n\r\n    // Focus the selected element\r\n    if (selectedElement) {\r\n      // Wait until the JS has been executed to avoid race conditions when\r\n      // rendering elements in the top layer and trying to focus them\r\n      requestAnimationFrame(() => {\r\n        selectedElement.focus();\r\n      });\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    if (this.#resizeObserver) {\r\n      this.#resizeObserver.disconnect();\r\n      this.#resizeObserver = undefined; // Free the memory\r\n    }\r\n\r\n    this.#borderSizeRAF = undefined; // Free the memory\r\n  }\r\n\r\n  render() {\r\n    const filtersAreApplied = this.filterType !== \"none\";\r\n    const comboBoxIsInteractive = !this.readonly && !this.disabled;\r\n    const destroyRender = this.destroyItemsOnClose && !this.expanded;\r\n\r\n    return (\r\n      <Host\r\n        // Make the host focusable since the input is disabled when there are no\r\n        // filters\r\n        tabindex={\r\n          !mobileDevice && !filtersAreApplied && !this.disabled ? \"0\" : null\r\n        }\r\n        class={this.disabled ? \"ch-disabled\" : null}\r\n        onKeyDown={\r\n          !mobileDevice && comboBoxIsInteractive\r\n            ? this.#handleExpandedChangeWithKeyBoard\r\n            : null\r\n        }\r\n        onClick={\r\n          !mobileDevice && filtersAreApplied && comboBoxIsInteractive\r\n            ? this.#focusInnerInputWhenFiltersApplied\r\n            : null\r\n        }\r\n      >\r\n        {mobileDevice\r\n          ? this.#nativeRender()\r\n          : [\r\n              <div\r\n                key=\"mask\"\r\n                // This mask is used to capture click events that must open the\r\n                // popover. If we capture click events in the Host, clicking external\r\n                // label would open the combo-box's window\r\n                aria-hidden=\"true\"\r\n                class={{\r\n                  mask: true,\r\n                  \"mask--no-filters\": this.filterType === \"none\"\r\n                }}\r\n                onClickCapture={\r\n                  !filtersAreApplied && comboBoxIsInteractive\r\n                    ? this.#handleExpandedChange\r\n                    : null\r\n                }\r\n                ref={el => (this.#maskRef = el)}\r\n              >\r\n                <input\r\n                  // We must place the input inside the mask, otherwise it\r\n                  // won't stretch to the Host size\r\n                  key=\"combobox\"\r\n                  role=\"combobox\"\r\n                  aria-controls=\"popover\"\r\n                  // This reset is necessary, since we use \"disabled\" to\r\n                  // disallow the focus and text selection in the input when\r\n                  // the combo-box has no filters\r\n                  aria-disabled={\r\n                    !this.disabled && !filtersAreApplied ? \"false\" : null\r\n                  }\r\n                  aria-expanded={this.expanded.toString()}\r\n                  aria-haspopup=\"true\"\r\n                  aria-label={\r\n                    this.accessibleName ?? this.#accessibleNameFromExternalLabel\r\n                  }\r\n                  autocomplete=\"off\"\r\n                  class={{\r\n                    value: true,\r\n                    \"value--filters\": filtersAreApplied,\r\n                    \"value--readonly\": !filtersAreApplied\r\n                  }}\r\n                  disabled={this.disabled || !filtersAreApplied}\r\n                  placeholder={this.placeholder}\r\n                  readOnly={this.readonly || !filtersAreApplied}\r\n                  value={\r\n                    filtersAreApplied\r\n                      ? this.filter\r\n                      : this.#valueToItemInfo.get(this.currentSelectedValue)\r\n                          ?.caption\r\n                  }\r\n                  onClickCapture={\r\n                    filtersAreApplied && !this.expanded && comboBoxIsInteractive\r\n                      ? this.#displayPopoverWhenFiltersApplied\r\n                      : null\r\n                  }\r\n                  onInputCapture={\r\n                    filtersAreApplied && comboBoxIsInteractive\r\n                      ? this.#handleInputFilterChange\r\n                      : null\r\n                  }\r\n                  ref={el => (this.#inputRef = el)}\r\n                ></input>\r\n              </div>,\r\n\r\n              this.#firstExpanded && !destroyRender && (\r\n                <ch-popover\r\n                  key=\"popover\"\r\n                  id=\"popover\"\r\n                  role=\"listbox\"\r\n                  aria-hidden=\"false\"\r\n                  part=\"window\"\r\n                  actionById\r\n                  actionElement={this.el as unknown as HTMLButtonElement} // This is a WA. We should remove it\r\n                  blockAlign=\"outside-end\"\r\n                  inlineAlign=\"inside-start\"\r\n                  closeOnClickOutside\r\n                  hidden={!this.expanded}\r\n                  popover=\"manual\"\r\n                  resizable={this.resizable}\r\n                  inlineSizeMatch=\"action-element-as-minimum\"\r\n                  positionTry=\"flip-block\"\r\n                  onPopoverClosed={\r\n                    this.expanded && comboBoxIsInteractive\r\n                      ? this.#handlePopoverClose\r\n                      : null\r\n                  }\r\n                >\r\n                  <div class=\"window__content\" part=\"window__content\">\r\n                    {this.model.map(\r\n                      this.#customItemRender(\r\n                        false,\r\n                        undefined,\r\n                        filtersAreApplied\r\n                      )\r\n                    )}\r\n                  </div>\r\n                </ch-popover>\r\n              )\r\n            ]}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","import { KEY_CODES } from \"../../common/reserverd-names\";\r\n\r\n// Keys\r\ntype DropDownKeyDownEvents =\r\n  | typeof KEY_CODES.ARROW_UP\r\n  | typeof KEY_CODES.ARROW_RIGHT\r\n  | typeof KEY_CODES.ARROW_DOWN\r\n  | typeof KEY_CODES.ARROW_LEFT\r\n  | typeof KEY_CODES.HOME\r\n  | typeof KEY_CODES.END\r\n  | typeof KEY_CODES.ESCAPE;\r\n\r\nconst DROPDOWN_TAG_NAME = \"ch-dropdown\";\r\nconst FIRST_DROPDOWN = `:scope>${DROPDOWN_TAG_NAME}` as const;\r\nconst LAST_DROPDOWN = `:scope>${DROPDOWN_TAG_NAME}:last-of-type` as const;\r\n\r\nconst elementIsDropdown = (element: Element) =>\r\n  element?.tagName?.toLowerCase() === DROPDOWN_TAG_NAME;\r\n\r\nconst getFocusedDropdown = (event: KeyboardEvent) =>\r\n  event.target as HTMLChDropdownElement;\r\n\r\n// First level\r\nconst getDropdownFirstItem = (dropdown: HTMLChDropdownElement) =>\r\n  dropdown.querySelector(FIRST_DROPDOWN) as HTMLChDropdownElement;\r\n\r\nconst getDropdownLastItem = (dropdown: HTMLChDropdownElement) =>\r\n  dropdown.querySelector(LAST_DROPDOWN) as HTMLChDropdownElement;\r\n\r\n// Sibling\r\nconst getFirstSiblingItem = (sibling: HTMLChDropdownElement) =>\r\n  sibling.parentElement.querySelector(FIRST_DROPDOWN) as HTMLChDropdownElement;\r\n\r\nconst getLastSiblingItem = (dropdown: HTMLChDropdownElement) =>\r\n  dropdown.parentElement.querySelector(LAST_DROPDOWN) as HTMLChDropdownElement;\r\n\r\nexport const dropdownKeyEventsDictionary: {\r\n  [key in DropDownKeyDownEvents]: (event?: KeyboardEvent) => void;\r\n} = {\r\n  [KEY_CODES.ARROW_DOWN]: event => {\r\n    const focusedElement = getFocusedDropdown(event);\r\n    if (!elementIsDropdown(focusedElement)) {\r\n      return;\r\n    }\r\n    event.preventDefault(); // Prevent window's scroll\r\n\r\n    if (focusedElement.level === -1) {\r\n      getDropdownFirstItem(focusedElement).focusElement();\r\n      return;\r\n    }\r\n\r\n    // The focus was in a subitem. Focus the next subitem\r\n    let nextSiblingToFocus =\r\n      focusedElement.nextElementSibling as HTMLChDropdownElement;\r\n\r\n    if (!elementIsDropdown(nextSiblingToFocus)) {\r\n      nextSiblingToFocus = getFirstSiblingItem(focusedElement);\r\n    }\r\n    nextSiblingToFocus.focusElement();\r\n  },\r\n\r\n  [KEY_CODES.ARROW_UP]: event => {\r\n    const focusedElement = getFocusedDropdown(event);\r\n    if (!elementIsDropdown(focusedElement)) {\r\n      return;\r\n    }\r\n    event.preventDefault(); // Prevent window's scroll\r\n\r\n    if (focusedElement.level === -1) {\r\n      getDropdownLastItem(focusedElement).focusElement();\r\n      return;\r\n    }\r\n\r\n    // The focus was in a subitem. Focus the next subitem\r\n    let nextSiblingToFocus =\r\n      focusedElement.previousElementSibling as HTMLChDropdownElement;\r\n\r\n    if (!elementIsDropdown(nextSiblingToFocus)) {\r\n      nextSiblingToFocus = getLastSiblingItem(focusedElement);\r\n    }\r\n    nextSiblingToFocus.focusElement();\r\n  },\r\n\r\n  [KEY_CODES.ARROW_RIGHT]: async event => {\r\n    const focusedElement = getFocusedDropdown(event);\r\n    if (!elementIsDropdown(focusedElement)) {\r\n      return;\r\n    }\r\n    event.preventDefault(); // Prevent window's scroll\r\n\r\n    if (focusedElement.level === -1) {\r\n      return;\r\n    }\r\n\r\n    await focusedElement.expandDropdown();\r\n\r\n    // Wait until the dropdown content has been rendered\r\n    requestAnimationFrame(() => {\r\n      getDropdownFirstItem(focusedElement).focusElement();\r\n    });\r\n  },\r\n\r\n  [KEY_CODES.ARROW_LEFT]: async event => {\r\n    const focusedElement = getFocusedDropdown(event);\r\n    if (!elementIsDropdown(focusedElement)) {\r\n      return;\r\n    }\r\n    event.preventDefault(); // Prevent window's scroll\r\n\r\n    if (focusedElement.level === -1) {\r\n      return;\r\n    }\r\n\r\n    const parentDropdown =\r\n      focusedElement.parentElement as HTMLChDropdownElement;\r\n\r\n    await parentDropdown.collapseDropdown();\r\n    parentDropdown.focusElement();\r\n  },\r\n\r\n  [KEY_CODES.HOME]: event => {\r\n    const focusedElement = getFocusedDropdown(event);\r\n    if (!elementIsDropdown(focusedElement)) {\r\n      return;\r\n    }\r\n    event.preventDefault(); // Prevent window's scroll\r\n\r\n    getFirstSiblingItem(focusedElement).focusElement();\r\n  },\r\n\r\n  [KEY_CODES.END]: event => {\r\n    const focusedElement = getFocusedDropdown(event);\r\n    if (!elementIsDropdown(focusedElement)) {\r\n      return;\r\n    }\r\n    event.preventDefault(); // Prevent window's scroll\r\n\r\n    getLastSiblingItem(focusedElement).focusElement();\r\n  },\r\n\r\n  [KEY_CODES.ESCAPE]: () => {\r\n    // this.#closeDropdown();\r\n    // this.#returnFocusToButton();\r\n  }\r\n};\r\n","ch-dropdown-render {\r\n  display: contents;\r\n}\r\n\r\n.ch-dropdown-separator {\r\n  display: grid;\r\n  block-size: 1px;\r\n  background-color: color-mix(in srgb, currentColor 25%, transparent);\r\n  pointer-events: none;\r\n}\r\n","import { Component, Element, forceUpdate, h, Prop } from \"@stencil/core\";\r\nimport { DropdownItemModel, DropdownModel } from \"./types\";\r\nimport { DropdownPosition } from \"./internal/dropdown/types\";\r\nimport { fromGxImageToURL } from \"../tree-view/genexus-implementation\";\r\nimport { dropdownKeyEventsDictionary } from \"./utils\";\r\nimport { DROPDOWN_EXPORT_PARTS } from \"../../common/reserverd-names\";\r\n\r\n@Component({\r\n  tag: \"ch-dropdown-render\",\r\n  styleUrl: \"dropdown-render.scss\",\r\n  shadow: false // Necessary to avoid focus capture\r\n})\r\nexport class ChDropdownRender {\r\n  #showHeader = false;\r\n  #showFooter = false;\r\n\r\n  #mainDropdownExpanded = false;\r\n\r\n  @Element() el: HTMLChDropdownRenderElement;\r\n\r\n  /**\r\n   * This attribute lets you specify the label for the first expandable button.\r\n   * Important for accessibility.\r\n   */\r\n  @Prop() readonly buttonAccessibleName: string;\r\n\r\n  /**\r\n   * A CSS class to set as the `ch-dropdown` element class.\r\n   */\r\n  @Prop() readonly cssClass: string = \"dropdown\";\r\n\r\n  /**\r\n   * Specifies the parts that are exported by the internal dropdown. This\r\n   * property is useful to override the exported parts.\r\n   */\r\n  @Prop() readonly exportParts: string = DROPDOWN_EXPORT_PARTS;\r\n\r\n  /**\r\n   * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.\r\n   */\r\n  @Prop() readonly gxImageConstructor: (name: string) => any;\r\n\r\n  /**\r\n   * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.\r\n   */\r\n  @Prop() readonly gxSettings: any;\r\n\r\n  /**\r\n   * This callback is executed when an item is clicked.\r\n   */\r\n  @Prop() readonly itemClickCallback: (\r\n    event: UIEvent,\r\n    target: string,\r\n    itemId: string\r\n  ) => void;\r\n\r\n  /**\r\n   * This property lets you define the model of the ch-dropdown control.\r\n   */\r\n  @Prop() readonly model: DropdownModel;\r\n\r\n  /**\r\n   * Specifies the position of the dropdown section that is placed relative to\r\n   * the expandable button.\r\n   */\r\n  @Prop() readonly position: DropdownPosition = \"Center_OutsideEnd\";\r\n\r\n  /**\r\n   * A CSS class to set as the `ch-dropdown-item` element class.\r\n   * This default class is used for the items that don't have an explicit class.\r\n   */\r\n  @Prop() readonly separatorCssClass: string = \"dropdown-separator\";\r\n\r\n  /**\r\n   * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.\r\n   */\r\n  @Prop() readonly useGxRender: boolean = false;\r\n\r\n  // /**\r\n  //  * Fired when the visibility of the dropdown section is changed\r\n  //  */\r\n  // @Event() expandedChange: EventEmitter<boolean>;\r\n\r\n  #handleItemClick = (target: string, itemId: string) => (event: UIEvent) => {\r\n    if (this.itemClickCallback) {\r\n      this.itemClickCallback(event, target, itemId);\r\n    }\r\n  };\r\n\r\n  #renderItem = (level: number) => (item: DropdownItemModel) => {\r\n    const hasItems = item.items?.length > 0;\r\n\r\n    return [\r\n      <ch-dropdown\r\n        exportparts={this.exportParts}\r\n        id={item.id}\r\n        caption={item.caption}\r\n        class={item.class || this.cssClass}\r\n        endImgSrc={\r\n          this.useGxRender\r\n            ? fromGxImageToURL(\r\n                item.endImgSrc,\r\n                this.gxSettings,\r\n                this.gxImageConstructor\r\n              )\r\n            : item.endImgSrc\r\n        }\r\n        endImgType={item.endImgType ?? \"background\"}\r\n        href={item.link?.url}\r\n        itemClickCallback={this.#handleItemClick(item.link?.url, item.id)}\r\n        leaf={!hasItems}\r\n        level={level}\r\n        position={item.itemsPosition || \"OutsideEnd_InsideStart\"}\r\n        shortcut={item.shortcut}\r\n        startImgSrc={\r\n          this.useGxRender\r\n            ? fromGxImageToURL(\r\n                item.startImgSrc,\r\n                this.gxSettings,\r\n                this.gxImageConstructor\r\n              )\r\n            : item.startImgSrc\r\n        }\r\n        startImgType={item.startImgType ?? \"background\"}\r\n        onExpandedChange={\r\n          !item.wasExpanded ? this.#handleItemExpanded(item) : null\r\n        }\r\n      >\r\n        {hasItems &&\r\n          item.wasExpanded &&\r\n          item.items.map(this.#renderItem(level + 1))}\r\n\r\n        {\r\n          // Render a dummy element if the control was not expanded and has items\r\n          hasItems && !item.wasExpanded && <ch-dropdown></ch-dropdown>\r\n        }\r\n      </ch-dropdown>,\r\n\r\n      item.showSeparator && (\r\n        <div\r\n          aria-hidden=\"true\"\r\n          class={\r\n            \"ch-dropdown-separator \" +\r\n            (item.separatorClass || this.separatorCssClass)\r\n          }\r\n        ></div>\r\n      )\r\n    ];\r\n  };\r\n\r\n  #handleKeyDownEvents = (event: KeyboardEvent) => {\r\n    const keyEventHandler: ((event?: KeyboardEvent) => void) | undefined =\r\n      dropdownKeyEventsDictionary[event.code];\r\n\r\n    if (keyEventHandler) {\r\n      event.stopPropagation();\r\n      keyEventHandler(event);\r\n    }\r\n  };\r\n\r\n  #handleItemExpanded = (item: DropdownItemModel) => () => {\r\n    item.wasExpanded = true;\r\n    forceUpdate(this);\r\n  };\r\n\r\n  #handleMainDropdownExpand = () => {\r\n    this.#mainDropdownExpanded = true;\r\n    forceUpdate(this);\r\n  };\r\n\r\n  componentWillLoad() {\r\n    this.#showHeader = !!this.el.querySelector(':scope>[slot=\"header\"]');\r\n    this.#showFooter = !!this.el.querySelector(':scope>[slot=\"footer\"]');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ch-dropdown\r\n        exportparts={this.exportParts}\r\n        buttonAccessibleName={this.buttonAccessibleName}\r\n        class={this.cssClass}\r\n        level={-1}\r\n        showHeader={this.#showHeader}\r\n        showFooter={this.#showFooter}\r\n        position={this.position}\r\n        onKeyDown={\r\n          this.#mainDropdownExpanded ? this.#handleKeyDownEvents : null\r\n        }\r\n        onExpandedChange={\r\n          !this.#mainDropdownExpanded ? this.#handleMainDropdownExpand : null\r\n        }\r\n      >\r\n        <slot name=\"action\" slot=\"action\" />\r\n\r\n        {this.#showHeader && <slot name=\"header\" slot=\"header\" />}\r\n\r\n        {this.#showFooter && <slot name=\"footer\" slot=\"footer\" />}\r\n\r\n        {this.#mainDropdownExpanded &&\r\n          this.model != null &&\r\n          this.model.map(this.#renderItem(0))}\r\n      </ch-dropdown>\r\n    );\r\n  }\r\n}\r\n","@import \"../../common/_base\";\r\n\r\n@include box-sizing();\r\n\r\n$option-checked-background-color: transparent;\r\n$option-checked-border-color: currentColor;\r\n$option-checked-color: currentColor;\r\n\r\n:host {\r\n  /**\r\n   * @prop --ch-radio-group__radio-container-size:\r\n   * Specifies the size for the container of the `radio__input` and `radio__option` elements.\r\n   * @default min(1em, 20px)\r\n   */\r\n  --ch-radio-group__radio-container-size: min(1em, 20px);\r\n\r\n  /**\r\n   * @prop --ch-radio-group__radio-option-size:\r\n   * Specifies the size for the `radio__option` element.\r\n   * @default 50%\r\n   */\r\n  --ch-radio-group__radio-option-size: 50%;\r\n\r\n  display: inline-grid;\r\n  grid-auto-rows: max-content;\r\n\r\n  // This property is necessary to ensure the focus is not delegated to the\r\n  // checked radio when clicking the background of the control, but not an item\r\n  pointer-events: none;\r\n}\r\n\r\n.radio-item {\r\n  display: flex;\r\n  align-items: center;\r\n  align-self: stretch;\r\n\r\n  // Avoid zooming on double tap\r\n  touch-action: manipulation;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n  inline-size: var(--ch-radio-group__radio-container-size);\r\n  block-size: var(--ch-radio-group__radio-container-size);\r\n  border: 1px solid $option-checked-border-color;\r\n  border-radius: 50%;\r\n\r\n  &--checked {\r\n    background-color: $option-checked-background-color;\r\n  }\r\n}\r\n\r\n.input {\r\n  display: flex;\r\n  inline-size: 100%;\r\n  block-size: 100%;\r\n  opacity: 0;\r\n  margin: 0;\r\n  padding: 0;\r\n  cursor: pointer;\r\n\r\n  &--enabled {\r\n    pointer-events: all;\r\n  }\r\n}\r\n\r\n.option {\r\n  position: absolute;\r\n  inline-size: var(--ch-radio-group__radio-option-size);\r\n  block-size: var(--ch-radio-group__radio-option-size);\r\n  background-color: $option-checked-color;\r\n  border-radius: 50%;\r\n  pointer-events: none;\r\n\r\n  &--unchecked {\r\n    opacity: 0;\r\n    visibility: hidden;\r\n  }\r\n}\r\n\r\n.label {\r\n  cursor: pointer;\r\n\r\n  &--enabled {\r\n    pointer-events: all;\r\n  }\r\n}\r\n","import {\r\n  AttachInternals,\r\n  Component,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  Watch,\r\n  h\r\n} from \"@stencil/core\";\r\nimport { RadioGroupItemModel, RadioGroupModel } from \"./types\";\r\nimport { RADIO_ITEM_PARTS_DICTIONARY } from \"../../common/reserverd-names\";\r\n\r\nconst PARTS = (checked: boolean, disabled: boolean) => {\r\n  const checkedValue = checked\r\n    ? RADIO_ITEM_PARTS_DICTIONARY.CHECKED\r\n    : RADIO_ITEM_PARTS_DICTIONARY.UNCHECKED;\r\n\r\n  return disabled\r\n    ? `${RADIO_ITEM_PARTS_DICTIONARY.DISABLED} ${checkedValue}`\r\n    : checkedValue;\r\n};\r\n\r\n/**\r\n * The radio group control is used to render a short list of mutually exclusive options.\r\n *\r\n * It contains radio items to allow users to select one option from the list of options.\r\n *\r\n * @part radio__item - The radio item element.\r\n * @part radio__container - The container that serves as a wrapper for the `input` and the `option` parts.\r\n * @part radio__input - The invisible input element that implements the interactions for the component. This part must be kept \"invisible\".\r\n * @part radio__option - The actual \"input\" that is rendered above the `input` part. This part has `position: absolute` and `pointer-events: none`.\r\n * @part radio__label - The label that is rendered when the `caption` property is not empty.\r\n *\r\n * @part checked - Present in the `radio__item`, `radio__option`, `radio__label` and `radio__container` parts when the control is checked (`checked` === `true`).\r\n * @part disabled - Present in the `radio__item`, `radio__option`, `radio__label` and `radio__container` parts when the control is disabled (`disabled` === `true`).\r\n * @part unchecked - Present in the `radio__item`, `radio__option`, `radio__label` and `radio__container` parts when the control is not checked (`checked` !== `true`).\r\n */\r\n@Component({\r\n  formAssociated: true,\r\n  shadow: { delegatesFocus: true },\r\n  styleUrl: \"radio-group-render.scss\",\r\n  tag: \"ch-radio-group-render\"\r\n})\r\nexport class ChRadioGroupRender {\r\n  @AttachInternals() internals: ElementInternals;\r\n\r\n  /**\r\n   * This attribute lets you specify if the radio-group is disabled.\r\n   * If disabled, it will not fire any user interaction related event\r\n   * (for example, click event).\r\n   */\r\n  @Prop() readonly disabled: boolean = false;\r\n\r\n  /**\r\n   * This property lets you define the items of the ch-radio-group-render control.\r\n   */\r\n  @Prop() readonly model?: RadioGroupModel;\r\n\r\n  /**\r\n   * The value of the control.\r\n   */\r\n  @Prop({ mutable: true }) value: string;\r\n  @Watch(\"value\")\r\n  handleValueChange(newValue: string) {\r\n    // Update form value\r\n    this.internals.setFormValue(newValue);\r\n  }\r\n\r\n  /**\r\n   * Fired when the selected item change. It contains the information about the\r\n   * new selected value.\r\n   */\r\n  @Event() change: EventEmitter<string>;\r\n\r\n  #handleCheckedInputChange = (value: string) => (event: InputEvent) => {\r\n    event.stopPropagation();\r\n    this.value = value;\r\n\r\n    this.change.emit(value);\r\n  };\r\n\r\n  #itemRender = (item: RadioGroupItemModel, index: number) => {\r\n    const checked = this.value === item.value;\r\n    const disabled = item.disabled || this.disabled;\r\n\r\n    const additionalParts = PARTS(checked, disabled);\r\n\r\n    return (\r\n      <div\r\n        class=\"radio-item\"\r\n        part={`${RADIO_ITEM_PARTS_DICTIONARY.RADIO_ITEM} ${additionalParts}`}\r\n      >\r\n        <div\r\n          class={{\r\n            container: true,\r\n            \"container--checked\": checked\r\n          }}\r\n          part={`${RADIO_ITEM_PARTS_DICTIONARY.CONTAINER} ${additionalParts}`}\r\n        >\r\n          <input\r\n            id={item.caption ? `radio-item-${index}` : null}\r\n            name=\"radio-group\"\r\n            aria-label={!item.caption ? item.accessibleName : null}\r\n            class={{ input: true, \"input--enabled\": !disabled }}\r\n            part={RADIO_ITEM_PARTS_DICTIONARY.INPUT}\r\n            type=\"radio\"\r\n            checked={checked}\r\n            disabled={disabled}\r\n            value={item.value}\r\n            onInput={this.#handleCheckedInputChange(item.value)}\r\n          />\r\n          <div\r\n            class={{\r\n              option: true,\r\n              \"option--unchecked\": !checked\r\n            }}\r\n            part={`${RADIO_ITEM_PARTS_DICTIONARY.OPTION} ${additionalParts}`}\r\n            aria-hidden=\"true\"\r\n          ></div>\r\n        </div>\r\n\r\n        {item.caption && (\r\n          <label\r\n            class={{ label: true, \"label--enabled\": !disabled }}\r\n            part={`${RADIO_ITEM_PARTS_DICTIONARY.LABEL} ${additionalParts}`}\r\n            htmlFor={`radio-item-${index}`}\r\n          >\r\n            {item.caption}\r\n          </label>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  connectedCallback() {\r\n    // Set form value\r\n    this.internals.setFormValue(this.value);\r\n  }\r\n\r\n  render() {\r\n    return <Host role=\"radiogroup\">{this.model?.map(this.#itemRender)}</Host>;\r\n  }\r\n}\r\n"],"mappings":"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"}