{"version":3,"names":["e","comments","lineComment","brackets","autoClosingPairs","open","close","notIn","o","defaultToken","tokenPostfix","ignoreCase","token","keywords","tagwords","operators","identifier","symbols","escapes","tokenizer","root","include","cases","$2","whitespace","string"],"sources":["src/components/code-editor/monaco/output/sb-0xs4WOZO.js"],"sourcesContent":["var e = { comments: { lineComment: \"'\" }, brackets: [[\"(\", \")\"], [\"[\", \"]\"], [\"If\", \"EndIf\"], [\"While\", \"EndWhile\"], [\"For\", \"EndFor\"], [\"Sub\", \"EndSub\"]], autoClosingPairs: [{ open: '\"', close: '\"', notIn: [\"string\", \"comment\"] }, { open: \"(\", close: \")\", notIn: [\"string\", \"comment\"] }, { open: \"[\", close: \"]\", notIn: [\"string\", \"comment\"] }] }, o = { defaultToken: \"\", tokenPostfix: \".sb\", ignoreCase: !0, brackets: [{ token: \"delimiter.array\", open: \"[\", close: \"]\" }, { token: \"delimiter.parenthesis\", open: \"(\", close: \")\" }, { token: \"keyword.tag-if\", open: \"If\", close: \"EndIf\" }, { token: \"keyword.tag-while\", open: \"While\", close: \"EndWhile\" }, { token: \"keyword.tag-for\", open: \"For\", close: \"EndFor\" }, { token: \"keyword.tag-sub\", open: \"Sub\", close: \"EndSub\" }], keywords: [\"Else\", \"ElseIf\", \"EndFor\", \"EndIf\", \"EndSub\", \"EndWhile\", \"For\", \"Goto\", \"If\", \"Step\", \"Sub\", \"Then\", \"To\", \"While\"], tagwords: [\"If\", \"Sub\", \"While\", \"For\"], operators: [\">\", \"<\", \"<>\", \"<=\", \">=\", \"And\", \"Or\", \"+\", \"-\", \"*\", \"/\", \"=\"], identifier: /[a-zA-Z_][\\w]*/, symbols: /[=><:+\\-*\\/%\\.,]+/, escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/, tokenizer: { root: [{ include: \"@whitespace\" }, [/(@identifier)(?=[.])/, \"type\"], [/@identifier/, { cases: { \"@keywords\": { token: \"keyword.$0\" }, \"@operators\": \"operator\", \"@default\": \"variable.name\" } }], [/([.])(@identifier)/, { cases: { $2: [\"delimiter\", \"type.member\"], \"@default\": \"\" } }], [/\\d*\\.\\d+/, \"number.float\"], [/\\d+/, \"number\"], [/[()\\[\\]]/, \"@brackets\"], [/@symbols/, { cases: { \"@operators\": \"operator\", \"@default\": \"delimiter\" } }], [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"], [/\"/, \"string\", \"@string\"]], whitespace: [[/[ \\t\\r\\n]+/, \"\"], [/(\\').*$/, \"comment\"]], string: [[/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"C?/, \"string\", \"@pop\"]] } };\nexport {\n  e as conf,\n  o as language\n};\n"],"mappings":"AAAG,IAACA,EAAI,CAAEC,SAAU,CAAEC,YAAa,KAAOC,SAAU,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,KAAM,SAAU,CAAC,QAAS,YAAa,CAAC,MAAO,UAAW,CAAC,MAAO,WAAYC,iBAAkB,CAAC,CAAEC,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,SAAU,YAAc,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,SAAU,YAAc,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,SAAU,cAAiBC,EAAI,CAAEC,aAAc,GAAIC,aAAc,MAAOC,YAAa,EAAGR,SAAU,CAAC,CAAES,MAAO,kBAAmBP,KAAM,IAAKC,MAAO,KAAO,CAAEM,MAAO,wBAAyBP,KAAM,IAAKC,MAAO,KAAO,CAAEM,MAAO,iBAAkBP,KAAM,KAAMC,MAAO,SAAW,CAAEM,MAAO,oBAAqBP,KAAM,QAASC,MAAO,YAAc,CAAEM,MAAO,kBAAmBP,KAAM,MAAOC,MAAO,UAAY,CAAEM,MAAO,kBAAmBP,KAAM,MAAOC,MAAO,WAAaO,SAAU,CAAC,OAAQ,SAAU,SAAU,QAAS,SAAU,WAAY,MAAO,OAAQ,KAAM,OAAQ,MAAO,OAAQ,KAAM,SAAUC,SAAU,CAAC,KAAM,MAAO,QAAS,OAAQC,UAAW,CAAC,IAAK,IAAK,KAAM,KAAM,KAAM,MAAO,KAAM,IAAK,IAAK,IAAK,IAAK,KAAMC,WAAY,iBAAkBC,QAAS,oBAAqBC,QAAS,wEAAyEC,UAAW,CAAEC,KAAM,CAAC,CAAEC,QAAS,eAAiB,CAAC,uBAAwB,QAAS,CAAC,cAAe,CAAEC,MAAO,CAAE,YAAa,CAAEV,MAAO,cAAgB,aAAc,WAAY,WAAY,mBAAsB,CAAC,qBAAsB,CAAEU,MAAO,CAAEC,GAAI,CAAC,YAAa,eAAgB,WAAY,MAAS,CAAC,WAAY,gBAAiB,CAAC,MAAO,UAAW,CAAC,WAAY,aAAc,CAAC,WAAY,CAAED,MAAO,CAAE,aAAc,WAAY,WAAY,eAAkB,CAAC,kBAAmB,kBAAmB,CAAC,IAAK,SAAU,YAAaE,WAAY,CAAC,CAAC,aAAc,IAAK,CAAC,UAAW,YAAaC,OAAQ,CAAC,CAAC,UAAW,UAAW,CAAC,WAAY,iBAAkB,CAAC,MAAO,yBAA0B,CAAC,MAAO,SAAU,kB"}