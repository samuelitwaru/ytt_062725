{"version":3,"names":["filterWithCase","stringToFilter","filter","matchCase","includes","toLowerCase","filterWithString","filterOptions","regularExpression","match","filterDictionary","caption","item","filterInfo","value","none","computeFilter","filterType","hideMatchesAndShowNonMatches","filterSubModel","displayedValues","aSubItemIsRendered","itemSubGroup","items","index","length","itemLeaf","itemSatisfiesFilter","satisfiesFilter","add","comboBoxCss","ChComboBoxStyle0","SELECTED_PART","DISABLED_PART","SELECTED_ITEM_SELECTOR","COMBO_BOX_MASK_BLOCK_START","COMBO_BOX_MASK_BLOCK_END","COMBO_BOX_MASK_INLINE_START","COMBO_BOX_MASK_INLINE_END","mobileDevice","isMobileDevice","autoId","negateBorderValue","borderSize","SELECTED_VALUE_DOES_NOT_EXISTS","type","isValidIndex","array","findSelectedIndex","valueToItemInfo","selectedValue","get","findNextSelectedIndex","model","currentIndex","increment","hasFilters","firstLevelIndex","secondLevelIndex","firstLevelItemItems","disabled","has","nextFirstLevelIndex","nestedLevel","ChComboBox","accessibleNameFromExternalLabel","popoverId","firstExpanded","borderSizeRAF","resizeObserver","lastMaskInlineStart","undefined","lastMaskInlineEnd","lastMaskBlockStart","lastMaskBlockEnd","Map","applyFilters","immediateFilter","queuedFilterId","focusSelectAfterNextRender","selectNextIndex","event","currentSelectedIndex","preventDefault","nextSelectedIndex","this","newSelectedValue","currentSelectedValue","keyEventsNoFiltersDictionary","ArrowUp","isModelAlreadyFiltered","ArrowDown","Home","End","Enter","expanded","el","focus","Space","Tab","keyEventsWithFiltersDictionary","maskRef","inputRef","selectRef","handleExpandedChange","newExpandedValue","scheduleFilterProcessing","internals","filterChanged","filterDebounceChanged","filterOptionsChanged","filterTypeChanged","modelChanged","newModel","mapValuesToItemInfo","valueChange","newValue","setFormValue","filterChange","input","newImmediateFilter","filterFunction","modelIsAlreadyFiltered","emit","clear","updateFilters","clearTimeout","processWithDebounce","filterDebounce","Set","setTimeout","forceUpdate","forEach","itemGroup","subItems","set","expandable","subItem","checkAndEmitValueChange","itemLeafParts","insideAGroup","isDisabled","setResizeObserver","SyncWithRAF","ResizeObserver","updateBorderSizeRAF","observe","box","perform","updateBorderSize","computedStyle","getComputedStyle","negatedBorderInlineStartWidth","borderInlineStartWidth","negatedBorderInlineEndWidth","borderInlineEndWidth","negatedBorderBlockStartWidth","borderBlockStartWidth","negatedBorderBlockEndWidth","borderBlockEndWidth","style","setProperty","handleSelectChange","stopPropagation","handleExpandedChangeWithKeyBoard","keyboardHandler","code","KEY_CODES","ESCAPE","HOME","END","ARROW_LEFT","ARROW_RIGHT","handlePopoverClose","focusComposedPath","handleInputFilterChange","displayPopoverWhenFiltersApplied","focusInnerInputWhenFiltersApplied","updateCurrentSelectedValue","itemValue","toggleExpandInGroup","getItemImageCustomVars","hasImages","hasStartImg","hasEndImg","startImgSrc","endImgSrc","alreadyProcessed","customItemRender","filtersAreApplied","customVars","canAddListeners","h","key","toString","role","class","part","group__header","onClick","startImgType","endImgType","id","group__content","map","tabindex","leaf","onMouseEnter","nativeItemRender","label","selected","nativeRender","placeholder","accessibleName","onChange","ref","connectedCallback","labels","textContent","trim","componentShouldUpdate","_newValue","_oldValue","name","componentWillRender","componentDidLoad","componentDidRender","selectedElement","shadowRoot","querySelector","requestAnimationFrame","disconnectedCallback","disconnect","render","comboBoxIsInteractive","readonly","destroyRender","destroyItemsOnClose","Host","onKeyDown","mask","onClickCapture","autocomplete","readOnly","onInputCapture","actionById","actionElement","blockAlign","inlineAlign","closeOnClickOutside","hidden","popover","resizable","inlineSizeMatch","positionTry","onPopoverClosed","DROPDOWN_TAG_NAME","FIRST_DROPDOWN","LAST_DROPDOWN","elementIsDropdown","element","tagName","getFocusedDropdown","target","getDropdownFirstItem","dropdown","getDropdownLastItem","getFirstSiblingItem","sibling","parentElement","getLastSiblingItem","dropdownKeyEventsDictionary","ARROW_DOWN","focusedElement","level","focusElement","nextSiblingToFocus","nextElementSibling","ARROW_UP","previousElementSibling","async","expandDropdown","parentDropdown","collapseDropdown","dropdownRenderCss","ChDropdownRenderStyle0","ChDropdownRender","DROPDOWN_EXPORT_PARTS","showHeader","showFooter","mainDropdownExpanded","handleItemClick","itemId","itemClickCallback","renderItem","hasItems","exportparts","exportParts","cssClass","useGxRender","fromGxImageToURL","gxSettings","gxImageConstructor","href","link","url","position","itemsPosition","shortcut","onExpandedChange","wasExpanded","handleItemExpanded","showSeparator","separatorClass","separatorCssClass","handleKeyDownEvents","keyEventHandler","handleMainDropdownExpand","componentWillLoad","buttonAccessibleName","slot","radioGroupRenderCss","ChRadioGroupRenderStyle0","PARTS","checked","checkedValue","RADIO_ITEM_PARTS_DICTIONARY","CHECKED","UNCHECKED","DISABLED","ChRadioGroupRender","handleValueChange","change","handleCheckedInputChange","itemRender","additionalParts","RADIO_ITEM","container","CONTAINER","INPUT","onInput","option","OPTION","LABEL","htmlFor"],"sources":["src/components/combobox/helpers.ts","src/components/combobox/combo-box.scss?tag=ch-combo-box&encapsulation=shadow","src/components/combobox/combo-box.tsx","src/components/dropdown/utils.ts","src/components/dropdown/dropdown-render.scss?tag=ch-dropdown-render","src/components/dropdown/dropdown-render.tsx","src/components/radio-group/radio-group-render.scss?tag=ch-radio-group-render&encapsulation=shadow","src/components/radio-group/radio-group-render.tsx"],"sourcesContent":["import {\r\n  ComboBoxFilterInfo,\r\n  ComboBoxFilterOptions,\r\n  ComboBoxFilterType,\r\n  ComboBoxItemGroup,\r\n  ComboBoxItemModel\r\n} from \"./types\";\r\n\r\nconst filterWithCase = (\r\n  stringToFilter: string,\r\n  filter: string,\r\n  matchCase?: boolean\r\n) =>\r\n  matchCase\r\n    ? stringToFilter.includes(filter)\r\n    : stringToFilter.toLowerCase().includes(filter.toLowerCase());\r\n\r\nconst filterWithString = (\r\n  stringToFilter: string,\r\n  filter: string,\r\n  filterOptions: ComboBoxFilterOptions\r\n) =>\r\n  filterOptions?.regularExpression\r\n    ? stringToFilter.match(filter) !== null\r\n    : filterWithCase(stringToFilter, filter, filterOptions?.matchCase);\r\n\r\nconst filterDictionary: {\r\n  [key in ComboBoxFilterType]: (\r\n    item: ComboBoxItemModel,\r\n    filterInfo: ComboBoxFilterInfo\r\n  ) => boolean;\r\n} = {\r\n  caption: (item, filterInfo) =>\r\n    filterInfo.filter\r\n      ? filterWithString(\r\n          item.caption ?? \"\",\r\n          filterInfo.filter,\r\n          filterInfo.filterOptions\r\n        )\r\n      : true,\r\n\r\n  value: (item, filterInfo) =>\r\n    filterInfo.filter\r\n      ? filterWithString(\r\n          item.value,\r\n          filterInfo.filter,\r\n          filterInfo.filterOptions\r\n        )\r\n      : true,\r\n\r\n  none: () => true\r\n};\r\n\r\nconst computeFilter = (\r\n  filterType: ComboBoxFilterType,\r\n  item: ComboBoxItemModel,\r\n  filterInfo: ComboBoxFilterInfo\r\n): boolean =>\r\n  filterInfo.filterOptions?.hideMatchesAndShowNonMatches === true\r\n    ? !filterDictionary[filterType](item, filterInfo)\r\n    : filterDictionary[filterType](item, filterInfo);\r\n\r\nexport const filterSubModel = (\r\n  item: ComboBoxItemModel,\r\n  filterType: ComboBoxFilterType,\r\n  filterInfo: ComboBoxFilterInfo,\r\n  displayedValues: Set<string>\r\n): boolean => {\r\n  // Check if a subitem is rendered\r\n  let aSubItemIsRendered = false;\r\n  const itemSubGroup = (item as ComboBoxItemGroup).items;\r\n\r\n  if (itemSubGroup != null) {\r\n    for (let index = 0; index < itemSubGroup.length; index++) {\r\n      const itemLeaf = itemSubGroup[index];\r\n      const itemSatisfiesFilter = filterSubModel(\r\n        itemLeaf,\r\n        filterType,\r\n        filterInfo,\r\n        displayedValues\r\n      );\r\n\r\n      aSubItemIsRendered ||= itemSatisfiesFilter;\r\n    }\r\n  }\r\n\r\n  // The current item is rendered if it satisfies the filter condition or a\r\n  // subitem exists that needs to be rendered\r\n  const satisfiesFilter =\r\n    aSubItemIsRendered || computeFilter(filterType, item, filterInfo);\r\n\r\n  // Update selected and checkbox items\r\n  if (satisfiesFilter) {\r\n    displayedValues.add(item.value);\r\n  }\r\n\r\n  return satisfiesFilter;\r\n};\r\n","@import \"../../common/base\";\r\n@import \"../../common/icons\";\r\n\r\n@include input-reset();\r\n@include button-reset(); // Should be placed before the box-sizing reset\r\n@include box-sizing();\r\n\r\n:host {\r\n  /**\r\n   * @prop --ch-combo-box-group__expandable-button-size:\r\n   * Specifies the expandable button size in the group items.\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-combo-box-group__expandable-button-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-combo-box-group__expandable-button-image-size:\r\n   * Specifies the image size of the expandable button size in the group items. \r\n   * @default 100%\r\n   */\r\n  --ch-combo-box-group__expandable-button-image-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-combo-box-item__image-size:\r\n   * Specifies the box size that contains an image in the items. For example,\r\n   * the box for the startImgSrc and endImgSrc\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-combo-box-item__image-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-combo-box-item__background-image-size:\r\n   * Specifies the image size of the items. For example, the image size for the\r\n   * startImgSrc and endImgSrc\r\n   * @default 100%\r\n   */\r\n  --ch-combo-box-item__background-image-size: 100%;\r\n\r\n  /**\r\n   * @prop --ch-combo-box__picker:\r\n   * Specifies the image of the combo-box's picker.\r\n   * @default url('data:image/svg+xml,<svg width=\"8\" height=\"12\" viewBox=\"0 0 8 12\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M4.16669 0.666626L7.66669 4.66663H0.666687L4.16669 0.666626ZM4.16669 11.3333L0.666687 7.33329H7.66669L4.16669 11.3333Z\"/></svg>')\r\n   */\r\n  --ch-combo-box__picker: url('data:image/svg+xml,<svg width=\"8\" height=\"12\" viewBox=\"0 0 8 12\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M4.16669 0.666626L7.66669 4.66663H0.666687L4.16669 0.666626ZM4.16669 11.3333L0.666687 7.33329H7.66669L4.16669 11.3333Z\"/></svg>');\r\n\r\n  /**\r\n   * @prop --ch-combo-box__picker-color:\r\n   * Specifies the color of the combo-box's picker.\r\n   * @default currentColor\r\n   */\r\n  --ch-combo-box__picker-color: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-combo-box__picker-size:\r\n   * Specifies the box size that contains the combo-box's picker.\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-combo-box__picker-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-combo-box__picker-mask-size:\r\n   * Specifies the image size of the combo-box's picker.\r\n   * @default 100%\r\n   */\r\n  --ch-combo-box__picker-image-size: 100%;\r\n\r\n  /**\r\n   * @prop --ch-combo-box-item-gap:\r\n   * Specifies the spacing between the images, text and the expandable button\r\n   * on items.\r\n   * @default 0px\r\n   */\r\n  --ch-combo-box-item-gap: 0px;\r\n\r\n  /**\r\n   * @prop --ch-combo-box-separation:\r\n   * Specifies the separation between the combo-box and the displayed popover.\r\n   * @default 0px\r\n   */\r\n  --ch-combo-box-separation: 0px;\r\n\r\n  /**\r\n   * @prop --ch-combo-box-separation-x:\r\n   * Specifies the separation between the combo-box and the popover displayed\r\n   * on the x-axis.\r\n   * @default var(--ch-combo-box-separation)\r\n   */\r\n  --ch-combo-box-separation-x: var(--ch-combo-box-separation);\r\n\r\n  /**\r\n   * @prop --ch-combo-box-separation-y:\r\n   * Specifies the separation between the combo-box and the popover displayed\r\n   * on the y-axis.\r\n   * @default var(--ch-combo-box-separation)\r\n   */\r\n  --ch-combo-box-separation-y: var(--ch-combo-box-separation);\r\n\r\n  --ch-combo-box-mask-inline-start-width: 0px;\r\n  --ch-combo-box-mask-inline-end-width: 0px;\r\n  --ch-combo-box-mask-block-start-width: 0px;\r\n  --ch-combo-box-mask-block-end-width: 0px;\r\n\r\n  display: inline-grid;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  // Remove outline of the focus state. This selector must not have higher\r\n  // specificity, since it should be overridden by the class applied to the control\r\n  outline: unset;\r\n\r\n  // Remove text selection on double click\r\n  user-select: none;\r\n\r\n  &::after {\r\n    content: \"\";\r\n    justify-self: flex-end;\r\n    inline-size: var(--ch-combo-box__picker-size);\r\n    block-size: var(--ch-combo-box__picker-size);\r\n    -webkit-mask: var(--ch-combo-box__picker) 50% 50% /\r\n      var(--ch-combo-box__picker-image-size)\r\n      var(--ch-combo-box__picker-image-size) no-repeat;\r\n    background-color: var(--ch-combo-box__picker-color);\r\n    pointer-events: none;\r\n  }\r\n}\r\n\r\n:host(.ch-disabled) {\r\n  pointer-events: none;\r\n}\r\n\r\nselect {\r\n  all: unset;\r\n  display: grid;\r\n  opacity: 0;\r\n  overflow: hidden;\r\n}\r\n\r\n.mask,\r\nselect {\r\n  position: absolute;\r\n  inset-inline: var(--ch-combo-box-mask-inline-start)\r\n    var(--ch-combo-box-mask-inline-end);\r\n  inset-block: var(--ch-combo-box-mask-block-start)\r\n    var(--ch-combo-box-mask-block-end);\r\n}\r\n\r\n.mask {\r\n  cursor: text;\r\n\r\n  &--no-filters {\r\n    cursor: pointer;\r\n  }\r\n}\r\n\r\n.mask,\r\n.value {\r\n  padding: inherit;\r\n  border: inherit;\r\n  border-color: transparent;\r\n}\r\n\r\n.value {\r\n  position: absolute;\r\n  inset-inline: var(--ch-combo-box-mask-inline-start)\r\n    var(--ch-combo-box-mask-inline-end);\r\n  inset-block: var(--ch-combo-box-mask-block-start)\r\n    var(--ch-combo-box-mask-block-end);\r\n\r\n  margin-inline-end: var(--ch-combo-box__picker-size);\r\n\r\n  &--readonly {\r\n    pointer-events: none;\r\n    text-overflow: ellipsis;\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//           Separation\r\n// - - - - - - - - - - - - - - - -\r\nch-popover {\r\n  --ch-popover-separation-x: var(--ch-combo-box-separation-x);\r\n  --ch-popover-separation-y: var(--ch-combo-box-separation-y);\r\n\r\n  // --ch-popover-min-inline-size: var(--ch-popover-action-width);\r\n\r\n  &:not(.hydrated) {\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n.window__content {\r\n  display: grid;\r\n  grid-auto-rows: max-content;\r\n  overflow: auto;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//         Leaf and Group\r\n// - - - - - - - - - - - - - - - -\r\n.leaf,\r\n.group__header,\r\n.group__header-caption {\r\n  display: flex;\r\n  gap: var(--ch-combo-box-item-gap);\r\n  align-items: center;\r\n}\r\n\r\n.group {\r\n  display: grid;\r\n  grid-template-rows: max-content 1fr;\r\n\r\n  &--expandable {\r\n    &::before {\r\n      content: \"\";\r\n      inline-size: var(--ch-combo-box-group__expandable-button-size);\r\n      block-size: var(--ch-combo-box-group__expandable-button-size);\r\n      background-color: currentColor;\r\n      -webkit-mask: $expandable-icon 50% 50% /\r\n        var(--ch-combo-box-group__expandable-button-image-size)\r\n        var(--ch-combo-box-group__expandable-button-image-size) no-repeat;\r\n    }\r\n  }\r\n\r\n  &--collapsed::before {\r\n    transform: rotate(-90deg); // TODO: Add RTL support\r\n  }\r\n\r\n  &__content {\r\n    display: grid;\r\n    grid-auto-rows: max-content;\r\n\r\n    &--collapsed {\r\n      display: none;\r\n    }\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//             Images\r\n// - - - - - - - - - - - - - - - -\r\n.img--start::before,\r\n.img--end::after {\r\n  content: \"\";\r\n  display: block;\r\n  inline-size: var(--ch-combo-box-item__image-size);\r\n  block-size: var(--ch-combo-box-item__image-size);\r\n  min-inline-size: var(--ch-combo-box-item__image-size);\r\n}\r\n\r\n.img--start {\r\n  --ch-combo-box-item-img: var(--ch-combo-box-item-start-img);\r\n}\r\n\r\n.img--end {\r\n  --ch-combo-box-item-img: var(--ch-combo-box-item-end-img);\r\n\r\n  &::after {\r\n    margin-inline-start: auto;\r\n  }\r\n}\r\n\r\n.start-img-type--background::before,\r\n.end-img-type--background::after {\r\n  background: no-repeat center / var(--ch-combo-box-item__background-image-size)\r\n    var(--ch-combo-box-item-img);\r\n}\r\n\r\n.start-img-type--mask::before,\r\n.end-img-type--mask::after {\r\n  -webkit-mask: var(--ch-combo-box-item-img) 50% 50% /\r\n    var(--ch-combo-box-item__background-image-size)\r\n    var(--ch-combo-box-item__background-image-size) no-repeat;\r\n  background-color: currentColor;\r\n}\r\n","import {\r\n  AttachInternals,\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  State,\r\n  Watch,\r\n  forceUpdate,\r\n  h\r\n} from \"@stencil/core\";\r\nimport {\r\n  AccessibleNameComponent,\r\n  DisableableComponent\r\n} from \"../../common/interfaces\";\r\nimport {\r\n  ComboBoxFilterOptions,\r\n  ComboBoxFilterType,\r\n  ComboBoxItemModel,\r\n  ComboBoxItemGroup,\r\n  ComboBoxItemLeaf,\r\n  ComboBoxFilterInfo,\r\n  ComboBoxModel\r\n} from \"./types\";\r\nimport { isMobileDevice } from \"../../common/utils\";\r\nimport { KEY_CODES } from \"../../common/reserverd-names\";\r\nimport { SyncWithRAF } from \"../../common/sync-with-frames\";\r\nimport { ChPopoverCustomEvent } from \"../../components\";\r\nimport { focusComposedPath } from \"../common/helpers\";\r\nimport { filterSubModel } from \"./helpers\";\r\n\r\nconst SELECTED_PART = \"selected\";\r\nconst DISABLED_PART = \"disabled\";\r\n\r\nconst SELECTED_ITEM_SELECTOR = `button[part*='${SELECTED_PART}']`;\r\n\r\nconst COMBO_BOX_MASK_BLOCK_START = \"--ch-combo-box-mask-block-start\";\r\nconst COMBO_BOX_MASK_BLOCK_END = \"--ch-combo-box-mask-block-end\";\r\nconst COMBO_BOX_MASK_INLINE_START = \"--ch-combo-box-mask-inline-start\";\r\nconst COMBO_BOX_MASK_INLINE_END = \"--ch-combo-box-mask-inline-end\";\r\n\r\nconst mobileDevice = isMobileDevice();\r\n\r\nlet autoId = 0;\r\n\r\nconst negateBorderValue = (borderSize: string) =>\r\n  borderSize === \"0px\" ? \"0px\" : `-${borderSize}`;\r\n\r\n// Keys\r\ntype KeyDownNoFiltersEvents =\r\n  | typeof KEY_CODES.ARROW_UP\r\n  | typeof KEY_CODES.ARROW_DOWN\r\n  | typeof KEY_CODES.HOME\r\n  | typeof KEY_CODES.END\r\n  | typeof KEY_CODES.ENTER\r\n  | typeof KEY_CODES.SPACE\r\n  | typeof KEY_CODES.TAB;\r\n\r\ntype KeyDownWithFiltersEvents =\r\n  | typeof KEY_CODES.ARROW_UP\r\n  | typeof KEY_CODES.ARROW_DOWN\r\n  | typeof KEY_CODES.ENTER\r\n  | typeof KEY_CODES.TAB;\r\n\r\ntype SelectedIndex =\r\n  | {\r\n      type: \"not-exists\";\r\n    }\r\n  | {\r\n      type: \"nested\";\r\n      firstLevelIndex: number;\r\n      secondLevelIndex: number;\r\n    }\r\n  | {\r\n      type: \"first-level\";\r\n      firstLevelIndex: number;\r\n    };\r\n\r\nconst SELECTED_VALUE_DOES_NOT_EXISTS: SelectedIndex = {\r\n  type: \"not-exists\"\r\n} as const;\r\n\r\nconst isValidIndex = (array: any, index: number) =>\r\n  0 <= index && index < array.length;\r\n\r\nconst findSelectedIndex = (\r\n  valueToItemInfo: Map<string, { caption: string; index: SelectedIndex }>,\r\n  selectedValue: string | undefined\r\n): SelectedIndex => {\r\n  if (!selectedValue) {\r\n    return SELECTED_VALUE_DOES_NOT_EXISTS;\r\n  }\r\n\r\n  return (\r\n    valueToItemInfo.get(selectedValue)?.index ?? SELECTED_VALUE_DOES_NOT_EXISTS\r\n  );\r\n};\r\n\r\nconst findNextSelectedIndex = (\r\n  model: ComboBoxModel,\r\n  currentIndex: SelectedIndex,\r\n  increment: 1 | -1,\r\n  hasFilters: boolean,\r\n  displayedValues: Set<string>\r\n): SelectedIndex => {\r\n  if (currentIndex.type === \"not-exists\") {\r\n    return SELECTED_VALUE_DOES_NOT_EXISTS;\r\n  }\r\n  const firstLevelIndex = currentIndex.firstLevelIndex;\r\n\r\n  if (currentIndex.type === \"nested\") {\r\n    let secondLevelIndex = currentIndex.secondLevelIndex + increment; // Start from the first valid index\r\n    const firstLevelItemItems = (model[firstLevelIndex] as ComboBoxItemGroup)\r\n      .items;\r\n\r\n    // Search in the nested level skipping disabled and not rendered items\r\n    while (\r\n      isValidIndex(firstLevelItemItems, secondLevelIndex) &&\r\n      (firstLevelItemItems[secondLevelIndex].disabled ||\r\n        (hasFilters &&\r\n          !displayedValues.has(firstLevelItemItems[secondLevelIndex].value)))\r\n    ) {\r\n      secondLevelIndex += increment;\r\n    }\r\n\r\n    // If the index is not after the end of the array, the new selected value\r\n    // was found\r\n    if (isValidIndex(firstLevelItemItems, secondLevelIndex)) {\r\n      return {\r\n        type: \"nested\",\r\n        firstLevelIndex: firstLevelIndex,\r\n        secondLevelIndex: secondLevelIndex\r\n      };\r\n    }\r\n  }\r\n\r\n  // At this point, either all items in the nested level were disabled or the\r\n  // \"currentIndex\" was not nested. In any case, we must check the next item\r\n  // in the first level\r\n  let nextFirstLevelIndex = firstLevelIndex + increment;\r\n\r\n  // Search for the next first level item that is not disabled and is not filtered\r\n  while (\r\n    isValidIndex(model, nextFirstLevelIndex) &&\r\n    (model[nextFirstLevelIndex].disabled ||\r\n      (hasFilters && !displayedValues.has(model[nextFirstLevelIndex].value)))\r\n  ) {\r\n    nextFirstLevelIndex += increment;\r\n  }\r\n\r\n  // With this flag, we also say that we are at the end of the combo-box\r\n  // and there isn't any new \"next value\" to select\r\n  if (!isValidIndex(model, nextFirstLevelIndex)) {\r\n    return SELECTED_VALUE_DOES_NOT_EXISTS;\r\n  }\r\n\r\n  const nestedLevel = (model[nextFirstLevelIndex] as ComboBoxItemGroup).items;\r\n\r\n  if (nestedLevel != null) {\r\n    return findNextSelectedIndex(\r\n      model,\r\n      {\r\n        type: \"nested\",\r\n        firstLevelIndex: nextFirstLevelIndex,\r\n        secondLevelIndex: increment === 1 ? -1 : nestedLevel.length // The algorithm will sum 1 (or -1) to the start index\r\n      },\r\n      increment,\r\n      hasFilters,\r\n      displayedValues\r\n    );\r\n  }\r\n\r\n  return {\r\n    type: \"first-level\",\r\n    firstLevelIndex: nextFirstLevelIndex\r\n  };\r\n};\r\n\r\ntype ImmediateFilter = \"immediate\" | \"debounced\" | undefined;\r\n\r\n/**\r\n * @part ... - ...\r\n */\r\n@Component({\r\n  formAssociated: true,\r\n  shadow: true,\r\n  styleUrl: \"combo-box.scss\",\r\n  tag: \"ch-combo-box\"\r\n})\r\nexport class ChComboBox\r\n  implements AccessibleNameComponent, DisableableComponent\r\n{\r\n  #accessibleNameFromExternalLabel: string | undefined;\r\n  #popoverId: string | undefined;\r\n  #firstExpanded = false;\r\n\r\n  #borderSizeRAF: SyncWithRAF | undefined;\r\n  #resizeObserver: ResizeObserver | undefined;\r\n\r\n  #lastMaskInlineStart = undefined;\r\n  #lastMaskInlineEnd = undefined;\r\n  #lastMaskBlockStart = undefined;\r\n  #lastMaskBlockEnd = undefined;\r\n\r\n  #valueToItemInfo: Map<\r\n    string,\r\n    { caption: string; index: SelectedIndex; firstExpanded?: boolean }\r\n  > = new Map();\r\n\r\n  // Filters info\r\n  #applyFilters = false;\r\n  #immediateFilter: ImmediateFilter;\r\n  #queuedFilterId: NodeJS.Timeout;\r\n\r\n  /**\r\n   * Collection of displayed values. If a filter is applied and the value\r\n   * belongs to this Set, the item is displayed.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #displayedValues: Set<string> | undefined; // Don't allocate memory until needed\r\n\r\n  /**\r\n   * When the control is used in a desktop environment, we need to manually\r\n   * focus the selected item when the control is expanded.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #focusSelectAfterNextRender = true;\r\n\r\n  #selectNextIndex = (\r\n    event: KeyboardEvent,\r\n    currentSelectedIndex: SelectedIndex,\r\n    increment: 1 | -1,\r\n    hasFilters: boolean,\r\n    displayedValues: Set<string>\r\n  ) => {\r\n    event.preventDefault(); // Stop ArrowDown key from scrolling\r\n\r\n    const nextSelectedIndex =\r\n      currentSelectedIndex.type === \"not-exists\"\r\n        ? findNextSelectedIndex(\r\n            this.model,\r\n            {\r\n              type: \"first-level\",\r\n              firstLevelIndex: increment === 1 ? -1 : this.model.length\r\n            },\r\n            increment,\r\n            hasFilters,\r\n            displayedValues\r\n          )\r\n        : findNextSelectedIndex(\r\n            this.model,\r\n            currentSelectedIndex,\r\n            increment,\r\n            hasFilters,\r\n            displayedValues\r\n          );\r\n\r\n    if (nextSelectedIndex.type === \"not-exists\") {\r\n      return;\r\n    }\r\n\r\n    // The new selected value is either in the first level or in the group\r\n    const newSelectedValue =\r\n      nextSelectedIndex.type === \"first-level\"\r\n        ? this.model[nextSelectedIndex.firstLevelIndex].value\r\n        : (this.model[nextSelectedIndex.firstLevelIndex] as ComboBoxItemGroup)\r\n            .items[nextSelectedIndex.secondLevelIndex].value;\r\n\r\n    if (this.currentSelectedValue !== newSelectedValue) {\r\n      this.currentSelectedValue = newSelectedValue;\r\n      this.#focusSelectAfterNextRender = true;\r\n    }\r\n  };\r\n\r\n  // Keyboard events when the control has no filters\r\n  #keyEventsNoFiltersDictionary: {\r\n    [key in KeyDownNoFiltersEvents]: (event: KeyboardEvent) => void;\r\n  } = {\r\n    ArrowUp: (event: KeyboardEvent) =>\r\n      this.#selectNextIndex(\r\n        event,\r\n        findSelectedIndex(this.#valueToItemInfo, this.currentSelectedValue),\r\n        -1,\r\n        this.filterType !== \"none\" && !this.#isModelAlreadyFiltered(),\r\n        this.#displayedValues\r\n      ),\r\n\r\n    ArrowDown: (event: KeyboardEvent) =>\r\n      this.#selectNextIndex(\r\n        event,\r\n        findSelectedIndex(this.#valueToItemInfo, this.currentSelectedValue),\r\n        1,\r\n        this.filterType !== \"none\" && !this.#isModelAlreadyFiltered(),\r\n        this.#displayedValues\r\n      ),\r\n\r\n    Home: (event: KeyboardEvent) =>\r\n      this.#selectNextIndex(\r\n        event,\r\n        {\r\n          type: \"first-level\",\r\n          firstLevelIndex: -1\r\n        }, // The algorithm will sum 1 to the start index\r\n        1,\r\n        this.filterType !== \"none\" && !this.#isModelAlreadyFiltered(),\r\n        this.#displayedValues\r\n      ),\r\n\r\n    End: (event: KeyboardEvent) =>\r\n      this.#selectNextIndex(\r\n        event,\r\n        {\r\n          type: \"first-level\",\r\n          firstLevelIndex: this.model.length\r\n        }, // The algorithm will sum -1 to the start index\r\n        -1,\r\n        this.filterType !== \"none\" && !this.#isModelAlreadyFiltered(),\r\n        this.#displayedValues\r\n      ),\r\n\r\n    Enter: () => {\r\n      // The focus must return to the Host when closing the popover\r\n      if (this.expanded) {\r\n        this.el.focus();\r\n      }\r\n\r\n      this.expanded = !this.expanded;\r\n    },\r\n\r\n    Space: event => {\r\n      event.preventDefault(); // Stop space key from scrolling\r\n\r\n      // Only expands the ComboBox\r\n      this.expanded ||= true;\r\n    },\r\n\r\n    Tab: event => {\r\n      // The focus must return to the Host when tabbing with the popover\r\n      // expanded\r\n      if (this.expanded) {\r\n        event.preventDefault();\r\n\r\n        this.el.focus();\r\n        this.expanded = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  // Keyboard events when the control has filters\r\n  #keyEventsWithFiltersDictionary: {\r\n    [key in KeyDownWithFiltersEvents]: (event: KeyboardEvent) => void;\r\n  } = {\r\n    ArrowUp: (event: KeyboardEvent) => {\r\n      if (this.expanded) {\r\n        this.#keyEventsNoFiltersDictionary.ArrowUp(event);\r\n      } else {\r\n        this.expanded = true;\r\n      }\r\n    },\r\n\r\n    ArrowDown: (event: KeyboardEvent) => {\r\n      if (this.expanded) {\r\n        this.#keyEventsNoFiltersDictionary.ArrowDown(event);\r\n      } else {\r\n        this.expanded = true;\r\n      }\r\n    },\r\n\r\n    Enter: () => {\r\n      // The focus must return to the Host when closing the popover\r\n      if (this.expanded) {\r\n        this.el.focus();\r\n        this.expanded = false;\r\n      }\r\n    },\r\n\r\n    Tab: this.#keyEventsNoFiltersDictionary.Tab\r\n  };\r\n\r\n  // Refs\r\n  #maskRef: HTMLDivElement;\r\n  #inputRef: HTMLInputElement;\r\n  #selectRef: HTMLSelectElement | undefined;\r\n\r\n  /**\r\n   * When the combo-box is expanded, the visually selected value must change,\r\n   * but in the interface the `value` property must only change when the\r\n   * popover is closed.\r\n   * This state help us to render the visually selected value, without updating\r\n   * the `value` property in the interface.\r\n   */\r\n  @State() currentSelectedValue: string;\r\n\r\n  @State() expanded = false;\r\n  @Watch(\"expanded\")\r\n  handleExpandedChange(newExpandedValue: boolean) {\r\n    this.#firstExpanded = true;\r\n\r\n    if (newExpandedValue && !mobileDevice) {\r\n      this.#focusSelectAfterNextRender = true;\r\n\r\n      // When the control is expanded and has filters applied, we should\r\n      // refresh the rendered items without any debounce\r\n      if (this.filterType !== \"none\") {\r\n        this.#scheduleFilterProcessing(\"immediate\");\r\n      }\r\n    }\r\n  }\r\n\r\n  @AttachInternals() internals: ElementInternals;\r\n\r\n  @Element() el: HTMLChComboBoxElement;\r\n\r\n  /**\r\n   * Specifies a short string, typically 1 to 3 words, that authors associate\r\n   * with an element to provide users of assistive technologies with a label\r\n   * for the element.\r\n   */\r\n  @Prop() readonly accessibleName?: string;\r\n\r\n  /**\r\n   * This attribute lets you specify if the element is disabled.\r\n   * If disabled, it will not fire any user interaction related event\r\n   * (for example, click event).\r\n   */\r\n  @Prop() readonly disabled: boolean = false;\r\n\r\n  /**\r\n   * Specifies whether the items should not stay rendered in the DOM if the\r\n   * control is closed.\r\n   * `true` to destroy the rendered items when the control is closed.\r\n   * Note: By default, the control does not rendered the items until the first\r\n   * expansion. The same applies if the control have groups.\r\n   */\r\n  @Prop() readonly destroyItemsOnClose: boolean = false;\r\n\r\n  /**\r\n   * This property lets you determine the expression that will be applied to the\r\n   * filter.\r\n   * Only works if `filterType = \"caption\" | \"value\"`.\r\n   */\r\n  @Prop({ mutable: true }) filter: string;\r\n  @Watch(\"filter\")\r\n  filterChanged() {\r\n    if (this.filterType === \"caption\" || this.filterType === \"value\") {\r\n      this.#scheduleFilterProcessing();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This property lets you determine the debounce time (in ms) that the\r\n   * control waits until it processes the changes to the filter property.\r\n   * Consecutive changes to the `filter` property between this range, reset the\r\n   * timeout to process the filter.\r\n   * Only works if `filterType = \"caption\" | \"value\"`.\r\n   */\r\n  @Prop() readonly filterDebounce: number = 250;\r\n  @Watch(\"filterDebounce\")\r\n  filterDebounceChanged() {\r\n    if (this.filterType === \"caption\" || this.filterType === \"value\") {\r\n      this.#scheduleFilterProcessing();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This property lets you determine the options that will be applied to the\r\n   * filter.\r\n   */\r\n  @Prop() readonly filterOptions: ComboBoxFilterOptions = {};\r\n  @Watch(\"filterOptions\")\r\n  filterOptionsChanged() {\r\n    this.#scheduleFilterProcessing(\"immediate\");\r\n  }\r\n\r\n  /**\r\n   * This attribute lets you define what kind of filter is applied to items.\r\n   * Only items that satisfy the filter predicate will be displayed.\r\n   *\r\n   * | Value     | Details                                                                                       |\r\n   * | --------- | --------------------------------------------------------------------------------------------- |\r\n   * | `caption` | Show only the items whose `caption` satisfies the regex determinate by the `filter` property. |\r\n   * | `value`   | Show only the items whose `value` satisfies the regex determinate by the `filter` property.   |\r\n   * | `none`    | Show all items.                                                                               |\r\n   */\r\n  @Prop() readonly filterType: ComboBoxFilterType = \"none\";\r\n  @Watch(\"filterType\")\r\n  filterTypeChanged() {\r\n    this.#scheduleFilterProcessing(\"immediate\");\r\n  }\r\n\r\n  /**\r\n   * Specifies the items of the control\r\n   */\r\n  @Prop() readonly model: ComboBoxModel = [];\r\n  @Watch(\"model\")\r\n  modelChanged(newModel: ComboBoxModel) {\r\n    this.#mapValuesToItemInfo(newModel);\r\n  }\r\n\r\n  /**\r\n   * This attribute indicates that multiple options can be selected in the list.\r\n   * If it is not specified, then only one option can be selected at a time.\r\n   * When multiple is specified, the control will show a scrolling list box\r\n   * instead of a single line dropdown.\r\n   */\r\n  @Prop() readonly multiple: boolean = false;\r\n\r\n  /**\r\n   * A hint to the user of what can be entered in the control. Same as\r\n   * [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder)\r\n   * attribute for `input` elements.\r\n   */\r\n  @Prop() readonly placeholder: string;\r\n\r\n  /**\r\n   * This attribute indicates that the user cannot modify the value of the control.\r\n   * Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)\r\n   * attribute for `input` elements.\r\n   */\r\n  @Prop() readonly readonly: boolean = false;\r\n\r\n  /**\r\n   * Specifies whether the control can be resized. If `true` the control can be\r\n   * resized at runtime by dragging the edges or corners.\r\n   */\r\n  @Prop() readonly resizable: boolean = false;\r\n\r\n  /**\r\n   * Specifies the value (selected item) of the control.\r\n   */\r\n  @Prop({ mutable: true }) value?: string;\r\n  @Watch(\"value\")\r\n  valueChange(newValue: string) {\r\n    this.currentSelectedValue = newValue;\r\n    this.filter = this.#valueToItemInfo.get(newValue)?.caption;\r\n\r\n    // Update form value\r\n    this.internals.setFormValue(newValue);\r\n  }\r\n\r\n  /**\r\n   * Emitted when a change to the element's filter is committed by the user.\r\n   * Only applies if `filterType !== \"none\"`. It contains the information about\r\n   * the new filter value.\r\n   *\r\n   * This event is debounced by the `filterDebounce` value.\r\n   */\r\n  @Event() filterChange: EventEmitter<string>;\r\n\r\n  /**\r\n   * The `input` event is emitted when a change to the element's value is\r\n   * committed by the user.\r\n   */\r\n  @Event() input: EventEmitter<string>;\r\n\r\n  #scheduleFilterProcessing = (newImmediateFilter?: ImmediateFilter) => {\r\n    this.#applyFilters = true;\r\n\r\n    if (newImmediateFilter !== undefined) {\r\n      this.#immediateFilter ??= newImmediateFilter;\r\n    }\r\n  };\r\n\r\n  #filterFunction = (modelIsAlreadyFiltered: boolean) => {\r\n    // Reset immediate filter\r\n    this.#immediateFilter = undefined;\r\n\r\n    // New filter value\r\n    this.filterChange.emit(this.filter);\r\n\r\n    if (modelIsAlreadyFiltered) {\r\n      return;\r\n    }\r\n\r\n    this.#displayedValues.clear();\r\n\r\n    const filterOptions: ComboBoxFilterInfo = {\r\n      filter: this.filter,\r\n      filterOptions: this.filterOptions\r\n    };\r\n\r\n    for (let index = 0; index < this.model.length; index++) {\r\n      const item = this.model[index];\r\n\r\n      filterSubModel(\r\n        item,\r\n        this.filterType,\r\n        filterOptions,\r\n        this.#displayedValues\r\n      );\r\n    }\r\n\r\n    // Remove the selected value if it is no longer rendered\r\n    if (!this.#displayedValues.has(this.currentSelectedValue)) {\r\n      this.currentSelectedValue = undefined;\r\n    }\r\n  };\r\n\r\n  #updateFilters = () => {\r\n    if (this.filterType === \"none\") {\r\n      this.#displayedValues = undefined;\r\n      return;\r\n    }\r\n\r\n    const modelIsAlreadyFiltered = this.#isModelAlreadyFiltered();\r\n\r\n    // Remove queued filter processing\r\n    clearTimeout(this.#queuedFilterId);\r\n\r\n    const processWithDebounce =\r\n      this.filterDebounce > 0 &&\r\n      (this.filterType === \"caption\" || this.filterType === \"value\");\r\n\r\n    // Check if the model already contains the filtered items\r\n    if (!modelIsAlreadyFiltered) {\r\n      this.#displayedValues ??= new Set();\r\n    }\r\n\r\n    // Check if should filter with debounce\r\n    if (processWithDebounce && this.#immediateFilter !== \"immediate\") {\r\n      this.#queuedFilterId = setTimeout(() => {\r\n        this.#filterFunction(modelIsAlreadyFiltered);\r\n        forceUpdate(this); // After the filter processing is completed, force a re-render\r\n      }, this.filterDebounce);\r\n    }\r\n    // No debounce\r\n    else {\r\n      this.#filterFunction(modelIsAlreadyFiltered);\r\n    }\r\n  };\r\n\r\n  #mapValuesToItemInfo = (model: ComboBoxModel) => {\r\n    this.#valueToItemInfo.clear();\r\n\r\n    if (model == null) {\r\n      return;\r\n    }\r\n\r\n    model.forEach((item, firstLevelIndex) => {\r\n      const itemGroup = item as ComboBoxItemGroup;\r\n      const subItems = itemGroup.items;\r\n\r\n      if (subItems != null) {\r\n        // First level item\r\n        this.#valueToItemInfo.set(itemGroup.value, {\r\n          caption: itemGroup.caption,\r\n          index: {\r\n            type: \"first-level\",\r\n            firstLevelIndex: firstLevelIndex\r\n          },\r\n          firstExpanded: itemGroup.expandable && !!itemGroup.expanded\r\n        });\r\n\r\n        // Second level items\r\n        subItems.forEach((subItem, secondLevelIndex) => {\r\n          this.#valueToItemInfo.set(subItem.value, {\r\n            caption: subItem.caption,\r\n            index: {\r\n              type: \"nested\",\r\n              firstLevelIndex: firstLevelIndex,\r\n              secondLevelIndex: secondLevelIndex\r\n            }\r\n          });\r\n        });\r\n      }\r\n      // First level item\r\n      else {\r\n        this.#valueToItemInfo.set(item.value, {\r\n          caption: item.caption,\r\n          index: {\r\n            type: \"first-level\",\r\n            firstLevelIndex: firstLevelIndex\r\n          }\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  #checkAndEmitValueChange = () => {\r\n    if (!this.expanded && this.currentSelectedValue !== this.value) {\r\n      this.value = this.currentSelectedValue;\r\n\r\n      // Emit event\r\n      this.input.emit(this.value);\r\n    }\r\n  };\r\n\r\n  #itemLeafParts = (\r\n    item: ComboBoxItemLeaf,\r\n    insideAGroup: boolean,\r\n    isDisabled: boolean\r\n  ) =>\r\n    `item${insideAGroup ? \" nested\" : \"\"}${\r\n      isDisabled ? ` ${DISABLED_PART}` : \"\"\r\n    }${item.value === this.currentSelectedValue ? ` ${SELECTED_PART}` : \"\"}`;\r\n\r\n  #setResizeObserver = () => {\r\n    this.#borderSizeRAF = new SyncWithRAF();\r\n    this.#resizeObserver = new ResizeObserver(this.#updateBorderSizeRAF);\r\n\r\n    // Observe the size of the edges to know if the border\r\n    this.#resizeObserver.observe(this.el, { box: \"border-box\" });\r\n    this.#resizeObserver.observe(this.#maskRef ?? this.#selectRef);\r\n  };\r\n\r\n  #updateBorderSizeRAF = () => {\r\n    this.#borderSizeRAF.perform(this.#updateBorderSize);\r\n  };\r\n\r\n  #updateBorderSize = () => {\r\n    // - - - - - - - - - - - - - DOM read operations - - - - - - - - - - - - -\r\n    const computedStyle = getComputedStyle(this.el);\r\n\r\n    const negatedBorderInlineStartWidth = negateBorderValue(\r\n      computedStyle.borderInlineStartWidth\r\n    );\r\n    const negatedBorderInlineEndWidth = negateBorderValue(\r\n      computedStyle.borderInlineEndWidth\r\n    );\r\n    const negatedBorderBlockStartWidth = negateBorderValue(\r\n      computedStyle.borderBlockStartWidth\r\n    );\r\n    const negatedBorderBlockEndWidth = negateBorderValue(\r\n      computedStyle.borderBlockEndWidth\r\n    );\r\n\r\n    if (\r\n      this.#lastMaskInlineStart === negatedBorderInlineStartWidth &&\r\n      this.#lastMaskInlineEnd === negatedBorderInlineEndWidth &&\r\n      this.#lastMaskBlockStart === negatedBorderBlockStartWidth &&\r\n      this.#lastMaskBlockEnd === negatedBorderBlockEndWidth\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n    this.el.style.setProperty(\r\n      COMBO_BOX_MASK_INLINE_START,\r\n      negatedBorderInlineStartWidth\r\n    );\r\n\r\n    this.el.style.setProperty(\r\n      COMBO_BOX_MASK_INLINE_END,\r\n      negatedBorderInlineEndWidth\r\n    );\r\n\r\n    this.el.style.setProperty(\r\n      COMBO_BOX_MASK_BLOCK_START,\r\n      negatedBorderBlockStartWidth\r\n    );\r\n\r\n    this.el.style.setProperty(\r\n      COMBO_BOX_MASK_BLOCK_END,\r\n      negatedBorderBlockEndWidth\r\n    );\r\n\r\n    // Store borders to avoid an extra call from the resize observer due to\r\n    // the size of the mask is updated\r\n    this.#lastMaskInlineStart = negatedBorderInlineStartWidth;\r\n    this.#lastMaskInlineEnd = negatedBorderInlineEndWidth;\r\n    this.#lastMaskBlockStart = negatedBorderBlockStartWidth;\r\n    this.#lastMaskBlockEnd = negatedBorderBlockEndWidth;\r\n  };\r\n\r\n  #handleSelectChange = (event: Event) => {\r\n    event.preventDefault();\r\n\r\n    this.value = this.#selectRef.value;\r\n    this.currentSelectedValue = this.#selectRef.value;\r\n\r\n    // Emit event\r\n    this.input.emit(this.value);\r\n  };\r\n\r\n  #handleExpandedChange = (event: MouseEvent) => {\r\n    event.stopPropagation();\r\n    this.expanded = !this.expanded;\r\n  };\r\n\r\n  #handleExpandedChangeWithKeyBoard = (event: KeyboardEvent) => {\r\n    if (this.filterType === \"none\") {\r\n      const keyboardHandler = this.#keyEventsNoFiltersDictionary[event.code];\r\n\r\n      if (keyboardHandler) {\r\n        keyboardHandler(event);\r\n      }\r\n    }\r\n    // Keyboard implementation for filters\r\n    else {\r\n      if (\r\n        event.code === KEY_CODES.ESCAPE ||\r\n        event.code === KEY_CODES.HOME ||\r\n        event.code === KEY_CODES.END ||\r\n        event.code === KEY_CODES.ARROW_LEFT ||\r\n        event.code === KEY_CODES.ARROW_RIGHT\r\n      ) {\r\n        return;\r\n      }\r\n      const keyboardHandler = this.#keyEventsWithFiltersDictionary[event.code];\r\n\r\n      if (keyboardHandler) {\r\n        keyboardHandler(event);\r\n        return;\r\n      }\r\n      this.expanded ||= true;\r\n    }\r\n\r\n    this.#checkAndEmitValueChange();\r\n  };\r\n\r\n  #handlePopoverClose = (event: ChPopoverCustomEvent<any>) => {\r\n    event.stopPropagation();\r\n\r\n    // The focus must return to the Host when the popover is closed using the\r\n    // Escape key\r\n    this.expanded = false;\r\n\r\n    // TODO: When destroyItemsOnClose === true, StencilJS would throw 'The\r\n    // \"popoverClosed\" event was emitted, but the dispatcher node is no longer\r\n    // connected to the dom.', because the popoverOnClose event is emitted twice\r\n    // in the ch-popover\r\n\r\n    // Return the focus to the control if the popover was closed with the\r\n    // escape key or by clicking again the combo-box\r\n    if (focusComposedPath().includes(this.el)) {\r\n      this.el.focus();\r\n    }\r\n\r\n    this.#checkAndEmitValueChange();\r\n  };\r\n\r\n  #handleInputFilterChange = (event: InputEvent) => {\r\n    event.stopPropagation();\r\n    this.filter = this.#inputRef.value;\r\n  };\r\n\r\n  #displayPopoverWhenFiltersApplied = (event: MouseEvent) => {\r\n    event.stopPropagation();\r\n    this.expanded = true;\r\n  };\r\n\r\n  #focusInnerInputWhenFiltersApplied = (event: MouseEvent) => {\r\n    event.stopPropagation();\r\n    this.#inputRef.focus();\r\n  };\r\n\r\n  #updateCurrentSelectedValue = (itemValue: string) => (event: MouseEvent) => {\r\n    event.stopPropagation();\r\n    this.currentSelectedValue = itemValue;\r\n  };\r\n\r\n  #selectedValue = (itemValue: string) => (event: MouseEvent) => {\r\n    event.stopPropagation();\r\n\r\n    this.expanded = false;\r\n    this.currentSelectedValue = itemValue;\r\n    this.#checkAndEmitValueChange();\r\n  };\r\n\r\n  #toggleExpandInGroup = (itemGroup: ComboBoxItemGroup) => () => {\r\n    this.#valueToItemInfo.get(itemGroup.value).firstExpanded = true;\r\n    itemGroup.expanded = !itemGroup.expanded;\r\n\r\n    forceUpdate(this);\r\n  };\r\n\r\n  #getItemImageCustomVars = (\r\n    item: ComboBoxItemModel,\r\n    hasImages: boolean,\r\n    hasStartImg: boolean,\r\n    hasEndImg: boolean\r\n  ) =>\r\n    hasImages\r\n      ? {\r\n          \"--ch-combo-box-item-start-img\": hasStartImg\r\n            ? `url(\"${item.startImgSrc}\")`\r\n            : null,\r\n          \"--ch-combo-box-item-end-img\": hasEndImg\r\n            ? `url(\"${item.endImgSrc}\")`\r\n            : null\r\n        }\r\n      : undefined;\r\n\r\n  #isModelAlreadyFiltered = () => this.filterOptions.alreadyProcessed === true;\r\n\r\n  #customItemRender =\r\n    (\r\n      insideAGroup: boolean,\r\n      disabled: boolean | undefined,\r\n      filtersAreApplied: boolean\r\n    ) =>\r\n    (item: ComboBoxItemModel, index: number) => {\r\n      if (\r\n        filtersAreApplied &&\r\n        !this.#isModelAlreadyFiltered() &&\r\n        !this.#displayedValues.has(item.value)\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      const hasStartImg = !!item.startImgSrc;\r\n      const hasEndImg = !!item.endImgSrc;\r\n      const hasImages = hasStartImg || hasEndImg;\r\n\r\n      const customVars = this.#getItemImageCustomVars(\r\n        item,\r\n        hasImages,\r\n        hasStartImg,\r\n        hasEndImg\r\n      );\r\n\r\n      // This variable inherits the disabled state from group parents. Useful\r\n      // to propagate the disabled state in the child buttons\r\n      const isDisabled = disabled ?? item.disabled;\r\n      const itemGroup = item as ComboBoxItemGroup;\r\n      const canAddListeners = !isDisabled && this.expanded;\r\n\r\n      return itemGroup.items != null ? (\r\n        <div\r\n          key={item.value}\r\n          aria-controls={itemGroup.expandable ? `${index}__content` : null}\r\n          aria-expanded={\r\n            itemGroup.expandable ? (!!itemGroup.expanded).toString() : null\r\n          }\r\n          aria-labelledby={index.toString()}\r\n          role=\"group\"\r\n          class=\"group\"\r\n          part={`group${isDisabled ? ` ${DISABLED_PART}` : \"\"}`}\r\n        >\r\n          {itemGroup.expandable ? (\r\n            <button\r\n              class={{\r\n                // eslint-disable-next-line camelcase\r\n                group__header: true,\r\n                \"group--expandable\": true,\r\n                \"group--collapsed\": !itemGroup.expanded\r\n              }}\r\n              part={`group__header expandable${isDisabled ? \" disabled\" : \"\"} ${\r\n                this.expanded ? \"expanded\" : \"collapsed\"\r\n              }`}\r\n              style={customVars}\r\n              disabled={isDisabled}\r\n              type=\"button\"\r\n              onClick={\r\n                canAddListeners ? this.#toggleExpandInGroup(itemGroup) : null\r\n              }\r\n            >\r\n              <span\r\n                class={{\r\n                  \"group__header-caption\": true,\r\n                  [`start-img-type--${\r\n                    item.startImgType ?? \"background\"\r\n                  } img--start`]: hasStartImg,\r\n                  [`end-img-type--${item.endImgType ?? \"background\"} img--end`]:\r\n                    hasEndImg\r\n                }}\r\n                part=\"group__header-caption\"\r\n              >\r\n                {item.caption}\r\n              </span>\r\n            </button>\r\n          ) : (\r\n            <span\r\n              id={index.toString()}\r\n              class={{\r\n                // eslint-disable-next-line camelcase\r\n                group__header: true,\r\n                [`start-img-type--${\r\n                  item.startImgType ?? \"background\"\r\n                } img--start`]: hasStartImg,\r\n                [`end-img-type--${item.endImgType ?? \"background\"} img--end`]:\r\n                  hasEndImg\r\n              }}\r\n              part={`group__header${this.disabled ? \" disabled\" : \"\"}`}\r\n              style={customVars}\r\n            >\r\n              {item.caption}\r\n            </span>\r\n          )}\r\n\r\n          <div\r\n            key={`${index}__content`}\r\n            id={itemGroup.expandable ? `${index}__content` : null}\r\n            class={{\r\n              // eslint-disable-next-line camelcase\r\n              group__content: true,\r\n              \"group__content--collapsed\":\r\n                itemGroup.expandable && !itemGroup.expanded\r\n            }}\r\n            part=\"group__content\"\r\n          >\r\n            {(!itemGroup.expandable ||\r\n              this.#valueToItemInfo.get(itemGroup.value).firstExpanded) &&\r\n              itemGroup.items.map(\r\n                this.#customItemRender(true, isDisabled, filtersAreApplied)\r\n              )}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <button\r\n          key={item.value}\r\n          role=\"option\"\r\n          aria-selected={item.value === this.currentSelectedValue}\r\n          tabindex=\"-1\"\r\n          class={\r\n            hasImages\r\n              ? {\r\n                  leaf: true,\r\n                  [`start-img-type--${\r\n                    item.startImgType ?? \"background\"\r\n                  } img--start`]: hasStartImg,\r\n                  [`end-img-type--${item.endImgType ?? \"background\"} img--end`]:\r\n                    hasEndImg\r\n                }\r\n              : undefined\r\n          }\r\n          part={this.#itemLeafParts(item, insideAGroup, isDisabled)}\r\n          style={customVars}\r\n          disabled={isDisabled}\r\n          type=\"button\"\r\n          onClick={canAddListeners ? this.#selectedValue(item.value) : null}\r\n          onMouseEnter={\r\n            canAddListeners\r\n              ? this.#updateCurrentSelectedValue(item.value)\r\n              : null\r\n          }\r\n        >\r\n          {item.caption}\r\n        </button>\r\n      );\r\n    };\r\n\r\n  #nativeItemRender = (item: ComboBoxItemModel) =>\r\n    (item as ComboBoxItemGroup).items != null ? (\r\n      <optgroup label={item.caption}>\r\n        {(item as ComboBoxItemGroup).items.map(this.#nativeItemRender)}\r\n      </optgroup>\r\n    ) : (\r\n      <option\r\n        key={item.value}\r\n        value={item.value}\r\n        disabled={item.disabled}\r\n        selected={item.value === this.value}\r\n      >\r\n        {item.caption}\r\n      </option>\r\n    );\r\n\r\n  #nativeRender = () => [\r\n    <span\r\n      aria-hidden={!this.currentSelectedValue ? \"true\" : null}\r\n      class=\"value\"\r\n    >\r\n      {this.currentSelectedValue\r\n        ? this.#valueToItemInfo.get(this.currentSelectedValue)?.caption ??\r\n          this.placeholder\r\n        : this.placeholder}\r\n    </span>,\r\n\r\n    <select\r\n      aria-label={this.accessibleName ?? this.#accessibleNameFromExternalLabel}\r\n      disabled={this.disabled}\r\n      onChange={!this.disabled ? this.#handleSelectChange : null}\r\n      ref={el => (this.#selectRef = el)}\r\n    >\r\n      {this.model.map(this.#nativeItemRender)}\r\n    </select>\r\n  ];\r\n\r\n  connectedCallback() {\r\n    this.#popoverId ??= `ch-combo-box-popover-${autoId++}`;\r\n    this.#mapValuesToItemInfo(this.model);\r\n\r\n    this.internals.setFormValue(this.value);\r\n    this.currentSelectedValue = this.value;\r\n\r\n    this.filter = this.#valueToItemInfo.get(this.value)?.caption;\r\n\r\n    const labels = this.internals.labels;\r\n\r\n    // Get external aria-label\r\n    if (!this.accessibleName && labels?.length > 0) {\r\n      this.#accessibleNameFromExternalLabel = labels[0].textContent.trim();\r\n    }\r\n  }\r\n\r\n  // Don't trigger the render method if the only changed property is \"filter\"\r\n  componentShouldUpdate(_newValue, _oldValue, name: string) {\r\n    if (name === \"filter\") {\r\n      // We need to check this condition here, because only the \"filter\" prop\r\n      // could be updated and because we return false (to avoid extra re-renders)\r\n      // the componentWillRender method won't be dispatched\r\n      if (this.#applyFilters) {\r\n        this.#updateFilters(); // TODO: THERE IS A BUG IF THE COMBO-BOX STARTS WITH FILTERS APPLIED\r\n        this.#applyFilters = false;\r\n      }\r\n\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  componentWillRender() {\r\n    // If the \"filter\" property was not updated, we still have to check if we\r\n    // should update filters. This verification MUST NOT be implemented in the\r\n    // componentShouldUpdate method, because not all properties are updated in\r\n    // that method, leaving to race-conditions in some cases when checking\r\n    // filters in the componentShouldUpdate method\r\n\r\n    if (this.#applyFilters) {\r\n      this.#updateFilters(); // TODO: THERE IS A BUG IF THE COMBO-BOX STARTS WITH FILTERS APPLIED\r\n      this.#applyFilters = false;\r\n    }\r\n  }\r\n\r\n  componentDidLoad() {\r\n    this.#setResizeObserver();\r\n  }\r\n\r\n  componentDidRender() {\r\n    // Focus the input when there are filters and the control is expanded\r\n    if (this.filterType !== \"none\" && this.expanded) {\r\n      this.#focusSelectAfterNextRender = false;\r\n      this.#inputRef.focus();\r\n      return;\r\n    }\r\n\r\n    // Only focus elements when filter are not applied\r\n    if (!this.#focusSelectAfterNextRender) {\r\n      return;\r\n    }\r\n    this.#focusSelectAfterNextRender = false;\r\n\r\n    const selectedElement = this.el.shadowRoot.querySelector(\r\n      SELECTED_ITEM_SELECTOR\r\n    ) as HTMLElement | undefined;\r\n\r\n    // Focus the selected element\r\n    if (selectedElement) {\r\n      // Wait until the JS has been executed to avoid race conditions when\r\n      // rendering elements in the top layer and trying to focus them\r\n      requestAnimationFrame(() => {\r\n        selectedElement.focus();\r\n      });\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    if (this.#resizeObserver) {\r\n      this.#resizeObserver.disconnect();\r\n      this.#resizeObserver = undefined; // Free the memory\r\n    }\r\n\r\n    this.#borderSizeRAF = undefined; // Free the memory\r\n  }\r\n\r\n  render() {\r\n    const filtersAreApplied = this.filterType !== \"none\";\r\n    const comboBoxIsInteractive = !this.readonly && !this.disabled;\r\n    const destroyRender = this.destroyItemsOnClose && !this.expanded;\r\n\r\n    return (\r\n      <Host\r\n        // Make the host focusable since the input is disabled when there are no\r\n        // filters\r\n        tabindex={\r\n          !mobileDevice && !filtersAreApplied && !this.disabled ? \"0\" : null\r\n        }\r\n        class={this.disabled ? \"ch-disabled\" : null}\r\n        onKeyDown={\r\n          !mobileDevice && comboBoxIsInteractive\r\n            ? this.#handleExpandedChangeWithKeyBoard\r\n            : null\r\n        }\r\n        onClick={\r\n          !mobileDevice && filtersAreApplied && comboBoxIsInteractive\r\n            ? this.#focusInnerInputWhenFiltersApplied\r\n            : null\r\n        }\r\n      >\r\n        {mobileDevice\r\n          ? this.#nativeRender()\r\n          : [\r\n              <div\r\n                key=\"mask\"\r\n                // This mask is used to capture click events that must open the\r\n                // popover. If we capture click events in the Host, clicking external\r\n                // label would open the combo-box's window\r\n                aria-hidden=\"true\"\r\n                class={{\r\n                  mask: true,\r\n                  \"mask--no-filters\": this.filterType === \"none\"\r\n                }}\r\n                onClickCapture={\r\n                  !filtersAreApplied && comboBoxIsInteractive\r\n                    ? this.#handleExpandedChange\r\n                    : null\r\n                }\r\n                ref={el => (this.#maskRef = el)}\r\n              >\r\n                <input\r\n                  // We must place the input inside the mask, otherwise it\r\n                  // won't stretch to the Host size\r\n                  key=\"combobox\"\r\n                  role=\"combobox\"\r\n                  aria-controls=\"popover\"\r\n                  // This reset is necessary, since we use \"disabled\" to\r\n                  // disallow the focus and text selection in the input when\r\n                  // the combo-box has no filters\r\n                  aria-disabled={\r\n                    !this.disabled && !filtersAreApplied ? \"false\" : null\r\n                  }\r\n                  aria-expanded={this.expanded.toString()}\r\n                  aria-haspopup=\"true\"\r\n                  aria-label={\r\n                    this.accessibleName ?? this.#accessibleNameFromExternalLabel\r\n                  }\r\n                  autocomplete=\"off\"\r\n                  class={{\r\n                    value: true,\r\n                    \"value--filters\": filtersAreApplied,\r\n                    \"value--readonly\": !filtersAreApplied\r\n                  }}\r\n                  disabled={this.disabled || !filtersAreApplied}\r\n                  placeholder={this.placeholder}\r\n                  readOnly={this.readonly || !filtersAreApplied}\r\n                  value={\r\n                    filtersAreApplied\r\n                      ? this.filter\r\n                      : this.#valueToItemInfo.get(this.currentSelectedValue)\r\n                          ?.caption\r\n                  }\r\n                  onClickCapture={\r\n                    filtersAreApplied && !this.expanded && comboBoxIsInteractive\r\n                      ? this.#displayPopoverWhenFiltersApplied\r\n                      : null\r\n                  }\r\n                  onInputCapture={\r\n                    filtersAreApplied && comboBoxIsInteractive\r\n                      ? this.#handleInputFilterChange\r\n                      : null\r\n                  }\r\n                  ref={el => (this.#inputRef = el)}\r\n                ></input>\r\n              </div>,\r\n\r\n              this.#firstExpanded && !destroyRender && (\r\n                <ch-popover\r\n                  key=\"popover\"\r\n                  id=\"popover\"\r\n                  role=\"listbox\"\r\n                  aria-hidden=\"false\"\r\n                  part=\"window\"\r\n                  actionById\r\n                  actionElement={this.el as unknown as HTMLButtonElement} // This is a WA. We should remove it\r\n                  blockAlign=\"outside-end\"\r\n                  inlineAlign=\"inside-start\"\r\n                  closeOnClickOutside\r\n                  hidden={!this.expanded}\r\n                  popover=\"manual\"\r\n                  resizable={this.resizable}\r\n                  inlineSizeMatch=\"action-element-as-minimum\"\r\n                  positionTry=\"flip-block\"\r\n                  onPopoverClosed={\r\n                    this.expanded && comboBoxIsInteractive\r\n                      ? this.#handlePopoverClose\r\n                      : null\r\n                  }\r\n                >\r\n                  <div class=\"window__content\" part=\"window__content\">\r\n                    {this.model.map(\r\n                      this.#customItemRender(\r\n                        false,\r\n                        undefined,\r\n                        filtersAreApplied\r\n                      )\r\n                    )}\r\n                  </div>\r\n                </ch-popover>\r\n              )\r\n            ]}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","import { KEY_CODES } from \"../../common/reserverd-names\";\r\n\r\n// Keys\r\ntype DropDownKeyDownEvents =\r\n  | typeof KEY_CODES.ARROW_UP\r\n  | typeof KEY_CODES.ARROW_RIGHT\r\n  | typeof KEY_CODES.ARROW_DOWN\r\n  | typeof KEY_CODES.ARROW_LEFT\r\n  | typeof KEY_CODES.HOME\r\n  | typeof KEY_CODES.END\r\n  | typeof KEY_CODES.ESCAPE;\r\n\r\nconst DROPDOWN_TAG_NAME = \"ch-dropdown\";\r\nconst FIRST_DROPDOWN = `:scope>${DROPDOWN_TAG_NAME}` as const;\r\nconst LAST_DROPDOWN = `:scope>${DROPDOWN_TAG_NAME}:last-of-type` as const;\r\n\r\nconst elementIsDropdown = (element: Element) =>\r\n  element?.tagName?.toLowerCase() === DROPDOWN_TAG_NAME;\r\n\r\nconst getFocusedDropdown = (event: KeyboardEvent) =>\r\n  event.target as HTMLChDropdownElement;\r\n\r\n// First level\r\nconst getDropdownFirstItem = (dropdown: HTMLChDropdownElement) =>\r\n  dropdown.querySelector(FIRST_DROPDOWN) as HTMLChDropdownElement;\r\n\r\nconst getDropdownLastItem = (dropdown: HTMLChDropdownElement) =>\r\n  dropdown.querySelector(LAST_DROPDOWN) as HTMLChDropdownElement;\r\n\r\n// Sibling\r\nconst getFirstSiblingItem = (sibling: HTMLChDropdownElement) =>\r\n  sibling.parentElement.querySelector(FIRST_DROPDOWN) as HTMLChDropdownElement;\r\n\r\nconst getLastSiblingItem = (dropdown: HTMLChDropdownElement) =>\r\n  dropdown.parentElement.querySelector(LAST_DROPDOWN) as HTMLChDropdownElement;\r\n\r\nexport const dropdownKeyEventsDictionary: {\r\n  [key in DropDownKeyDownEvents]: (event?: KeyboardEvent) => void;\r\n} = {\r\n  [KEY_CODES.ARROW_DOWN]: event => {\r\n    const focusedElement = getFocusedDropdown(event);\r\n    if (!elementIsDropdown(focusedElement)) {\r\n      return;\r\n    }\r\n    event.preventDefault(); // Prevent window's scroll\r\n\r\n    if (focusedElement.level === -1) {\r\n      getDropdownFirstItem(focusedElement).focusElement();\r\n      return;\r\n    }\r\n\r\n    // The focus was in a subitem. Focus the next subitem\r\n    let nextSiblingToFocus =\r\n      focusedElement.nextElementSibling as HTMLChDropdownElement;\r\n\r\n    if (!elementIsDropdown(nextSiblingToFocus)) {\r\n      nextSiblingToFocus = getFirstSiblingItem(focusedElement);\r\n    }\r\n    nextSiblingToFocus.focusElement();\r\n  },\r\n\r\n  [KEY_CODES.ARROW_UP]: event => {\r\n    const focusedElement = getFocusedDropdown(event);\r\n    if (!elementIsDropdown(focusedElement)) {\r\n      return;\r\n    }\r\n    event.preventDefault(); // Prevent window's scroll\r\n\r\n    if (focusedElement.level === -1) {\r\n      getDropdownLastItem(focusedElement).focusElement();\r\n      return;\r\n    }\r\n\r\n    // The focus was in a subitem. Focus the next subitem\r\n    let nextSiblingToFocus =\r\n      focusedElement.previousElementSibling as HTMLChDropdownElement;\r\n\r\n    if (!elementIsDropdown(nextSiblingToFocus)) {\r\n      nextSiblingToFocus = getLastSiblingItem(focusedElement);\r\n    }\r\n    nextSiblingToFocus.focusElement();\r\n  },\r\n\r\n  [KEY_CODES.ARROW_RIGHT]: async event => {\r\n    const focusedElement = getFocusedDropdown(event);\r\n    if (!elementIsDropdown(focusedElement)) {\r\n      return;\r\n    }\r\n    event.preventDefault(); // Prevent window's scroll\r\n\r\n    if (focusedElement.level === -1) {\r\n      return;\r\n    }\r\n\r\n    await focusedElement.expandDropdown();\r\n\r\n    // Wait until the dropdown content has been rendered\r\n    requestAnimationFrame(() => {\r\n      getDropdownFirstItem(focusedElement).focusElement();\r\n    });\r\n  },\r\n\r\n  [KEY_CODES.ARROW_LEFT]: async event => {\r\n    const focusedElement = getFocusedDropdown(event);\r\n    if (!elementIsDropdown(focusedElement)) {\r\n      return;\r\n    }\r\n    event.preventDefault(); // Prevent window's scroll\r\n\r\n    if (focusedElement.level === -1) {\r\n      return;\r\n    }\r\n\r\n    const parentDropdown =\r\n      focusedElement.parentElement as HTMLChDropdownElement;\r\n\r\n    await parentDropdown.collapseDropdown();\r\n    parentDropdown.focusElement();\r\n  },\r\n\r\n  [KEY_CODES.HOME]: event => {\r\n    const focusedElement = getFocusedDropdown(event);\r\n    if (!elementIsDropdown(focusedElement)) {\r\n      return;\r\n    }\r\n    event.preventDefault(); // Prevent window's scroll\r\n\r\n    getFirstSiblingItem(focusedElement).focusElement();\r\n  },\r\n\r\n  [KEY_CODES.END]: event => {\r\n    const focusedElement = getFocusedDropdown(event);\r\n    if (!elementIsDropdown(focusedElement)) {\r\n      return;\r\n    }\r\n    event.preventDefault(); // Prevent window's scroll\r\n\r\n    getLastSiblingItem(focusedElement).focusElement();\r\n  },\r\n\r\n  [KEY_CODES.ESCAPE]: () => {\r\n    // this.#closeDropdown();\r\n    // this.#returnFocusToButton();\r\n  }\r\n};\r\n","ch-dropdown-render {\r\n  display: contents;\r\n}\r\n\r\n.ch-dropdown-separator {\r\n  display: grid;\r\n  block-size: 1px;\r\n  background-color: color-mix(in srgb, currentColor 25%, transparent);\r\n  pointer-events: none;\r\n}\r\n","import { Component, Element, forceUpdate, h, Prop } from \"@stencil/core\";\r\nimport { DropdownItemModel, DropdownModel } from \"./types\";\r\nimport { DropdownPosition } from \"./internal/dropdown/types\";\r\nimport { fromGxImageToURL } from \"../tree-view/genexus-implementation\";\r\nimport { dropdownKeyEventsDictionary } from \"./utils\";\r\nimport { DROPDOWN_EXPORT_PARTS } from \"../../common/reserverd-names\";\r\n\r\n@Component({\r\n  tag: \"ch-dropdown-render\",\r\n  styleUrl: \"dropdown-render.scss\",\r\n  shadow: false // Necessary to avoid focus capture\r\n})\r\nexport class ChDropdownRender {\r\n  #showHeader = false;\r\n  #showFooter = false;\r\n\r\n  #mainDropdownExpanded = false;\r\n\r\n  @Element() el: HTMLChDropdownRenderElement;\r\n\r\n  /**\r\n   * This attribute lets you specify the label for the first expandable button.\r\n   * Important for accessibility.\r\n   */\r\n  @Prop() readonly buttonAccessibleName: string;\r\n\r\n  /**\r\n   * A CSS class to set as the `ch-dropdown` element class.\r\n   */\r\n  @Prop() readonly cssClass: string = \"dropdown\";\r\n\r\n  /**\r\n   * Specifies the parts that are exported by the internal dropdown. This\r\n   * property is useful to override the exported parts.\r\n   */\r\n  @Prop() readonly exportParts: string = DROPDOWN_EXPORT_PARTS;\r\n\r\n  /**\r\n   * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.\r\n   */\r\n  @Prop() readonly gxImageConstructor: (name: string) => any;\r\n\r\n  /**\r\n   * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.\r\n   */\r\n  @Prop() readonly gxSettings: any;\r\n\r\n  /**\r\n   * This callback is executed when an item is clicked.\r\n   */\r\n  @Prop() readonly itemClickCallback: (\r\n    event: UIEvent,\r\n    target: string,\r\n    itemId: string\r\n  ) => void;\r\n\r\n  /**\r\n   * This property lets you define the model of the ch-dropdown control.\r\n   */\r\n  @Prop() readonly model: DropdownModel;\r\n\r\n  /**\r\n   * Specifies the position of the dropdown section that is placed relative to\r\n   * the expandable button.\r\n   */\r\n  @Prop() readonly position: DropdownPosition = \"Center_OutsideEnd\";\r\n\r\n  /**\r\n   * A CSS class to set as the `ch-dropdown-item` element class.\r\n   * This default class is used for the items that don't have an explicit class.\r\n   */\r\n  @Prop() readonly separatorCssClass: string = \"dropdown-separator\";\r\n\r\n  /**\r\n   * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.\r\n   */\r\n  @Prop() readonly useGxRender: boolean = false;\r\n\r\n  // /**\r\n  //  * Fired when the visibility of the dropdown section is changed\r\n  //  */\r\n  // @Event() expandedChange: EventEmitter<boolean>;\r\n\r\n  #handleItemClick = (target: string, itemId: string) => (event: UIEvent) => {\r\n    if (this.itemClickCallback) {\r\n      this.itemClickCallback(event, target, itemId);\r\n    }\r\n  };\r\n\r\n  #renderItem = (level: number) => (item: DropdownItemModel) => {\r\n    const hasItems = item.items?.length > 0;\r\n\r\n    return [\r\n      <ch-dropdown\r\n        exportparts={this.exportParts}\r\n        id={item.id}\r\n        caption={item.caption}\r\n        class={item.class || this.cssClass}\r\n        endImgSrc={\r\n          this.useGxRender\r\n            ? fromGxImageToURL(\r\n                item.endImgSrc,\r\n                this.gxSettings,\r\n                this.gxImageConstructor\r\n              )\r\n            : item.endImgSrc\r\n        }\r\n        endImgType={item.endImgType ?? \"background\"}\r\n        href={item.link?.url}\r\n        itemClickCallback={this.#handleItemClick(item.link?.url, item.id)}\r\n        leaf={!hasItems}\r\n        level={level}\r\n        position={item.itemsPosition || \"OutsideEnd_InsideStart\"}\r\n        shortcut={item.shortcut}\r\n        startImgSrc={\r\n          this.useGxRender\r\n            ? fromGxImageToURL(\r\n                item.startImgSrc,\r\n                this.gxSettings,\r\n                this.gxImageConstructor\r\n              )\r\n            : item.startImgSrc\r\n        }\r\n        startImgType={item.startImgType ?? \"background\"}\r\n        onExpandedChange={\r\n          !item.wasExpanded ? this.#handleItemExpanded(item) : null\r\n        }\r\n      >\r\n        {hasItems &&\r\n          item.wasExpanded &&\r\n          item.items.map(this.#renderItem(level + 1))}\r\n\r\n        {\r\n          // Render a dummy element if the control was not expanded and has items\r\n          hasItems && !item.wasExpanded && <ch-dropdown></ch-dropdown>\r\n        }\r\n      </ch-dropdown>,\r\n\r\n      item.showSeparator && (\r\n        <div\r\n          aria-hidden=\"true\"\r\n          class={\r\n            \"ch-dropdown-separator \" +\r\n            (item.separatorClass || this.separatorCssClass)\r\n          }\r\n        ></div>\r\n      )\r\n    ];\r\n  };\r\n\r\n  #handleKeyDownEvents = (event: KeyboardEvent) => {\r\n    const keyEventHandler: ((event?: KeyboardEvent) => void) | undefined =\r\n      dropdownKeyEventsDictionary[event.code];\r\n\r\n    if (keyEventHandler) {\r\n      event.stopPropagation();\r\n      keyEventHandler(event);\r\n    }\r\n  };\r\n\r\n  #handleItemExpanded = (item: DropdownItemModel) => () => {\r\n    item.wasExpanded = true;\r\n    forceUpdate(this);\r\n  };\r\n\r\n  #handleMainDropdownExpand = () => {\r\n    this.#mainDropdownExpanded = true;\r\n    forceUpdate(this);\r\n  };\r\n\r\n  componentWillLoad() {\r\n    this.#showHeader = !!this.el.querySelector(':scope>[slot=\"header\"]');\r\n    this.#showFooter = !!this.el.querySelector(':scope>[slot=\"footer\"]');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ch-dropdown\r\n        exportparts={this.exportParts}\r\n        buttonAccessibleName={this.buttonAccessibleName}\r\n        class={this.cssClass}\r\n        level={-1}\r\n        showHeader={this.#showHeader}\r\n        showFooter={this.#showFooter}\r\n        position={this.position}\r\n        onKeyDown={\r\n          this.#mainDropdownExpanded ? this.#handleKeyDownEvents : null\r\n        }\r\n        onExpandedChange={\r\n          !this.#mainDropdownExpanded ? this.#handleMainDropdownExpand : null\r\n        }\r\n      >\r\n        <slot name=\"action\" slot=\"action\" />\r\n\r\n        {this.#showHeader && <slot name=\"header\" slot=\"header\" />}\r\n\r\n        {this.#showFooter && <slot name=\"footer\" slot=\"footer\" />}\r\n\r\n        {this.#mainDropdownExpanded &&\r\n          this.model != null &&\r\n          this.model.map(this.#renderItem(0))}\r\n      </ch-dropdown>\r\n    );\r\n  }\r\n}\r\n","@import \"../../common/_base\";\r\n\r\n@include box-sizing();\r\n\r\n$option-checked-background-color: transparent;\r\n$option-checked-border-color: currentColor;\r\n$option-checked-color: currentColor;\r\n\r\n:host {\r\n  /**\r\n   * @prop --ch-radio-group__radio-container-size:\r\n   * Specifies the size for the container of the `radio__input` and `radio__option` elements.\r\n   * @default min(1em, 20px)\r\n   */\r\n  --ch-radio-group__radio-container-size: min(1em, 20px);\r\n\r\n  /**\r\n   * @prop --ch-radio-group__radio-option-size:\r\n   * Specifies the size for the `radio__option` element.\r\n   * @default 50%\r\n   */\r\n  --ch-radio-group__radio-option-size: 50%;\r\n\r\n  display: inline-grid;\r\n  grid-auto-rows: max-content;\r\n\r\n  // This property is necessary to ensure the focus is not delegated to the\r\n  // checked radio when clicking the background of the control, but not an item\r\n  pointer-events: none;\r\n}\r\n\r\n.radio-item {\r\n  display: flex;\r\n  align-items: center;\r\n  align-self: stretch;\r\n\r\n  // Avoid zooming on double tap\r\n  touch-action: manipulation;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n  inline-size: var(--ch-radio-group__radio-container-size);\r\n  block-size: var(--ch-radio-group__radio-container-size);\r\n  border: 1px solid $option-checked-border-color;\r\n  border-radius: 50%;\r\n\r\n  &--checked {\r\n    background-color: $option-checked-background-color;\r\n  }\r\n}\r\n\r\n.input {\r\n  display: flex;\r\n  inline-size: 100%;\r\n  block-size: 100%;\r\n  opacity: 0;\r\n  margin: 0;\r\n  padding: 0;\r\n  cursor: pointer;\r\n\r\n  &--enabled {\r\n    pointer-events: all;\r\n  }\r\n}\r\n\r\n.option {\r\n  position: absolute;\r\n  inline-size: var(--ch-radio-group__radio-option-size);\r\n  block-size: var(--ch-radio-group__radio-option-size);\r\n  background-color: $option-checked-color;\r\n  border-radius: 50%;\r\n  pointer-events: none;\r\n\r\n  &--unchecked {\r\n    opacity: 0;\r\n    visibility: hidden;\r\n  }\r\n}\r\n\r\n.label {\r\n  cursor: pointer;\r\n\r\n  &--enabled {\r\n    pointer-events: all;\r\n  }\r\n}\r\n","import {\r\n  AttachInternals,\r\n  Component,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  Watch,\r\n  h\r\n} from \"@stencil/core\";\r\nimport { RadioGroupItemModel, RadioGroupModel } from \"./types\";\r\nimport { RADIO_ITEM_PARTS_DICTIONARY } from \"../../common/reserverd-names\";\r\n\r\nconst PARTS = (checked: boolean, disabled: boolean) => {\r\n  const checkedValue = checked\r\n    ? RADIO_ITEM_PARTS_DICTIONARY.CHECKED\r\n    : RADIO_ITEM_PARTS_DICTIONARY.UNCHECKED;\r\n\r\n  return disabled\r\n    ? `${RADIO_ITEM_PARTS_DICTIONARY.DISABLED} ${checkedValue}`\r\n    : checkedValue;\r\n};\r\n\r\n/**\r\n * The radio group control is used to render a short list of mutually exclusive options.\r\n *\r\n * It contains radio items to allow users to select one option from the list of options.\r\n *\r\n * @part radio__item - The radio item element.\r\n * @part radio__container - The container that serves as a wrapper for the `input` and the `option` parts.\r\n * @part radio__input - The invisible input element that implements the interactions for the component. This part must be kept \"invisible\".\r\n * @part radio__option - The actual \"input\" that is rendered above the `input` part. This part has `position: absolute` and `pointer-events: none`.\r\n * @part radio__label - The label that is rendered when the `caption` property is not empty.\r\n *\r\n * @part checked - Present in the `radio__item`, `radio__option`, `radio__label` and `radio__container` parts when the control is checked (`checked` === `true`).\r\n * @part disabled - Present in the `radio__item`, `radio__option`, `radio__label` and `radio__container` parts when the control is disabled (`disabled` === `true`).\r\n * @part unchecked - Present in the `radio__item`, `radio__option`, `radio__label` and `radio__container` parts when the control is not checked (`checked` !== `true`).\r\n */\r\n@Component({\r\n  formAssociated: true,\r\n  shadow: { delegatesFocus: true },\r\n  styleUrl: \"radio-group-render.scss\",\r\n  tag: \"ch-radio-group-render\"\r\n})\r\nexport class ChRadioGroupRender {\r\n  @AttachInternals() internals: ElementInternals;\r\n\r\n  /**\r\n   * This attribute lets you specify if the radio-group is disabled.\r\n   * If disabled, it will not fire any user interaction related event\r\n   * (for example, click event).\r\n   */\r\n  @Prop() readonly disabled: boolean = false;\r\n\r\n  /**\r\n   * This property lets you define the items of the ch-radio-group-render control.\r\n   */\r\n  @Prop() readonly model?: RadioGroupModel;\r\n\r\n  /**\r\n   * The value of the control.\r\n   */\r\n  @Prop({ mutable: true }) value: string;\r\n  @Watch(\"value\")\r\n  handleValueChange(newValue: string) {\r\n    // Update form value\r\n    this.internals.setFormValue(newValue);\r\n  }\r\n\r\n  /**\r\n   * Fired when the selected item change. It contains the information about the\r\n   * new selected value.\r\n   */\r\n  @Event() change: EventEmitter<string>;\r\n\r\n  #handleCheckedInputChange = (value: string) => (event: InputEvent) => {\r\n    event.stopPropagation();\r\n    this.value = value;\r\n\r\n    this.change.emit(value);\r\n  };\r\n\r\n  #itemRender = (item: RadioGroupItemModel, index: number) => {\r\n    const checked = this.value === item.value;\r\n    const disabled = item.disabled || this.disabled;\r\n\r\n    const additionalParts = PARTS(checked, disabled);\r\n\r\n    return (\r\n      <div\r\n        class=\"radio-item\"\r\n        part={`${RADIO_ITEM_PARTS_DICTIONARY.RADIO_ITEM} ${additionalParts}`}\r\n      >\r\n        <div\r\n          class={{\r\n            container: true,\r\n            \"container--checked\": checked\r\n          }}\r\n          part={`${RADIO_ITEM_PARTS_DICTIONARY.CONTAINER} ${additionalParts}`}\r\n        >\r\n          <input\r\n            id={item.caption ? `radio-item-${index}` : null}\r\n            name=\"radio-group\"\r\n            aria-label={!item.caption ? item.accessibleName : null}\r\n            class={{ input: true, \"input--enabled\": !disabled }}\r\n            part={RADIO_ITEM_PARTS_DICTIONARY.INPUT}\r\n            type=\"radio\"\r\n            checked={checked}\r\n            disabled={disabled}\r\n            value={item.value}\r\n            onInput={this.#handleCheckedInputChange(item.value)}\r\n          />\r\n          <div\r\n            class={{\r\n              option: true,\r\n              \"option--unchecked\": !checked\r\n            }}\r\n            part={`${RADIO_ITEM_PARTS_DICTIONARY.OPTION} ${additionalParts}`}\r\n            aria-hidden=\"true\"\r\n          ></div>\r\n        </div>\r\n\r\n        {item.caption && (\r\n          <label\r\n            class={{ label: true, \"label--enabled\": !disabled }}\r\n            part={`${RADIO_ITEM_PARTS_DICTIONARY.LABEL} ${additionalParts}`}\r\n            htmlFor={`radio-item-${index}`}\r\n          >\r\n            {item.caption}\r\n          </label>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  connectedCallback() {\r\n    // Set form value\r\n    this.internals.setFormValue(this.value);\r\n  }\r\n\r\n  render() {\r\n    return <Host role=\"radiogroup\">{this.model?.map(this.#itemRender)}</Host>;\r\n  }\r\n}\r\n"],"mappings":"yQAQA,MAAMA,EAAiB,CACrBC,EACAC,EACAC,IAEAA,EACIF,EAAeG,SAASF,GACxBD,EAAeI,cAAcD,SAASF,EAAOG,eAEnD,MAAMC,EAAmB,CACvBL,EACAC,EACAK,IAEAA,GAAeC,kBACXP,EAAeQ,MAAMP,KAAY,KACjCF,EAAeC,EAAgBC,EAAQK,GAAeJ,WAE5D,MAAMO,EAKF,CACFC,QAAS,CAACC,EAAMC,IACdA,EAAWX,OACPI,EACEM,EAAKD,SAAW,GAChBE,EAAWX,OACXW,EAAWN,eAEb,KAENO,MAAO,CAACF,EAAMC,IACZA,EAAWX,OACPI,EACEM,EAAKE,MACLD,EAAWX,OACXW,EAAWN,eAEb,KAENQ,KAAM,IAAM,MAGd,MAAMC,EAAgB,CACpBC,EACAL,EACAC,IAEAA,EAAWN,eAAeW,+BAAiC,MACtDR,EAAiBO,GAAYL,EAAMC,GACpCH,EAAiBO,GAAYL,EAAMC,GAElC,MAAMM,EAAiB,CAC5BP,EACAK,EACAJ,EACAO,KAGA,IAAIC,EAAqB,MACzB,MAAMC,EAAgBV,EAA2BW,MAEjD,GAAID,GAAgB,KAAM,CACxB,IAAK,IAAIE,EAAQ,EAAGA,EAAQF,EAAaG,OAAQD,IAAS,CACxD,MAAME,EAAWJ,EAAaE,GAC9B,MAAMG,EAAsBR,EAC1BO,EACAT,EACAJ,EACAO,GAGFC,IAAuBM,C,EAM3B,MAAMC,EACJP,GAAsBL,EAAcC,EAAYL,EAAMC,GAGxD,GAAIe,EAAiB,CACnBR,EAAgBS,IAAIjB,EAAKE,M,CAG3B,OAAOc,CAAe,EChGxB,MAAME,EAAc,4tJACpB,MAAAC,EAAeD,ECgCf,MAAME,EAAgB,WACtB,MAAMC,EAAgB,WAEtB,MAAMC,EAAyB,iBAAiBF,MAEhD,MAAMG,EAA6B,kCACnC,MAAMC,EAA2B,gCACjC,MAAMC,EAA8B,mCACpC,MAAMC,EAA4B,iCAElC,MAAMC,EAAeC,IAErB,IAAIC,EAAS,EAEb,MAAMC,EAAqBC,GACzBA,IAAe,MAAQ,MAAQ,IAAIA,IAgCrC,MAAMC,EAAgD,CACpDC,KAAM,cAGR,MAAMC,EAAe,CAACC,EAAYvB,IAChC,GAAKA,GAASA,EAAQuB,EAAMtB,OAE9B,MAAMuB,EAAoB,CACxBC,EACAC,KAEA,IAAKA,EAAe,CAClB,OAAON,C,CAGT,OACEK,EAAgBE,IAAID,IAAgB1B,OAASoB,CAA8B,EAI/E,MAAMQ,EAAwB,CAC5BC,EACAC,EACAC,EACAC,EACApC,KAEA,GAAIkC,EAAaT,OAAS,aAAc,CACtC,OAAOD,C,CAET,MAAMa,EAAkBH,EAAaG,gBAErC,GAAIH,EAAaT,OAAS,SAAU,CAClC,IAAIa,EAAmBJ,EAAaI,iBAAmBH,EACvD,MAAMI,EAAuBN,EAAMI,GAChClC,MAGH,MACEuB,EAAaa,EAAqBD,KACjCC,EAAoBD,GAAkBE,UACpCJ,IACEpC,EAAgByC,IAAIF,EAAoBD,GAAkB5C,QAC/D,CACA4C,GAAoBH,C,CAKtB,GAAIT,EAAaa,EAAqBD,GAAmB,CACvD,MAAO,CACLb,KAAM,SACNY,gBAAiBA,EACjBC,iBAAkBA,E,EAQxB,IAAII,EAAsBL,EAAkBF,EAG5C,MACET,EAAaO,EAAOS,KACnBT,EAAMS,GAAqBF,UACzBJ,IAAepC,EAAgByC,IAAIR,EAAMS,GAAqBhD,QACjE,CACAgD,GAAuBP,C,CAKzB,IAAKT,EAAaO,EAAOS,GAAsB,CAC7C,OAAOlB,C,CAGT,MAAMmB,EAAeV,EAAMS,GAA2CvC,MAEtE,GAAIwC,GAAe,KAAM,CACvB,OAAOX,EACLC,EACA,CACER,KAAM,SACNY,gBAAiBK,EACjBJ,iBAAkBH,IAAc,GAAK,EAAIQ,EAAYtC,QAEvD8B,EACAC,EACApC,E,CAIJ,MAAO,CACLyB,KAAM,cACNY,gBAAiBK,EAClB,E,MAcUE,EAAU,M,mTA4MD,M,4CAgCiB,M,yBASW,M,0CAsBN,I,mBAYc,G,gBAgBN,O,WASV,G,cAYH,M,yCAcA,M,eAMC,M,qBA7UtCC,GACAC,GACAC,GAAiB,MAEjBC,GACAC,GAEAC,GAAuBC,UACvBC,GAAqBD,UACrBE,GAAsBF,UACtBG,GAAoBH,UAEpBtB,GAGI,IAAI0B,IAGRC,GAAgB,MAChBC,GACAC,GAOA1D,GAOA2D,GAA8B,KAE9BC,GAAmB,CACjBC,EACAC,EACA3B,EACAC,EACApC,KAEA6D,EAAME,iBAEN,MAAMC,EACJF,EAAqBrC,OAAS,aAC1BO,EACEiC,KAAKhC,MACL,CACER,KAAM,cACNY,gBAAiBF,IAAc,GAAK,EAAI8B,KAAKhC,MAAM5B,QAErD8B,EACAC,EACApC,GAEFgC,EACEiC,KAAKhC,MACL6B,EACA3B,EACAC,EACApC,GAGR,GAAIgE,EAAkBvC,OAAS,aAAc,CAC3C,M,CAIF,MAAMyC,EACJF,EAAkBvC,OAAS,cACvBwC,KAAKhC,MAAM+B,EAAkB3B,iBAAiB3C,MAC7CuE,KAAKhC,MAAM+B,EAAkB3B,iBAC3BlC,MAAM6D,EAAkB1B,kBAAkB5C,MAEnD,GAAIuE,KAAKE,uBAAyBD,EAAkB,CAClDD,KAAKE,qBAAuBD,EAC5BD,MAAKN,EAA8B,I,GAKvCS,GAEI,CACFC,QAAUR,GACRI,MAAKL,EACHC,EACAjC,EAAkBqC,MAAKpC,EAAkBoC,KAAKE,uBAC7C,EACDF,KAAKpE,aAAe,SAAWoE,MAAKK,IACpCL,MAAKjE,GAGTuE,UAAYV,GACVI,MAAKL,EACHC,EACAjC,EAAkBqC,MAAKpC,EAAkBoC,KAAKE,sBAC9C,EACAF,KAAKpE,aAAe,SAAWoE,MAAKK,IACpCL,MAAKjE,GAGTwE,KAAOX,GACLI,MAAKL,EACHC,EACA,CACEpC,KAAM,cACNY,iBAAkB,GAEpB,EACA4B,KAAKpE,aAAe,SAAWoE,MAAKK,IACpCL,MAAKjE,GAGTyE,IAAMZ,GACJI,MAAKL,EACHC,EACA,CACEpC,KAAM,cACNY,gBAAiB4B,KAAKhC,MAAM5B,SAE7B,EACD4D,KAAKpE,aAAe,SAAWoE,MAAKK,IACpCL,MAAKjE,GAGT0E,MAAO,KAEL,GAAIT,KAAKU,SAAU,CACjBV,KAAKW,GAAGC,O,CAGVZ,KAAKU,UAAYV,KAAKU,QAAQ,EAGhCG,MAAOjB,IACLA,EAAME,iBAGNE,KAAKU,WAAa,IAAI,EAGxBI,IAAKlB,IAGH,GAAII,KAAKU,SAAU,CACjBd,EAAME,iBAENE,KAAKW,GAAGC,QACRZ,KAAKU,SAAW,K,IAMtBK,GAEI,CACFX,QAAUR,IACR,GAAII,KAAKU,SAAU,CACjBV,MAAKG,EAA8BC,QAAQR,E,KACtC,CACLI,KAAKU,SAAW,I,GAIpBJ,UAAYV,IACV,GAAII,KAAKU,SAAU,CACjBV,MAAKG,EAA8BG,UAAUV,E,KACxC,CACLI,KAAKU,SAAW,I,GAIpBD,MAAO,KAEL,GAAIT,KAAKU,SAAU,CACjBV,KAAKW,GAAGC,QACRZ,KAAKU,SAAW,K,GAIpBI,IAAKd,MAAKG,EAA8BW,KAI1CE,GACAC,GACAC,GAaA,oBAAAC,CAAqBC,GACnBpB,MAAKlB,EAAiB,KAEtB,GAAIsC,IAAqBlE,EAAc,CACrC8C,MAAKN,EAA8B,KAInC,GAAIM,KAAKpE,aAAe,OAAQ,CAC9BoE,MAAKqB,EAA0B,Y,GAKlBC,U,wBAkCnB,aAAAC,GACE,GAAIvB,KAAKpE,aAAe,WAAaoE,KAAKpE,aAAe,QAAS,CAChEoE,MAAKqB,G,EAaT,qBAAAG,GACE,GAAIxB,KAAKpE,aAAe,WAAaoE,KAAKpE,aAAe,QAAS,CAChEoE,MAAKqB,G,EAUT,oBAAAI,GACEzB,MAAKqB,EAA0B,Y,CAejC,iBAAAK,GACE1B,MAAKqB,EAA0B,Y,CAQjC,YAAAM,CAAaC,GACX5B,MAAK6B,EAAqBD,E,CAoC5B,WAAAE,CAAYC,GACV/B,KAAKE,qBAAuB6B,EAC5B/B,KAAKnF,OAASmF,MAAKpC,EAAiBE,IAAIiE,IAAWzG,QAGnD0E,KAAKsB,UAAUU,aAAaD,E,CAUrBE,aAMAC,MAETb,GAA6Bc,IAC3BnC,MAAKT,EAAgB,KAErB,GAAI4C,IAAuBjD,UAAW,CACpCc,MAAKR,IAAqB2C,C,GAI9BC,GAAmBC,IAEjBrC,MAAKR,EAAmBN,UAGxBc,KAAKiC,aAAaK,KAAKtC,KAAKnF,QAE5B,GAAIwH,EAAwB,CAC1B,M,CAGFrC,MAAKjE,EAAiBwG,QAEtB,MAAMrH,EAAoC,CACxCL,OAAQmF,KAAKnF,OACbK,cAAe8E,KAAK9E,eAGtB,IAAK,IAAIiB,EAAQ,EAAGA,EAAQ6D,KAAKhC,MAAM5B,OAAQD,IAAS,CACtD,MAAMZ,EAAOyE,KAAKhC,MAAM7B,GAExBL,EACEP,EACAyE,KAAKpE,WACLV,EACA8E,MAAKjE,E,CAKT,IAAKiE,MAAKjE,EAAiByC,IAAIwB,KAAKE,sBAAuB,CACzDF,KAAKE,qBAAuBhB,S,GAIhCsD,GAAiB,KACf,GAAIxC,KAAKpE,aAAe,OAAQ,CAC9BoE,MAAKjE,EAAmBmD,UACxB,M,CAGF,MAAMmD,EAAyBrC,MAAKK,IAGpCoC,aAAazC,MAAKP,GAElB,MAAMiD,EACJ1C,KAAK2C,eAAiB,IACrB3C,KAAKpE,aAAe,WAAaoE,KAAKpE,aAAe,SAGxD,IAAKyG,EAAwB,CAC3BrC,MAAKjE,IAAqB,IAAI6G,G,CAIhC,GAAIF,GAAuB1C,MAAKR,IAAqB,YAAa,CAChEQ,MAAKP,EAAkBoD,YAAW,KAChC7C,MAAKoC,EAAgBC,GACrBS,EAAY9C,KAAK,GAChBA,KAAK2C,e,KAGL,CACH3C,MAAKoC,EAAgBC,E,GAIzBR,GAAwB7D,IACtBgC,MAAKpC,EAAiB2E,QAEtB,GAAIvE,GAAS,KAAM,CACjB,M,CAGFA,EAAM+E,SAAQ,CAACxH,EAAM6C,KACnB,MAAM4E,EAAYzH,EAClB,MAAM0H,EAAWD,EAAU9G,MAE3B,GAAI+G,GAAY,KAAM,CAEpBjD,MAAKpC,EAAiBsF,IAAIF,EAAUvH,MAAO,CACzCH,QAAS0H,EAAU1H,QACnBa,MAAO,CACLqB,KAAM,cACNY,gBAAiBA,GAEnBU,cAAekE,EAAUG,cAAgBH,EAAUtC,WAIrDuC,EAASF,SAAQ,CAACK,EAAS/E,KACzB2B,MAAKpC,EAAiBsF,IAAIE,EAAQ3H,MAAO,CACvCH,QAAS8H,EAAQ9H,QACjBa,MAAO,CACLqB,KAAM,SACNY,gBAAiBA,EACjBC,iBAAkBA,IAEpB,G,KAID,CACH2B,MAAKpC,EAAiBsF,IAAI3H,EAAKE,MAAO,CACpCH,QAASC,EAAKD,QACda,MAAO,CACLqB,KAAM,cACNY,gBAAiBA,I,IAIvB,EAGJiF,GAA2B,KACzB,IAAKrD,KAAKU,UAAYV,KAAKE,uBAAyBF,KAAKvE,MAAO,CAC9DuE,KAAKvE,MAAQuE,KAAKE,qBAGlBF,KAAKkC,MAAMI,KAAKtC,KAAKvE,M,GAIzB6H,GAAiB,CACf/H,EACAgI,EACAC,IAEA,OAAOD,EAAe,UAAY,KAChCC,EAAa,IAAI5G,IAAkB,KAClCrB,EAAKE,QAAUuE,KAAKE,qBAAuB,IAAIvD,IAAkB,KAEtE8G,GAAqB,KACnBzD,MAAKjB,EAAiB,IAAI2E,EAC1B1D,MAAKhB,EAAkB,IAAI2E,eAAe3D,MAAK4D,GAG/C5D,MAAKhB,EAAgB6E,QAAQ7D,KAAKW,GAAI,CAAEmD,IAAK,eAC7C9D,MAAKhB,EAAgB6E,QAAQ7D,MAAKgB,GAAYhB,MAAKkB,EAAW,EAGhE0C,GAAuB,KACrB5D,MAAKjB,EAAegF,QAAQ/D,MAAKgE,EAAkB,EAGrDA,GAAoB,KAElB,MAAMC,EAAgBC,iBAAiBlE,KAAKW,IAE5C,MAAMwD,EAAgC9G,EACpC4G,EAAcG,wBAEhB,MAAMC,EAA8BhH,EAClC4G,EAAcK,sBAEhB,MAAMC,EAA+BlH,EACnC4G,EAAcO,uBAEhB,MAAMC,EAA6BpH,EACjC4G,EAAcS,qBAGhB,GACE1E,MAAKf,IAAyBkF,GAC9BnE,MAAKb,IAAuBkF,GAC5BrE,MAAKZ,IAAwBmF,GAC7BvE,MAAKX,IAAsBoF,EAC3B,CACA,M,CAIFzE,KAAKW,GAAGgE,MAAMC,YACZ5H,EACAmH,GAGFnE,KAAKW,GAAGgE,MAAMC,YACZ3H,EACAoH,GAGFrE,KAAKW,GAAGgE,MAAMC,YACZ9H,EACAyH,GAGFvE,KAAKW,GAAGgE,MAAMC,YACZ7H,EACA0H,GAKFzE,MAAKf,EAAuBkF,EAC5BnE,MAAKb,EAAqBkF,EAC1BrE,MAAKZ,EAAsBmF,EAC3BvE,MAAKX,EAAoBoF,CAA0B,EAGrDI,GAAuBjF,IACrBA,EAAME,iBAENE,KAAKvE,MAAQuE,MAAKkB,EAAWzF,MAC7BuE,KAAKE,qBAAuBF,MAAKkB,EAAWzF,MAG5CuE,KAAKkC,MAAMI,KAAKtC,KAAKvE,MAAM,EAG7B0F,GAAyBvB,IACvBA,EAAMkF,kBACN9E,KAAKU,UAAYV,KAAKU,QAAQ,EAGhCqE,GAAqCnF,IACnC,GAAII,KAAKpE,aAAe,OAAQ,CAC9B,MAAMoJ,EAAkBhF,MAAKG,EAA8BP,EAAMqF,MAEjE,GAAID,EAAiB,CACnBA,EAAgBpF,E,MAIf,CACH,GACEA,EAAMqF,OAASC,EAAUC,QACzBvF,EAAMqF,OAASC,EAAUE,MACzBxF,EAAMqF,OAASC,EAAUG,KACzBzF,EAAMqF,OAASC,EAAUI,YACzB1F,EAAMqF,OAASC,EAAUK,YACzB,CACA,M,CAEF,MAAMP,EAAkBhF,MAAKe,EAAgCnB,EAAMqF,MAEnE,GAAID,EAAiB,CACnBA,EAAgBpF,GAChB,M,CAEFI,KAAKU,WAAa,I,CAGpBV,MAAKqD,GAA0B,EAGjCmC,GAAuB5F,IACrBA,EAAMkF,kBAIN9E,KAAKU,SAAW,MAShB,GAAI+E,IAAoB1K,SAASiF,KAAKW,IAAK,CACzCX,KAAKW,GAAGC,O,CAGVZ,MAAKqD,GAA0B,EAGjCqC,GAA4B9F,IAC1BA,EAAMkF,kBACN9E,KAAKnF,OAASmF,MAAKiB,EAAUxF,KAAK,EAGpCkK,GAAqC/F,IACnCA,EAAMkF,kBACN9E,KAAKU,SAAW,IAAI,EAGtBkF,GAAsChG,IACpCA,EAAMkF,kBACN9E,MAAKiB,EAAUL,OAAO,EAGxBiF,GAA+BC,GAAuBlG,IACpDA,EAAMkF,kBACN9E,KAAKE,qBAAuB4F,CAAS,EAGvCjI,GAAkBiI,GAAuBlG,IACvCA,EAAMkF,kBAEN9E,KAAKU,SAAW,MAChBV,KAAKE,qBAAuB4F,EAC5B9F,MAAKqD,GAA0B,EAGjC0C,GAAwB/C,GAAiC,KACvDhD,MAAKpC,EAAiBE,IAAIkF,EAAUvH,OAAOqD,cAAgB,KAC3DkE,EAAUtC,UAAYsC,EAAUtC,SAEhCoC,EAAY9C,KAAK,EAGnBgG,GAA0B,CACxBzK,EACA0K,EACAC,EACAC,IAEAF,EACI,CACE,gCAAiCC,EAC7B,QAAQ3K,EAAK6K,gBACb,KACJ,8BAA+BD,EAC3B,QAAQ5K,EAAK8K,cACb,MAENnH,UAENmB,GAA0B,IAAML,KAAK9E,cAAcoL,mBAAqB,KAExEC,GACE,CACEhD,EACAhF,EACAiI,IAEF,CAACjL,EAAyBY,KACxB,GACEqK,IACCxG,MAAKK,MACLL,MAAKjE,EAAiByC,IAAIjD,EAAKE,OAChC,CACA,M,CAGF,MAAMyK,IAAgB3K,EAAK6K,YAC3B,MAAMD,IAAc5K,EAAK8K,UACzB,MAAMJ,EAAYC,GAAeC,EAEjC,MAAMM,EAAazG,MAAKgG,EACtBzK,EACA0K,EACAC,EACAC,GAKF,MAAM3C,EAAajF,GAAYhD,EAAKgD,SACpC,MAAMyE,EAAYzH,EAClB,MAAMmL,GAAmBlD,GAAcxD,KAAKU,SAE5C,OAAOsC,EAAU9G,OAAS,KACxByK,EAAA,OACEC,IAAKrL,EAAKE,MAAK,gBACAuH,EAAUG,WAAa,GAAGhH,aAAmB,KAAI,gBAE9D6G,EAAUG,cAAgBH,EAAUtC,UAAUmG,WAAa,KAAI,kBAEhD1K,EAAM0K,WACvBC,KAAK,QACLC,MAAM,QACNC,KAAM,QAAQxD,EAAa,IAAI5G,IAAkB,MAEhDoG,EAAUG,WACTwD,EAAA,UACEI,MAAO,CAELE,cAAe,KACf,oBAAqB,KACrB,oBAAqBjE,EAAUtC,UAEjCsG,KAAM,2BAA2BxD,EAAa,YAAc,MAC1DxD,KAAKU,SAAW,WAAa,cAE/BiE,MAAO8B,EACPlI,SAAUiF,EACVhG,KAAK,SACL0J,QACER,EAAkB1G,MAAK+F,EAAqB/C,GAAa,MAG3D2D,EAAA,QACEI,MAAO,CACL,wBAAyB,KACzB,CAAC,mBACCxL,EAAK4L,cAAgB,2BACPjB,EAChB,CAAC,iBAAiB3K,EAAK6L,YAAc,yBACnCjB,GAEJa,KAAK,yBAEJzL,EAAKD,UAIVqL,EAAA,QACEU,GAAIlL,EAAM0K,WACVE,MAAO,CAELE,cAAe,KACf,CAAC,mBACC1L,EAAK4L,cAAgB,2BACPjB,EAChB,CAAC,iBAAiB3K,EAAK6L,YAAc,yBACnCjB,GAEJa,KAAM,gBAAgBhH,KAAKzB,SAAW,YAAc,KACpDoG,MAAO8B,GAENlL,EAAKD,SAIVqL,EAAA,OACEC,IAAK,GAAGzK,aACRkL,GAAIrE,EAAUG,WAAa,GAAGhH,aAAmB,KACjD4K,MAAO,CAELO,eAAgB,KAChB,4BACEtE,EAAUG,aAAeH,EAAUtC,UAEvCsG,KAAK,oBAEFhE,EAAUG,YACXnD,MAAKpC,EAAiBE,IAAIkF,EAAUvH,OAAOqD,gBAC3CkE,EAAU9G,MAAMqL,IACdvH,MAAKuG,EAAkB,KAAM/C,EAAYgD,MAKjDG,EAAA,UACEC,IAAKrL,EAAKE,MACVqL,KAAK,SAAQ,gBACEvL,EAAKE,QAAUuE,KAAKE,qBACnCsH,SAAS,KACTT,MACEd,EACI,CACEwB,KAAM,KACN,CAAC,mBACClM,EAAK4L,cAAgB,2BACPjB,EAChB,CAAC,iBAAiB3K,EAAK6L,YAAc,yBACnCjB,GAEJjH,UAEN8H,KAAMhH,MAAKsD,EAAe/H,EAAMgI,EAAcC,GAC9CmB,MAAO8B,EACPlI,SAAUiF,EACVhG,KAAK,SACL0J,QAASR,EAAkB1G,MAAKnC,EAAetC,EAAKE,OAAS,KAC7DiM,aACEhB,EACI1G,MAAK6F,EAA4BtK,EAAKE,OACtC,MAGLF,EAAKD,QAET,EAGLqM,GAAqBpM,GAClBA,EAA2BW,OAAS,KACnCyK,EAAA,YAAUiB,MAAOrM,EAAKD,SAClBC,EAA2BW,MAAMqL,IAAIvH,MAAK2H,IAG9ChB,EAAA,UACEC,IAAKrL,EAAKE,MACVA,MAAOF,EAAKE,MACZ8C,SAAUhD,EAAKgD,SACfsJ,SAAUtM,EAAKE,QAAUuE,KAAKvE,OAE7BF,EAAKD,SAIZwM,GAAgB,IAAM,CACpBnB,EAAA,uBACgB3G,KAAKE,qBAAuB,OAAS,KACnD6G,MAAM,SAEL/G,KAAKE,qBACFF,MAAKpC,EAAiBE,IAAIkC,KAAKE,uBAAuB5E,SACtD0E,KAAK+H,YACL/H,KAAK+H,aAGXpB,EAAA,uBACc3G,KAAKgI,gBAAkBhI,MAAKpB,EACxCL,SAAUyB,KAAKzB,SACf0J,UAAWjI,KAAKzB,SAAWyB,MAAK6E,EAAsB,KACtDqD,IAAKvH,GAAOX,MAAKkB,EAAaP,GAE7BX,KAAKhC,MAAMuJ,IAAIvH,MAAK2H,KAIzB,iBAAAQ,GACEnI,MAAKnB,IAAe,wBAAwBzB,MAC5C4C,MAAK6B,EAAqB7B,KAAKhC,OAE/BgC,KAAKsB,UAAUU,aAAahC,KAAKvE,OACjCuE,KAAKE,qBAAuBF,KAAKvE,MAEjCuE,KAAKnF,OAASmF,MAAKpC,EAAiBE,IAAIkC,KAAKvE,QAAQH,QAErD,MAAM8M,EAASpI,KAAKsB,UAAU8G,OAG9B,IAAKpI,KAAKgI,gBAAkBI,GAAQhM,OAAS,EAAG,CAC9C4D,MAAKpB,EAAmCwJ,EAAO,GAAGC,YAAYC,M,EAKlE,qBAAAC,CAAsBC,EAAWC,EAAWC,GAC1C,GAAIA,IAAS,SAAU,CAIrB,GAAI1I,MAAKT,EAAe,CACtBS,MAAKwC,IACLxC,MAAKT,EAAgB,K,CAGvB,OAAO,K,CAGT,OAAO,I,CAGT,mBAAAoJ,GAOE,GAAI3I,MAAKT,EAAe,CACtBS,MAAKwC,IACLxC,MAAKT,EAAgB,K,EAIzB,gBAAAqJ,GACE5I,MAAKyD,G,CAGP,kBAAAoF,GAEE,GAAI7I,KAAKpE,aAAe,QAAUoE,KAAKU,SAAU,CAC/CV,MAAKN,EAA8B,MACnCM,MAAKiB,EAAUL,QACf,M,CAIF,IAAKZ,MAAKN,EAA6B,CACrC,M,CAEFM,MAAKN,EAA8B,MAEnC,MAAMoJ,EAAkB9I,KAAKW,GAAGoI,WAAWC,cACzCnM,GAIF,GAAIiM,EAAiB,CAGnBG,uBAAsB,KACpBH,EAAgBlI,OAAO,G,EAK7B,oBAAAsI,GACE,GAAIlJ,MAAKhB,EAAiB,CACxBgB,MAAKhB,EAAgBmK,aACrBnJ,MAAKhB,EAAkBE,S,CAGzBc,MAAKjB,EAAiBG,S,CAGxB,MAAAkK,GACE,MAAM5C,EAAoBxG,KAAKpE,aAAe,OAC9C,MAAMyN,GAAyBrJ,KAAKsJ,WAAatJ,KAAKzB,SACtD,MAAMgL,EAAgBvJ,KAAKwJ,sBAAwBxJ,KAAKU,SAExD,OACEiG,EAAC8C,E,gDAGCjC,UACGtK,IAAiBsJ,IAAsBxG,KAAKzB,SAAW,IAAM,KAEhEwI,MAAO/G,KAAKzB,SAAW,cAAgB,KACvCmL,WACGxM,GAAgBmM,EACbrJ,MAAK+E,EACL,KAENmC,SACGhK,GAAgBsJ,GAAqB6C,EAClCrJ,MAAK4F,EACL,MAGL1I,EACG8C,MAAK8H,IACL,CACEnB,EAAA,OACEC,IAAI,OAAM,cAIE,OACZG,MAAO,CACL4C,KAAM,KACN,mBAAoB3J,KAAKpE,aAAe,QAE1CgO,gBACGpD,GAAqB6C,EAClBrJ,MAAKmB,EACL,KAEN+G,IAAKvH,GAAOX,MAAKgB,EAAWL,GAE5BgG,EAAA,SAGEC,IAAI,WACJE,KAAK,WAAU,gBACD,UAAS,iBAKpB9G,KAAKzB,WAAaiI,EAAoB,QAAU,KAAI,gBAExCxG,KAAKU,SAASmG,WAAU,gBACzB,OAAM,aAElB7G,KAAKgI,gBAAkBhI,MAAKpB,EAE9BiL,aAAa,MACb9C,MAAO,CACLtL,MAAO,KACP,iBAAkB+K,EAClB,mBAAoBA,GAEtBjI,SAAUyB,KAAKzB,WAAaiI,EAC5BuB,YAAa/H,KAAK+H,YAClB+B,SAAU9J,KAAKsJ,WAAa9C,EAC5B/K,MACE+K,EACIxG,KAAKnF,OACLmF,MAAKpC,EAAiBE,IAAIkC,KAAKE,uBAC3B5E,QAEVsO,eACEpD,IAAsBxG,KAAKU,UAAY2I,EACnCrJ,MAAK2F,EACL,KAENoE,eACEvD,GAAqB6C,EACjBrJ,MAAK0F,EACL,KAENwC,IAAKvH,GAAOX,MAAKiB,EAAYN,KAIjCX,MAAKlB,IAAmByK,GACtB5C,EAAA,cACEC,IAAI,UACJS,GAAG,UACHP,KAAK,UAAS,cACF,QACZE,KAAK,SACLgD,WAAU,KACVC,cAAejK,KAAKW,GACpBuJ,WAAW,cACXC,YAAY,eACZC,oBAAmB,KACnBC,QAASrK,KAAKU,SACd4J,QAAQ,SACRC,UAAWvK,KAAKuK,UAChBC,gBAAgB,4BAChBC,YAAY,aACZC,gBACE1K,KAAKU,UAAY2I,EACbrJ,MAAKwF,EACL,MAGNmB,EAAA,OAAKI,MAAM,kBAAkBC,KAAK,mBAC/BhH,KAAKhC,MAAMuJ,IACVvH,MAAKuG,EACH,MACArH,UACAsH,O,4SCjvCxB,MAAMmE,EAAoB,cAC1B,MAAMC,EAAiB,UAAUD,IACjC,MAAME,EAAgB,UAAUF,iBAEhC,MAAMG,EAAqBC,GACzBA,GAASC,SAAShQ,gBAAkB2P,EAEtC,MAAMM,EAAsBrL,GAC1BA,EAAMsL,OAGR,MAAMC,EAAwBC,GAC5BA,EAASpC,cAAc4B,GAEzB,MAAMS,EAAuBD,GAC3BA,EAASpC,cAAc6B,GAGzB,MAAMS,EAAuBC,GAC3BA,EAAQC,cAAcxC,cAAc4B,GAEtC,MAAMa,EAAsBL,GAC1BA,EAASI,cAAcxC,cAAc6B,GAEhC,MAAMa,EAET,CACF,CAACxG,EAAUyG,YAAa/L,IACtB,MAAMgM,EAAiBX,EAAmBrL,GAC1C,IAAKkL,EAAkBc,GAAiB,CACtC,M,CAEFhM,EAAME,iBAEN,GAAI8L,EAAeC,SAAW,EAAG,CAC/BV,EAAqBS,GAAgBE,eACrC,M,CAIF,IAAIC,EACFH,EAAeI,mBAEjB,IAAKlB,EAAkBiB,GAAqB,CAC1CA,EAAqBT,EAAoBM,E,CAE3CG,EAAmBD,cAAc,EAGnC,CAAC5G,EAAU+G,UAAWrM,IACpB,MAAMgM,EAAiBX,EAAmBrL,GAC1C,IAAKkL,EAAkBc,GAAiB,CACtC,M,CAEFhM,EAAME,iBAEN,GAAI8L,EAAeC,SAAW,EAAG,CAC/BR,EAAoBO,GAAgBE,eACpC,M,CAIF,IAAIC,EACFH,EAAeM,uBAEjB,IAAKpB,EAAkBiB,GAAqB,CAC1CA,EAAqBN,EAAmBG,E,CAE1CG,EAAmBD,cAAc,EAGnC,CAAC5G,EAAUK,aAAc4G,MAAMvM,IAC7B,MAAMgM,EAAiBX,EAAmBrL,GAC1C,IAAKkL,EAAkBc,GAAiB,CACtC,M,CAEFhM,EAAME,iBAEN,GAAI8L,EAAeC,SAAW,EAAG,CAC/B,M,OAGID,EAAeQ,iBAGrBnD,uBAAsB,KACpBkC,EAAqBS,GAAgBE,cAAc,GACnD,EAGJ,CAAC5G,EAAUI,YAAa6G,MAAMvM,IAC5B,MAAMgM,EAAiBX,EAAmBrL,GAC1C,IAAKkL,EAAkBc,GAAiB,CACtC,M,CAEFhM,EAAME,iBAEN,GAAI8L,EAAeC,SAAW,EAAG,CAC/B,M,CAGF,MAAMQ,EACJT,EAAeJ,oBAEXa,EAAeC,mBACrBD,EAAeP,cAAc,EAG/B,CAAC5G,EAAUE,MAAOxF,IAChB,MAAMgM,EAAiBX,EAAmBrL,GAC1C,IAAKkL,EAAkBc,GAAiB,CACtC,M,CAEFhM,EAAME,iBAENwL,EAAoBM,GAAgBE,cAAc,EAGpD,CAAC5G,EAAUG,KAAMzF,IACf,MAAMgM,EAAiBX,EAAmBrL,GAC1C,IAAKkL,EAAkBc,GAAiB,CACtC,M,CAEFhM,EAAME,iBAEN2L,EAAmBG,GAAgBE,cAAc,EAGnD,CAAC5G,EAAUC,QAAS,QC5ItB,MAAMoH,EAAoB,iLAC1B,MAAAC,EAAeD,E,MCWFE,EAAgB,M,2EAiBS,W,iBAMGC,E,gIA8BO,oB,uBAMD,qB,iBAKL,K,CA/DxCC,GAAc,MACdC,GAAc,MAEdC,GAAwB,M,wBAmExBC,GAAmB,CAAC5B,EAAgB6B,IAAoBnN,IACtD,GAAII,KAAKgN,kBAAmB,CAC1BhN,KAAKgN,kBAAkBpN,EAAOsL,EAAQ6B,E,GAI1CE,GAAepB,GAAmBtQ,IAChC,MAAM2R,EAAW3R,EAAKW,OAAOE,OAAS,EAEtC,MAAO,CACLuK,EAAA,eACEwG,YAAanN,KAAKoN,YAClB/F,GAAI9L,EAAK8L,GACT/L,QAASC,EAAKD,QACdyL,MAAOxL,EAAKwL,OAAS/G,KAAKqN,SAC1BhH,UACErG,KAAKsN,YACDC,EACEhS,EAAK8K,UACLrG,KAAKwN,WACLxN,KAAKyN,oBAEPlS,EAAK8K,UAEXe,WAAY7L,EAAK6L,YAAc,aAC/BsG,KAAMnS,EAAKoS,MAAMC,IACjBZ,kBAAmBhN,MAAK8M,EAAiBvR,EAAKoS,MAAMC,IAAKrS,EAAK8L,IAC9DI,MAAOyF,EACPrB,MAAOA,EACPgC,SAAUtS,EAAKuS,eAAiB,yBAChCC,SAAUxS,EAAKwS,SACf3H,YACEpG,KAAKsN,YACDC,EACEhS,EAAK6K,YACLpG,KAAKwN,WACLxN,KAAKyN,oBAEPlS,EAAK6K,YAEXe,aAAc5L,EAAK4L,cAAgB,aACnC6G,kBACGzS,EAAK0S,YAAcjO,MAAKkO,EAAoB3S,GAAQ,MAGtD2R,GACC3R,EAAK0S,aACL1S,EAAKW,MAAMqL,IAAIvH,MAAKiN,EAAYpB,EAAQ,IAIxCqB,IAAa3R,EAAK0S,aAAetH,EAAA,qBAIrCpL,EAAK4S,eACHxH,EAAA,qBACc,OACZI,MACE,0BACCxL,EAAK6S,gBAAkBpO,KAAKqO,qBAIpC,EAGHC,GAAwB1O,IACtB,MAAM2O,EACJ7C,EAA4B9L,EAAMqF,MAEpC,GAAIsJ,EAAiB,CACnB3O,EAAMkF,kBACNyJ,EAAgB3O,E,GAIpBsO,GAAuB3S,GAA4B,KACjDA,EAAK0S,YAAc,KACnBnL,EAAY9C,KAAK,EAGnBwO,GAA4B,KAC1BxO,MAAK6M,EAAwB,KAC7B/J,EAAY9C,KAAK,EAGnB,iBAAAyO,GACEzO,MAAK2M,IAAgB3M,KAAKW,GAAGqI,cAAc,0BAC3ChJ,MAAK4M,IAAgB5M,KAAKW,GAAGqI,cAAc,yB,CAG7C,MAAAI,GACE,OACEzC,EAAA,eAAAC,IAAA,2CACEuG,YAAanN,KAAKoN,YAClBsB,qBAAsB1O,KAAK0O,qBAC3B3H,MAAO/G,KAAKqN,SACZxB,OAAQ,EACRc,WAAY3M,MAAK2M,EACjBC,WAAY5M,MAAK4M,EACjBiB,SAAU7N,KAAK6N,SACfnE,UACE1J,MAAK6M,EAAwB7M,MAAKsO,EAAuB,KAE3DN,kBACGhO,MAAK6M,EAAwB7M,MAAKwO,EAA4B,MAGjE7H,EAAA,QAAAC,IAAA,2CAAM8B,KAAK,SAASiG,KAAK,WAExB3O,MAAK2M,GAAehG,EAAA,QAAAC,IAAA,2CAAM8B,KAAK,SAASiG,KAAK,WAE7C3O,MAAK4M,GAAejG,EAAA,QAAAC,IAAA,2CAAM8B,KAAK,SAASiG,KAAK,WAE7C3O,MAAK6M,GACJ7M,KAAKhC,OAAS,MACdgC,KAAKhC,MAAMuJ,IAAIvH,MAAKiN,EAAY,I,aCxM1C,MAAM2B,EAAsB,2vCAC5B,MAAAC,EAAeD,ECYf,MAAME,EAAQ,CAACC,EAAkBxQ,KAC/B,MAAMyQ,EAAeD,EACjBE,EAA4BC,QAC5BD,EAA4BE,UAEhC,OAAO5Q,EACH,GAAG0Q,EAA4BG,YAAYJ,IAC3CA,CAAY,E,MAwBLK,EAAkB,M,sOAQQ,M,0CAPlB/N,UAmBnB,iBAAAgO,CAAkBvN,GAEhB/B,KAAKsB,UAAUU,aAAaD,E,CAOrBwN,OAETC,GAA6B/T,GAAmBmE,IAC9CA,EAAMkF,kBACN9E,KAAKvE,MAAQA,EAEbuE,KAAKuP,OAAOjN,KAAK7G,EAAM,EAGzBgU,IAAc,CAAClU,EAA2BY,KACxC,MAAM4S,EAAU/O,KAAKvE,QAAUF,EAAKE,MACpC,MAAM8C,EAAWhD,EAAKgD,UAAYyB,KAAKzB,SAEvC,MAAMmR,EAAkBZ,EAAMC,EAASxQ,GAEvC,OACEoI,EAAA,OACEI,MAAM,aACNC,KAAM,GAAGiI,EAA4BU,cAAcD,KAEnD/I,EAAA,OACEI,MAAO,CACL6I,UAAW,KACX,qBAAsBb,GAExB/H,KAAM,GAAGiI,EAA4BY,aAAaH,KAElD/I,EAAA,SACEU,GAAI9L,EAAKD,QAAU,cAAca,IAAU,KAC3CuM,KAAK,cAAa,cACLnN,EAAKD,QAAUC,EAAKyM,eAAiB,KAClDjB,MAAO,CAAE7E,MAAO,KAAM,kBAAmB3D,GACzCyI,KAAMiI,EAA4Ba,MAClCtS,KAAK,QACLuR,QAASA,EACTxQ,SAAUA,EACV9C,MAAOF,EAAKE,MACZsU,QAAS/P,MAAKwP,EAA0BjU,EAAKE,SAE/CkL,EAAA,OACEI,MAAO,CACLiJ,OAAQ,KACR,qBAAsBjB,GAExB/H,KAAM,GAAGiI,EAA4BgB,UAAUP,IAAiB,cACpD,UAIfnU,EAAKD,SACJqL,EAAA,SACEI,MAAO,CAAEa,MAAO,KAAM,kBAAmBrJ,GACzCyI,KAAM,GAAGiI,EAA4BiB,SAASR,IAC9CS,QAAS,cAAchU,KAEtBZ,EAAKD,SAGN,EAIV,iBAAA6M,GAEEnI,KAAKsB,UAAUU,aAAahC,KAAKvE,M,CAGnC,MAAA2N,GACE,OAAOzC,EAAC8C,EAAI,CAAA7C,IAAA,2CAACE,KAAK,cAAc9G,KAAKhC,OAAOuJ,IAAIvH,MAAKyP,I"}