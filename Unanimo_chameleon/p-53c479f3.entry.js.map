{"version":3,"names":["checkboxCss","ChCheckboxStyle0","CHECKBOX_ID","PARTS","checked","indeterminate","disabled","CHECKBOX_PARTS_DICTIONARY","DISABLED","INDETERMINATE","checkedValue","CHECKED","UNCHECKED","CheckBox","click","input","valueChanged","this","value","componentWillLoad","getValue","unCheckedValue","handleClick","event","readonly","stopPropagation","handleChange","inputRef","target","emit","highlightable","render","additionalParts","h","Host","key","class","DISABLED_CLASS","container","part","CONTAINER","accessibleName","trim","caption","id","INPUT","type","onClick","onInput","option","OPTION","LABEL","htmlFor"],"sources":["src/components/checkbox/checkbox.scss?tag=ch-checkbox&encapsulation=shadow","src/components/checkbox/checkbox.tsx"],"sourcesContent":["@import \"../../common/_base\";\r\n\r\n$option-checked-border-color: currentColor;\r\n$option-checked-color: currentColor;\r\n\r\n@include box-sizing();\r\n\r\n:host {\r\n  /**\r\n   * @prop --ch-checkbox__container-size:\r\n   * Specifies the size for the container of the `input` and `option` elements.\r\n   * @default min(1em, 20px)\r\n   */\r\n  --ch-checkbox__container-size: min(1em, 20px);\r\n\r\n  /**\r\n   * @prop --ch-checkbox__checked-image:\r\n   * Specifies the image of the checkbox when is checked.\r\n   * @default url(\"data:image/svg+xml, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><path fill='currentColor' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26l2.974 2.99L8 2.193z'/></svg>\")\r\n   */\r\n  --ch-checkbox__option-checked-image: url(\"data:image/svg+xml, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><path fill='currentColor' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26l2.974 2.99L8 2.193z'/></svg>\");\r\n\r\n  /**\r\n   * @prop --ch-checkbox__option-indeterminate-image:\r\n   * Specifies the image of the checkbox when is indeterminate.\r\n   * @default url(\"data:image/svg+xml, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><path fill='currentColor' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26l2.974 2.99L8 2.193z'/></svg>\")\r\n   */\r\n  --ch-checkbox__option-indeterminate-image: url(\"data:image/svg+xml, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><rect width='8' height='8'/></svg>\");\r\n\r\n  /**\r\n   * @prop --ch-checkbox__option-size:\r\n   * Specifies the size for the `option` element.\r\n   * @default 50%\r\n   */\r\n  --ch-checkbox__option-size: 50%;\r\n\r\n  /**\r\n   * @prop --ch-checkbox__option-image-size:\r\n   * Specifies the image size of the `option` element.\r\n   * @default 100%\r\n   */\r\n  --ch-checkbox__option-image-size: 100%;\r\n\r\n  display: inline-grid;\r\n  grid-template-columns: max-content 1fr;\r\n  align-items: center;\r\n\r\n  // Remove outline of the focus state. This selector must not have higher\r\n  // specificity, since it should be overridden by the class applied to the control\r\n  outline: unset;\r\n\r\n  // Avoid zooming on double tap\r\n  touch-action: manipulation;\r\n\r\n  // Remove text selection on double click\r\n  user-select: none;\r\n}\r\n\r\n:host(.ch-checkbox--actionable) :is(.input, .label) {\r\n  cursor: pointer;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n  inline-size: var(--ch-checkbox__container-size);\r\n  block-size: var(--ch-checkbox__container-size);\r\n}\r\n\r\n.input {\r\n  display: flex;\r\n  inline-size: 100%;\r\n  block-size: 100%;\r\n\r\n  // Reset browser defaults\r\n  appearance: none;\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: unset;\r\n\r\n  border: 1px solid $option-checked-border-color;\r\n  border-radius: 18.75%;\r\n}\r\n\r\n.option {\r\n  position: absolute;\r\n  inline-size: var(--ch-checkbox__option-size);\r\n  block-size: var(--ch-checkbox__option-size);\r\n  background-color: $option-checked-color;\r\n  pointer-events: none;\r\n\r\n  &--checked {\r\n    -webkit-mask: no-repeat center / var(--ch-checkbox__option-image-size)\r\n      var(--ch-checkbox__option-checked-image);\r\n  }\r\n\r\n  &--indeterminate {\r\n    -webkit-mask: no-repeat center / var(--ch-checkbox__option-image-size)\r\n      var(--ch-checkbox__option-indeterminate-image);\r\n  }\r\n\r\n  &--not-displayed {\r\n    opacity: 0;\r\n    visibility: hidden;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  State,\r\n  Watch,\r\n  h\r\n} from \"@stencil/core\";\r\nimport {\r\n  CHECKBOX_PARTS_DICTIONARY,\r\n  DISABLED_CLASS\r\n} from \"../../common/reserverd-names\";\r\n\r\nimport {\r\n  AccessibleNameComponent,\r\n  DisableableComponent\r\n} from \"../../common/interfaces\";\r\n\r\nconst CHECKBOX_ID = \"checkbox\";\r\n\r\nconst PARTS = (checked: boolean, indeterminate: boolean, disabled: boolean) => {\r\n  if (indeterminate) {\r\n    return disabled\r\n      ? `${CHECKBOX_PARTS_DICTIONARY.DISABLED} ${CHECKBOX_PARTS_DICTIONARY.INDETERMINATE}`\r\n      : CHECKBOX_PARTS_DICTIONARY.INDETERMINATE;\r\n  }\r\n\r\n  const checkedValue = checked\r\n    ? CHECKBOX_PARTS_DICTIONARY.CHECKED\r\n    : CHECKBOX_PARTS_DICTIONARY.UNCHECKED;\r\n\r\n  return disabled\r\n    ? `${CHECKBOX_PARTS_DICTIONARY.DISABLED} ${checkedValue}`\r\n    : checkedValue;\r\n};\r\n\r\n/**\r\n * @part container - The container that serves as a wrapper for the `input` and the `option` parts.\r\n * @part input - The input element that implements the interactions for the component.\r\n * @part option - The actual \"input\" that is rendered above the `input` part. This part has `position: absolute` and `pointer-events: none`.\r\n * @part label - The label that is rendered when the `caption` property is not empty.\r\n *\r\n * @part checked - Present in the `input`, `option`, `label` and `container` parts when the control is checked and not indeterminate (`value` === `checkedValue` and `indeterminate !== true`).\r\n * @part disabled - Present in the `input`, `option`, `label` and `container` parts when the control is disabled (`disabled` === `true`).\r\n * @part indeterminate - Present in the `input`, `option`, `label` and `container` parts when the control is indeterminate (`indeterminate` === `true`).\r\n * @part unchecked - Present in the `input`, `option`, `label` and `container` parts when the control is unchecked and not indeterminate (`value` === `unCheckedValue` and `indeterminate !== true`).\r\n */\r\n@Component({\r\n  shadow: true,\r\n  styleUrl: \"checkbox.scss\",\r\n  tag: \"ch-checkbox\"\r\n})\r\nexport class CheckBox implements AccessibleNameComponent, DisableableComponent {\r\n  /**\r\n   * This State is computed from the `value`, `checkedValue` and\r\n   * `unCheckedValue` properties.\r\n   */\r\n  @State() checked: boolean;\r\n\r\n  /**\r\n   * Specifies a short string, typically 1 to 3 words, that authors associate\r\n   * with an element to provide users of assistive technologies with a label\r\n   * for the element.\r\n   */\r\n  @Prop() readonly accessibleName: string;\r\n\r\n  /**\r\n   * Specifies the label of the checkbox.\r\n   */\r\n  @Prop() readonly caption: string;\r\n\r\n  /**\r\n   * The value when the checkbox is 'on'\r\n   */\r\n  @Prop() readonly checkedValue!: string;\r\n\r\n  /**\r\n   * This attribute lets you specify if the element is disabled.\r\n   * If disabled, it will not fire any user interaction related event\r\n   * (for example, click event).\r\n   */\r\n  @Prop() readonly disabled: boolean = false;\r\n\r\n  /**\r\n   * True to highlight control when an action is fired.\r\n   */\r\n  @Prop() readonly highlightable: boolean = false;\r\n\r\n  /**\r\n   * `true` if the control's value is indeterminate.\r\n   */\r\n  @Prop({ mutable: true }) indeterminate: boolean = false;\r\n\r\n  /**\r\n   * This attribute indicates that the user cannot modify the value of the control.\r\n   * Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)\r\n   * attribute for `input` elements.\r\n   */\r\n  @Prop() readonly readonly: boolean = false;\r\n\r\n  /**\r\n   * The value when the checkbox is 'off'\r\n   */\r\n  @Prop() readonly unCheckedValue!: string;\r\n\r\n  /**\r\n   * The value of the control.\r\n   */\r\n  @Prop({ mutable: true }) value!: string;\r\n\r\n  /**\r\n   * Emitted when the element is clicked or the space key is pressed and\r\n   * released.\r\n   */\r\n  @Event() click: EventEmitter;\r\n\r\n  /**\r\n   * The `input` event is emitted when a change to the element's value is\r\n   * committed by the user.\r\n   */\r\n  @Event() input: EventEmitter;\r\n\r\n  @Watch(\"value\")\r\n  protected valueChanged() {\r\n    this.checked = this.value === this.checkedValue;\r\n  }\r\n\r\n  componentWillLoad() {\r\n    this.checked = this.value === this.checkedValue;\r\n  }\r\n\r\n  #getValue = (checked: boolean) =>\r\n    checked ? this.checkedValue : this.unCheckedValue;\r\n\r\n  /**\r\n   * Checks if it is necessary to prevent the click from bubbling\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #handleClick = (event: UIEvent) => {\r\n    if (this.readonly || this.disabled) {\r\n      return;\r\n    }\r\n\r\n    event.stopPropagation();\r\n  };\r\n\r\n  #handleChange = (event: UIEvent) => {\r\n    event.stopPropagation();\r\n\r\n    const inputRef = event.target as HTMLInputElement;\r\n    const checked = inputRef.checked;\r\n    const value = this.#getValue(checked);\r\n\r\n    this.checked = checked;\r\n    this.value = value;\r\n    inputRef.value = value; // Update input's value before emitting the event\r\n\r\n    // When the checked value is updated by the user, the control must no\r\n    // longer be indeterminate\r\n    this.indeterminate = false;\r\n\r\n    this.input.emit(event);\r\n\r\n    if (this.highlightable) {\r\n      this.click.emit();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const additionalParts = PARTS(\r\n      this.checked,\r\n      this.indeterminate,\r\n      this.disabled\r\n    );\r\n\r\n    return (\r\n      <Host\r\n        class={{\r\n          [DISABLED_CLASS]: this.disabled,\r\n          \"ch-checkbox--actionable\":\r\n            (!this.readonly && !this.disabled) ||\r\n            (this.readonly && this.highlightable)\r\n        }}\r\n      >\r\n        <div\r\n          class={{\r\n            container: true,\r\n            \"container--checked\": this.checked\r\n          }}\r\n          part={`${CHECKBOX_PARTS_DICTIONARY.CONTAINER} ${additionalParts}`}\r\n        >\r\n          <input\r\n            aria-label={\r\n              this.accessibleName?.trim() !== \"\" &&\r\n              this.accessibleName !== this.caption\r\n                ? this.accessibleName\r\n                : null\r\n            }\r\n            id={this.caption ? CHECKBOX_ID : null}\r\n            class=\"input\"\r\n            part={`${CHECKBOX_PARTS_DICTIONARY.INPUT} ${additionalParts}`}\r\n            type=\"checkbox\"\r\n            checked={this.checked}\r\n            disabled={this.disabled || this.readonly}\r\n            indeterminate={this.indeterminate}\r\n            value={this.value}\r\n            onClick={this.#handleClick}\r\n            onInput={this.#handleChange}\r\n          />\r\n          <div\r\n            class={{\r\n              option: true,\r\n              \"option--not-displayed\": !this.checked && !this.indeterminate,\r\n              \"option--checked\": this.checked && !this.indeterminate,\r\n              \"option--indeterminate\": this.indeterminate\r\n            }}\r\n            part={`${CHECKBOX_PARTS_DICTIONARY.OPTION} ${additionalParts}`}\r\n            aria-hidden=\"true\"\r\n          ></div>\r\n        </div>\r\n\r\n        {this.caption && (\r\n          <label\r\n            class=\"label\"\r\n            part={`${CHECKBOX_PARTS_DICTIONARY.LABEL} ${additionalParts}`}\r\n            htmlFor={CHECKBOX_ID}\r\n            onClick={this.#handleClick}\r\n          >\r\n            {this.caption}\r\n          </label>\r\n        )}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"oGAAA,MAAMA,EAAc,y1DACpB,MAAAC,EAAeD,ECmBf,MAAME,EAAc,WAEpB,MAAMC,EAAQ,CAACC,EAAkBC,EAAwBC,KACvD,GAAID,EAAe,CACjB,OAAOC,EACH,GAAGC,EAA0BC,YAAYD,EAA0BE,gBACnEF,EAA0BE,a,CAGhC,MAAMC,EAAeN,EACjBG,EAA0BI,QAC1BJ,EAA0BK,UAE9B,OAAON,EACH,GAAGC,EAA0BC,YAAYE,IACzCA,CAAY,E,MAmBLG,EAAQ,M,yMA6BkB,M,mBAKK,M,mBAKQ,M,cAOb,M,mDAgB5BC,MAMAC,MAGC,YAAAC,GACRC,KAAKb,QAAUa,KAAKC,QAAUD,KAAKP,Y,CAGrC,iBAAAS,GACEF,KAAKb,QAAUa,KAAKC,QAAUD,KAAKP,Y,CAGrCU,GAAahB,GACXA,EAAUa,KAAKP,aAAeO,KAAKI,eAMrCC,GAAgBC,IACd,GAAIN,KAAKO,UAAYP,KAAKX,SAAU,CAClC,M,CAGFiB,EAAME,iBAAiB,EAGzBC,GAAiBH,IACfA,EAAME,kBAEN,MAAME,EAAWJ,EAAMK,OACvB,MAAMxB,EAAUuB,EAASvB,QACzB,MAAMc,EAAQD,MAAKG,EAAUhB,GAE7Ba,KAAKb,QAAUA,EACfa,KAAKC,MAAQA,EACbS,EAAST,MAAQA,EAIjBD,KAAKZ,cAAgB,MAErBY,KAAKF,MAAMc,KAAKN,GAEhB,GAAIN,KAAKa,cAAe,CACtBb,KAAKH,MAAMe,M,GAIf,MAAAE,GACE,MAAMC,EAAkB7B,EACtBc,KAAKb,QACLa,KAAKZ,cACLY,KAAKX,UAGP,OACE2B,EAACC,EAAI,CAAAC,IAAA,2CACHC,MAAO,CACLC,CAACA,GAAiBpB,KAAKX,SACvB,2BACIW,KAAKO,WAAaP,KAAKX,UACxBW,KAAKO,UAAYP,KAAKa,gBAG3BG,EAAA,OAAAE,IAAA,2CACEC,MAAO,CACLE,UAAW,KACX,qBAAsBrB,KAAKb,SAE7BmC,KAAM,GAAGhC,EAA0BiC,aAAaR,KAEhDC,EAAA,SAAAE,IAAA,wDAEIlB,KAAKwB,gBAAgBC,SAAW,IAChCzB,KAAKwB,iBAAmBxB,KAAK0B,QACzB1B,KAAKwB,eACL,KAENG,GAAI3B,KAAK0B,QAAUzC,EAAc,KACjCkC,MAAM,QACNG,KAAM,GAAGhC,EAA0BsC,SAASb,IAC5Cc,KAAK,WACL1C,QAASa,KAAKb,QACdE,SAAUW,KAAKX,UAAYW,KAAKO,SAChCnB,cAAeY,KAAKZ,cACpBa,MAAOD,KAAKC,MACZ6B,QAAS9B,MAAKK,EACd0B,QAAS/B,MAAKS,IAEhBO,EAAA,OAAAE,IAAA,2CACEC,MAAO,CACLa,OAAQ,KACR,yBAA0BhC,KAAKb,UAAYa,KAAKZ,cAChD,kBAAmBY,KAAKb,UAAYa,KAAKZ,cACzC,wBAAyBY,KAAKZ,eAEhCkC,KAAM,GAAGhC,EAA0B2C,UAAUlB,IAAiB,cAClD,UAIff,KAAK0B,SACJV,EAAA,SAAAE,IAAA,2CACEC,MAAM,QACNG,KAAM,GAAGhC,EAA0B4C,SAASnB,IAC5CoB,QAASlD,EACT6C,QAAS9B,MAAKK,GAEbL,KAAK0B,S"}