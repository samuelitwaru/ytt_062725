{"version":3,"names":["t","e","name","aliases","keywords","$pattern","keyword","built_in","literal","illegal","contains","scope","match","relevance","C_LINE_COMMENT_MODE","COMMENT","inherit","APOS_STRING_MODE","QUOTE_STRING_MODE","variants"],"sources":["node_modules/@genexus/markdown-parser/dist/reasonml-Djchccj3.js"],"sourcesContent":["function t(e) {\n  return { name: \"ReasonML\", aliases: [\"re\"], keywords: { $pattern: /[a-z_]\\w*!?/, keyword: [\"and\", \"as\", \"asr\", \"assert\", \"begin\", \"class\", \"constraint\", \"do\", \"done\", \"downto\", \"else\", \"end\", \"esfun\", \"exception\", \"external\", \"for\", \"fun\", \"function\", \"functor\", \"if\", \"in\", \"include\", \"inherit\", \"initializer\", \"land\", \"lazy\", \"let\", \"lor\", \"lsl\", \"lsr\", \"lxor\", \"mod\", \"module\", \"mutable\", \"new\", \"nonrec\", \"object\", \"of\", \"open\", \"or\", \"pri\", \"pub\", \"rec\", \"sig\", \"struct\", \"switch\", \"then\", \"to\", \"try\", \"type\", \"val\", \"virtual\", \"when\", \"while\", \"with\"], built_in: [\"array\", \"bool\", \"bytes\", \"char\", \"exn|5\", \"float\", \"int\", \"int32\", \"int64\", \"list\", \"lazy_t|5\", \"nativeint|5\", \"ref\", \"string\", \"unit\"], literal: [\"true\", \"false\"] }, illegal: /(:-|:=|\\$\\{|\\+=)/, contains: [{ scope: \"literal\", match: /\\[(\\|\\|)?\\]|\\(\\)/, relevance: 0 }, e.C_LINE_COMMENT_MODE, e.COMMENT(/\\/\\*/, /\\*\\//, { illegal: /^(#,\\/\\/)/ }), { scope: \"symbol\", match: /\\'[A-Za-z_](?!\\')[\\w\\']*/ }, { scope: \"type\", match: /`[A-Z][\\w\\']*/ }, { scope: \"type\", match: /\\b[A-Z][\\w\\']*/, relevance: 0 }, { match: /[a-z_]\\w*\\'[\\w\\']*/, relevance: 0 }, { scope: \"operator\", match: /\\s+(\\|\\||\\+[\\+\\.]?|\\*[\\*\\/\\.]?|\\/[\\.]?|\\.\\.\\.|\\|>|&&|===?)\\s+/, relevance: 0 }, e.inherit(e.APOS_STRING_MODE, { scope: \"string\", relevance: 0 }), e.inherit(e.QUOTE_STRING_MODE, { illegal: null }), { scope: \"number\", variants: [{ match: /\\b0[xX][a-fA-F0-9_]+[Lln]?/ }, { match: /\\b0[oO][0-7_]+[Lln]?/ }, { match: /\\b0[bB][01_]+[Lln]?/ }, { match: /\\b[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)/ }], relevance: 0 }] };\n}\nexport {\n  t as default\n};\n"],"mappings":"AAAA,SAASA,EAAEC,GACT,MAAO,CAAEC,KAAM,WAAYC,QAAS,CAAC,MAAOC,SAAU,CAAEC,SAAU,cAAeC,QAAS,CAAC,MAAO,KAAM,MAAO,SAAU,QAAS,QAAS,aAAc,KAAM,OAAQ,SAAU,OAAQ,MAAO,QAAS,YAAa,WAAY,MAAO,MAAO,WAAY,UAAW,KAAM,KAAM,UAAW,UAAW,cAAe,OAAQ,OAAQ,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,SAAU,UAAW,MAAO,SAAU,SAAU,KAAM,OAAQ,KAAM,MAAO,MAAO,MAAO,MAAO,SAAU,SAAU,OAAQ,KAAM,MAAO,OAAQ,MAAO,UAAW,OAAQ,QAAS,QAASC,SAAU,CAAC,QAAS,OAAQ,QAAS,OAAQ,QAAS,QAAS,MAAO,QAAS,QAAS,OAAQ,WAAY,cAAe,MAAO,SAAU,QAASC,QAAS,CAAC,OAAQ,UAAYC,QAAS,mBAAoBC,SAAU,CAAC,CAAEC,MAAO,UAAWC,MAAO,mBAAoBC,UAAW,GAAKZ,EAAEa,oBAAqBb,EAAEc,QAAQ,OAAQ,OAAQ,CAAEN,QAAS,cAAgB,CAAEE,MAAO,SAAUC,MAAO,4BAA8B,CAAED,MAAO,OAAQC,MAAO,iBAAmB,CAAED,MAAO,OAAQC,MAAO,iBAAkBC,UAAW,GAAK,CAAED,MAAO,qBAAsBC,UAAW,GAAK,CAAEF,MAAO,WAAYC,MAAO,gEAAiEC,UAAW,GAAKZ,EAAEe,QAAQf,EAAEgB,iBAAkB,CAAEN,MAAO,SAAUE,UAAW,IAAMZ,EAAEe,QAAQf,EAAEiB,kBAAmB,CAAET,QAAS,OAAS,CAAEE,MAAO,SAAUQ,SAAU,CAAC,CAAEP,MAAO,8BAAgC,CAAEA,MAAO,wBAA0B,CAAEA,MAAO,uBAAyB,CAAEA,MAAO,0DAA4DC,UAAW,IACliD,Q"}