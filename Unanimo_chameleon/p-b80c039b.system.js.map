{"version":3,"names":["e","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","t","tokenPostfix","ignoreCase","keywords","typeKeywords","operators","symbols","tokenizer","root","token","bracket","next","cases","include","quoted_identifier","space_identifier_until_period","identifier_until_period","identifier_rest","semver","whitespace","exports","conf","language"],"sources":["src/components/code-editor/monaco/output/lexon-pCFSm_JI.js"],"sourcesContent":["var e = { comments: { lineComment: \"COMMENT\" }, brackets: [[\"(\", \")\"]], autoClosingPairs: [{ open: \"{\", close: \"}\" }, { open: \"[\", close: \"]\" }, { open: \"(\", close: \")\" }, { open: '\"', close: '\"' }, { open: \":\", close: \".\" }], surroundingPairs: [{ open: \"{\", close: \"}\" }, { open: \"[\", close: \"]\" }, { open: \"(\", close: \")\" }, { open: \"`\", close: \"`\" }, { open: '\"', close: '\"' }, { open: \"'\", close: \"'\" }, { open: \":\", close: \".\" }], folding: { markers: { start: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#region\"), end: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#endregion\") } } }, t = { tokenPostfix: \".lexon\", ignoreCase: !0, keywords: [\"lexon\", \"lex\", \"clause\", \"terms\", \"contracts\", \"may\", \"pay\", \"pays\", \"appoints\", \"into\", \"to\"], typeKeywords: [\"amount\", \"person\", \"key\", \"time\", \"date\", \"asset\", \"text\"], operators: [\"less\", \"greater\", \"equal\", \"le\", \"gt\", \"or\", \"and\", \"add\", \"added\", \"subtract\", \"subtracted\", \"multiply\", \"multiplied\", \"times\", \"divide\", \"divided\", \"is\", \"be\", \"certified\"], symbols: /[=><!~?:&|+\\-*\\/\\^%]+/, tokenizer: { root: [[/^(\\s*)(comment:?(?:\\s.*|))$/, [\"\", \"comment\"]], [/\"/, { token: \"identifier.quote\", bracket: \"@open\", next: \"@quoted_identifier\" }], [\"LEX$\", { token: \"keyword\", bracket: \"@open\", next: \"@identifier_until_period\" }], [\"LEXON\", { token: \"keyword\", bracket: \"@open\", next: \"@semver\" }], [\":\", { token: \"delimiter\", bracket: \"@open\", next: \"@identifier_until_period\" }], [/[a-z_$][\\w$]*/, { cases: { \"@operators\": \"operator\", \"@typeKeywords\": \"keyword.type\", \"@keywords\": \"keyword\", \"@default\": \"identifier\" } }], { include: \"@whitespace\" }, [/[{}()\\[\\]]/, \"@brackets\"], [/[<>](?!@symbols)/, \"@brackets\"], [/@symbols/, \"delimiter\"], [/\\d*\\.\\d*\\.\\d*/, \"number.semver\"], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"], [/0[xX][0-9a-fA-F]+/, \"number.hex\"], [/\\d+/, \"number\"], [/[;,.]/, \"delimiter\"]], quoted_identifier: [[/[^\\\\\"]+/, \"identifier\"], [/\"/, { token: \"identifier.quote\", bracket: \"@close\", next: \"@pop\" }]], space_identifier_until_period: [[\":\", \"delimiter\"], [\" \", { token: \"white\", next: \"@identifier_rest\" }]], identifier_until_period: [{ include: \"@whitespace\" }, [\":\", { token: \"delimiter\", next: \"@identifier_rest\" }], [/[^\\\\.]+/, \"identifier\"], [/\\./, { token: \"delimiter\", bracket: \"@close\", next: \"@pop\" }]], identifier_rest: [[/[^\\\\.]+/, \"identifier\"], [/\\./, { token: \"delimiter\", bracket: \"@close\", next: \"@pop\" }]], semver: [{ include: \"@whitespace\" }, [\":\", \"delimiter\"], [/\\d*\\.\\d*\\.\\d*/, { token: \"number.semver\", bracket: \"@close\", next: \"@pop\" }]], whitespace: [[/[ \\t\\r\\n]+/, \"white\"]] } };\nexport {\n  e as conf,\n  t as language\n};\n"],"mappings":"uEAAG,IAACA,EAAI,CAAEC,SAAU,CAAEC,YAAa,WAAaC,SAAU,CAAC,CAAC,IAAK,MAAOC,iBAAkB,CAAC,CAAEC,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,MAAQC,iBAAkB,CAAC,CAAEF,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,MAAQE,QAAS,CAAEC,QAAS,CAAEC,MAAO,IAAIC,OAAO,oCAAqCC,IAAK,IAAID,OAAO,0CAA8CE,EAAI,CAAEC,aAAc,SAAUC,YAAa,EAAGC,SAAU,CAAC,QAAS,MAAO,SAAU,QAAS,YAAa,MAAO,MAAO,OAAQ,WAAY,OAAQ,MAAOC,aAAc,CAAC,SAAU,SAAU,MAAO,OAAQ,OAAQ,QAAS,QAASC,UAAW,CAAC,OAAQ,UAAW,QAAS,KAAM,KAAM,KAAM,MAAO,MAAO,QAAS,WAAY,aAAc,WAAY,aAAc,QAAS,SAAU,UAAW,KAAM,KAAM,aAAcC,QAAS,wBAAyBC,UAAW,CAAEC,KAAM,CAAC,CAAC,8BAA+B,CAAC,GAAI,YAAa,CAAC,IAAK,CAAEC,MAAO,mBAAoBC,QAAS,QAASC,KAAM,uBAAyB,CAAC,OAAQ,CAAEF,MAAO,UAAWC,QAAS,QAASC,KAAM,6BAA+B,CAAC,QAAS,CAAEF,MAAO,UAAWC,QAAS,QAASC,KAAM,YAAc,CAAC,IAAK,CAAEF,MAAO,YAAaC,QAAS,QAASC,KAAM,6BAA+B,CAAC,gBAAiB,CAAEC,MAAO,CAAE,aAAc,WAAY,gBAAiB,eAAgB,YAAa,UAAW,WAAY,gBAAmB,CAAEC,QAAS,eAAiB,CAAC,aAAc,aAAc,CAAC,mBAAoB,aAAc,CAAC,WAAY,aAAc,CAAC,gBAAiB,iBAAkB,CAAC,2BAA4B,gBAAiB,CAAC,oBAAqB,cAAe,CAAC,MAAO,UAAW,CAAC,QAAS,cAAeC,kBAAmB,CAAC,CAAC,UAAW,cAAe,CAAC,IAAK,CAAEL,MAAO,mBAAoBC,QAAS,SAAUC,KAAM,UAAYI,8BAA+B,CAAC,CAAC,IAAK,aAAc,CAAC,IAAK,CAAEN,MAAO,QAASE,KAAM,sBAAwBK,wBAAyB,CAAC,CAAEH,QAAS,eAAiB,CAAC,IAAK,CAAEJ,MAAO,YAAaE,KAAM,qBAAuB,CAAC,UAAW,cAAe,CAAC,KAAM,CAAEF,MAAO,YAAaC,QAAS,SAAUC,KAAM,UAAYM,gBAAiB,CAAC,CAAC,UAAW,cAAe,CAAC,KAAM,CAAER,MAAO,YAAaC,QAAS,SAAUC,KAAM,UAAYO,OAAQ,CAAC,CAAEL,QAAS,eAAiB,CAAC,IAAK,aAAc,CAAC,gBAAiB,CAAEJ,MAAO,gBAAiBC,QAAS,SAAUC,KAAM,UAAYQ,WAAY,CAAC,CAAC,aAAc,YAAWC,EAAA,CAAAC,KAAAlC,EAAAmC,SAAAtB,G"}