{"version":3,"names":["segmentedControlItemCss","ChSegmentedControlItemStyle0","ChSegmentedControlItem","exports","_a","_parts","set","this","concat","_this","disabled","SEGMENTED_CONTROL_PARTS_DICTIONARY","DISABLED","selected","SELECTED","UNSELECTED","first","FIRST","last","LAST","between","BETWEEN","_handleSelectedChange","event","stopPropagation","selectedChange","emit","el","id","class_1","prototype","render","hasStartImg","startImgSrc","hasEndImg","endImgSrc","hasImages","h","Host","key","role","accessibleName","class","_c","_d","startImgType","_e","endImgType","undefined","part","__classPrivateFieldGet","call","style","type","onClick","caption","segmentedControlRenderCss","ChSegmentedControlRenderStyle0","ChSegmentedControl","_b","_itemRender","item","index","model","length","itemCssClass","exportparts","exportParts","selectedId","SEGMENTED_CONTROL_EXPORT_PARTS","class_2","handleSelectedChange","detail","selectedItemChange","map"],"sources":["src/components/segmented-control/internal/segmented-control-item/segmented-control-item.scss?tag=ch-segmented-control-item&encapsulation=shadow","src/components/segmented-control/internal/segmented-control-item/segmented-control-item.tsx","src/components/segmented-control/segmented-control-render.scss?tag=ch-segmented-control-render","src/components/segmented-control/segmented-control-render.tsx"],"sourcesContent":["@import \"../../../../common/_base\";\r\n\r\n@include button-reset();\r\n\r\n// Must be placed after the button-reset()\r\n@include box-sizing();\r\n\r\n:host {\r\n  --ch-segmented-control-item__image-size: #{$default-decorative-image-size};\r\n  --ch-segmented-control-item__background-image-size: 100%;\r\n\r\n  display: contents;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//             Images\r\n// - - - - - - - - - - - - - - - -\r\n.img--start::before,\r\n.img--end::after {\r\n  content: \"\";\r\n  display: block;\r\n  inline-size: var(--ch-segmented-control-item__image-size);\r\n  block-size: var(--ch-segmented-control-item__image-size);\r\n  min-inline-size: var(--ch-segmented-control-item__image-size);\r\n}\r\n\r\n.img--start {\r\n  --ch-img: var(--ch-start-img);\r\n}\r\n\r\n.img--end {\r\n  --ch-img: var(--ch-end-img);\r\n}\r\n\r\n.start-img-type--background::before,\r\n.end-img-type--background::after {\r\n  background: no-repeat center /\r\n    var(--ch-segmented-control-item__background-image-size) var(--ch-img);\r\n}\r\n\r\n.start-img-type--mask::before,\r\n.end-img-type--mask::after {\r\n  -webkit-mask: var(--ch-img) 50% 50% /\r\n    var(--ch-segmented-control-item__background-image-size)\r\n    var(--ch-segmented-control-item__background-image-size) no-repeat;\r\n  background-color: currentColor;\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  h\r\n} from \"@stencil/core\";\r\n\r\nimport { AccessibleNameComponent } from \"../../../../common/interfaces\";\r\nimport { ImageRender } from \"../../../../common/types\";\r\nimport { SEGMENTED_CONTROL_PARTS_DICTIONARY } from \"../../../../common/reserverd-names\";\r\n\r\n/**\r\n * Segmented control is used to pick one choice from a linear set of closely related choices, and immediately apply that selection.\r\n * This control represents and item of the ch-segmented-control-render\r\n *\r\n * @part selected - ...\r\n */\r\n@Component({\r\n  shadow: true,\r\n  styleUrl: \"segmented-control-item.scss\",\r\n  tag: \"ch-segmented-control-item\"\r\n})\r\nexport class ChSegmentedControlItem implements AccessibleNameComponent {\r\n  @Element() el: HTMLChSegmentedControlItemElement;\r\n\r\n  /**\r\n   * Specifies a short string, typically 1 to 3 words, that authors associate\r\n   * with an element to provide users of assistive technologies with a label\r\n   * for the element.\r\n   */\r\n  @Prop() readonly accessibleName?: string;\r\n\r\n  /**\r\n   * `true` if the control is the not the first or last item in the\r\n   * ch-segmented-control-render.\r\n   */\r\n  @Prop() readonly between: boolean = false;\r\n\r\n  /**\r\n   * Specifies the caption that the control will display.\r\n   */\r\n  @Prop() readonly caption?: string;\r\n\r\n  /**\r\n   * This attribute lets you specify if the element is disabled.\r\n   * If disabled, it will not fire any user interaction related event\r\n   * (for example, click event).\r\n   */\r\n  @Prop() readonly disabled?: boolean = false;\r\n\r\n  /**\r\n   * Specifies the src of the end image.\r\n   */\r\n  @Prop() readonly endImgSrc: string;\r\n\r\n  /**\r\n   * Specifies how the end image will be rendered.\r\n   */\r\n  @Prop() readonly endImgType: Exclude<ImageRender, \"img\"> = \"background\";\r\n\r\n  /**\r\n   * `true` if the control is the first item in the ch-segmented-control-render.\r\n   */\r\n  @Prop() readonly first: boolean = false;\r\n\r\n  /**\r\n   * `true` if the control is the last item in the ch-segmented-control-render.\r\n   */\r\n  @Prop() readonly last: boolean = false;\r\n\r\n  /**\r\n   * Specifies if the control is selected.\r\n   */\r\n  @Prop() readonly selected: boolean;\r\n\r\n  /**\r\n   * Specifies the src of the start image.\r\n   */\r\n  @Prop() readonly startImgSrc: string;\r\n\r\n  /**\r\n   * Specifies how the start image will be rendered.\r\n   */\r\n  @Prop() readonly startImgType: Exclude<ImageRender, \"img\"> = \"background\";\r\n\r\n  /**\r\n   * Fired when the control is selected by user interaction.\r\n   */\r\n  @Event() selectedChange: EventEmitter<string>;\r\n\r\n  #parts = () =>\r\n    `action${\r\n      this.disabled ? ` ${SEGMENTED_CONTROL_PARTS_DICTIONARY.DISABLED}` : \"\"\r\n    } ${\r\n      this.selected\r\n        ? SEGMENTED_CONTROL_PARTS_DICTIONARY.SELECTED\r\n        : SEGMENTED_CONTROL_PARTS_DICTIONARY.UNSELECTED\r\n    }${this.first ? ` ${SEGMENTED_CONTROL_PARTS_DICTIONARY.FIRST}` : \"\"}${\r\n      this.last ? ` ${SEGMENTED_CONTROL_PARTS_DICTIONARY.LAST}` : \"\"\r\n    }${this.between ? ` ${SEGMENTED_CONTROL_PARTS_DICTIONARY.BETWEEN}` : \"\"}`;\r\n\r\n  #handleSelectedChange = (event: MouseEvent) => {\r\n    event.stopPropagation();\r\n    this.selectedChange.emit(this.el.id);\r\n  };\r\n\r\n  render() {\r\n    const hasStartImg = !!this.startImgSrc;\r\n    const hasEndImg = !!this.endImgSrc;\r\n    const hasImages = hasStartImg || hasEndImg;\r\n\r\n    return (\r\n      <Host role=\"listitem\">\r\n        <button\r\n          aria-label={this.accessibleName || null}\r\n          aria-selected={this.selected ? \"true\" : null}\r\n          class={\r\n            hasImages\r\n              ? {\r\n                  [`start-img-type--${\r\n                    this.startImgType ?? \"background\"\r\n                  } img--start`]: hasStartImg,\r\n                  [`end-img-type--${this.endImgType ?? \"background\"} img--end`]:\r\n                    hasEndImg\r\n                }\r\n              : undefined\r\n          }\r\n          part={this.#parts()}\r\n          style={\r\n            hasImages\r\n              ? {\r\n                  \"--ch-start-img\": hasStartImg\r\n                    ? `url(\"${this.startImgSrc}\")`\r\n                    : undefined,\r\n                  \"--ch-end-img\": hasEndImg\r\n                    ? `url(\"${this.endImgSrc}\")`\r\n                    : undefined\r\n                }\r\n              : undefined\r\n          }\r\n          type=\"button\"\r\n          onClick={this.#handleSelectedChange}\r\n        >\r\n          {this.caption}\r\n        </button>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","ch-segmented-control-render {\r\n  display: inline-grid;\r\n  grid-auto-flow: column;\r\n  grid-auto-columns: max-content;\r\n}\r\n","import {\r\n  Component,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Listen,\r\n  Prop,\r\n  h\r\n} from \"@stencil/core\";\r\nimport { SegmentedControlItemModel, SegmentedControlModel } from \"./types\";\r\nimport { ChSegmentedControlItemCustomEvent } from \"../../components\";\r\nimport { SEGMENTED_CONTROL_EXPORT_PARTS } from \"../../common/reserverd-names\";\r\n\r\n/**\r\n * Segmented control is used to pick one choice from a linear set of closely related choices, and immediately apply that selection.\r\n */\r\n@Component({\r\n  shadow: false,\r\n  styleUrl: \"segmented-control-render.scss\",\r\n  tag: \"ch-segmented-control-render\"\r\n})\r\nexport class ChSegmentedControl {\r\n  /**\r\n   * Specifies the parts that are exported by the internal\r\n   * segmented-control-item. This property is useful to override the exported\r\n   * parts.\r\n   */\r\n  @Prop() readonly exportParts: string = SEGMENTED_CONTROL_EXPORT_PARTS;\r\n\r\n  /**\r\n   * A CSS class to set as the `ch-segmented-control-item` element class.\r\n   * This default class is used for the items that don't have an explicit class.\r\n   */\r\n  @Prop() readonly itemCssClass: string = \"segmented-control-item\";\r\n\r\n  /**\r\n   * This property lets you define the items of the ch-segmented-control-render\r\n   * control.\r\n   */\r\n  @Prop() readonly model?: SegmentedControlModel;\r\n\r\n  /**\r\n   * Specifies the ID of the selected item\r\n   */\r\n  @Prop({ mutable: true }) selectedId: string;\r\n\r\n  /**\r\n   * Fired when the selected item change. It contains the information about the\r\n   * new selected id.\r\n   */\r\n  @Event() selectedItemChange: EventEmitter<string>;\r\n\r\n  @Listen(\"selectedChange\")\r\n  handleSelectedChange(event: ChSegmentedControlItemCustomEvent<string>) {\r\n    event.stopPropagation();\r\n\r\n    this.selectedId = event.detail;\r\n    this.selectedItemChange.emit(event.detail);\r\n  }\r\n\r\n  #itemRender = (item: SegmentedControlItemModel, index: number) => {\r\n    const first = index === 0;\r\n    const last = index === this.model.length - 1;\r\n    const between = !first && !last;\r\n\r\n    return (\r\n      <ch-segmented-control-item\r\n        id={item.id}\r\n        accessibleName={item.accessibleName}\r\n        between={between}\r\n        caption={item.caption}\r\n        class={item.class || this.itemCssClass}\r\n        disabled={item.disabled}\r\n        exportparts={this.exportParts}\r\n        endImgSrc={item.endImgSrc}\r\n        endImgType={item.endImgType}\r\n        first={first}\r\n        last={last}\r\n        selected={this.selectedId === item.id}\r\n        startImgSrc={item.startImgSrc}\r\n        startImgType={item.startImgType}\r\n      ></ch-segmented-control-item>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return <Host role=\"list\">{this.model?.map(this.#itemRender)}</Host>;\r\n  }\r\n}\r\n"],"mappings":"8kBAAA,IAAMA,EAA0B,itCAChC,IAAAC,EAAeD,E,ICwBFE,EAAsBC,EAAA,6BAAAC,EAAA,W,yBAoEjCC,EAAAC,IAAAC,MAAS,WACP,eAAAC,OACEC,EAAKC,SAAW,IAAAF,OAAIG,EAAmCC,UAAa,GACtE,KAAAJ,OACEC,EAAKI,SACDF,EAAmCG,SACnCH,EAAmCI,YACzCP,OAAGC,EAAKO,MAAQ,IAAAR,OAAIG,EAAmCM,OAAU,IAAET,OACjEC,EAAKS,KAAO,IAAAV,OAAIG,EAAmCQ,MAAS,IAC9DX,OAAGC,EAAKW,QAAU,IAAAZ,OAAIG,EAAmCU,SAAY,GARrE,IAUFC,EAAAhB,IAAAC,MAAwB,SAACgB,GACvBA,EAAMC,kBACNf,EAAKgB,eAAeC,KAAKjB,EAAKkB,GAAGC,G,wGAnEC,M,qCAYE,M,yCAUqB,a,WAKzB,M,UAKD,M,qEAe4B,Y,6GAuB7DC,EAAAC,UAAAC,OAAA,W,cACE,IAAMC,IAAgBzB,KAAK0B,YAC3B,IAAMC,IAAc3B,KAAK4B,UACzB,IAAMC,EAAYJ,GAAeE,EAEjC,OACEG,EAACC,EAAI,CAAAC,IAAA,2CAACC,KAAK,YACTH,EAAA,UAAAE,IAAA,wDACchC,KAAKkC,gBAAkB,KAAI,gBACxBlC,KAAKM,SAAW,OAAS,KACxC6B,MACEN,G,KAEMO,EAAC,mBAAAnC,QACCoC,EAAArC,KAAKsC,gBAAY,MAAAD,SAAA,EAAAA,EAAI,aACvB,gBAAgBZ,EAChBW,EAAC,iBAAAnC,QAAiBsC,EAAAvC,KAAKwC,cAAU,MAAAD,SAAA,EAAAA,EAAI,aAAY,cAC/CZ,E,GAEJc,UAENC,KAAMC,uBAAA3C,KAAIF,EAAA,KAAO8C,KAAX5C,MACN6C,MACEhB,EACI,CACE,iBAAkBJ,EACd,QAAAxB,OAAQD,KAAK0B,YAAW,MACxBe,UACJ,eAAgBd,EACZ,QAAA1B,OAAQD,KAAK4B,UAAS,MACtBa,WAENA,UAENK,KAAK,SACLC,QAASJ,uBAAA3C,KAAIe,EAAA,MAEZf,KAAKgD,S,WAzHmB,G,0CCzBnC,IAAMC,EAA4B,6IAClC,IAAAC,EAAeD,E,ICoBFE,EAAkBvD,EAAA,+BAAAwD,EAAA,W,yBAuC7BC,EAAAtD,IAAAC,MAAc,SAACsD,EAAiCC,GAC9C,IAAM9C,EAAQ8C,IAAU,EACxB,IAAM5C,EAAO4C,IAAUrD,EAAKsD,MAAMC,OAAS,EAC3C,IAAM5C,GAAWJ,IAAUE,EAE3B,OACEmB,EAAA,6BACET,GAAIiC,EAAKjC,GACTa,eAAgBoB,EAAKpB,eACrBrB,QAASA,EACTmC,QAASM,EAAKN,QACdb,MAAOmB,EAAKnB,OAASjC,EAAKwD,aAC1BvD,SAAUmD,EAAKnD,SACfwD,YAAazD,EAAK0D,YAClBhC,UAAW0B,EAAK1B,UAChBY,WAAYc,EAAKd,WACjB/B,MAAOA,EACPE,KAAMA,EACNL,SAAUJ,EAAK2D,aAAeP,EAAKjC,GACnCK,YAAa4B,EAAK5B,YAClBY,aAAcgB,EAAKhB,c,sFArDcwB,E,kBAMC,yB,+CAoBxCC,EAAAxC,UAAAyC,qBAAA,SAAqBhD,GACnBA,EAAMC,kBAENjB,KAAK6D,WAAa7C,EAAMiD,OACxBjE,KAAKkE,mBAAmB/C,KAAKH,EAAMiD,O,EA4BrCF,EAAAxC,UAAAC,OAAA,W,MACE,OAAOM,EAACC,EAAI,CAAAC,IAAA,2CAACC,KAAK,SAAQG,EAAApC,KAAKwD,SAAK,MAAApB,SAAA,SAAAA,EAAE+B,IAAIxB,uBAAA3C,KAAIqD,EAAA,M,WAjEnB,G"}