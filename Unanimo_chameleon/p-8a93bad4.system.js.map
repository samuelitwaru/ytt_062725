{"version":3,"names":["e","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","o","defaultToken","ignoreCase","tokenPostfix","token","keywords","constants","operators","tokenizer","root","include","cases","comment","whitespace","strings","multiLineString","exports","conf","language"],"sources":["src/components/code-editor/monaco/output/scheme-DTT6HxEC.js"],"sourcesContent":["var e = { comments: { lineComment: \";\", blockComment: [\"#|\", \"|#\"] }, brackets: [[\"(\", \")\"], [\"{\", \"}\"], [\"[\", \"]\"]], autoClosingPairs: [{ open: \"{\", close: \"}\" }, { open: \"[\", close: \"]\" }, { open: \"(\", close: \")\" }, { open: '\"', close: '\"' }], surroundingPairs: [{ open: \"{\", close: \"}\" }, { open: \"[\", close: \"]\" }, { open: \"(\", close: \")\" }, { open: '\"', close: '\"' }] }, o = { defaultToken: \"\", ignoreCase: !0, tokenPostfix: \".scheme\", brackets: [{ open: \"(\", close: \")\", token: \"delimiter.parenthesis\" }, { open: \"{\", close: \"}\", token: \"delimiter.curly\" }, { open: \"[\", close: \"]\", token: \"delimiter.square\" }], keywords: [\"case\", \"do\", \"let\", \"loop\", \"if\", \"else\", \"when\", \"cons\", \"car\", \"cdr\", \"cond\", \"lambda\", \"lambda*\", \"syntax-rules\", \"format\", \"set!\", \"quote\", \"eval\", \"append\", \"list\", \"list?\", \"member?\", \"load\"], constants: [\"#t\", \"#f\"], operators: [\"eq?\", \"eqv?\", \"equal?\", \"and\", \"or\", \"not\", \"null?\"], tokenizer: { root: [[/#[xXoObB][0-9a-fA-F]+/, \"number.hex\"], [/[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?/, \"number.float\"], [/(?:\\b(?:(define|define-syntax|define-macro))\\b)(\\s+)((?:\\w|\\-|\\!|\\?)*)/, [\"keyword\", \"white\", \"variable\"]], { include: \"@whitespace\" }, { include: \"@strings\" }, [/[a-zA-Z_#][a-zA-Z0-9_\\-\\?\\!\\*]*/, { cases: { \"@keywords\": \"keyword\", \"@constants\": \"constant\", \"@operators\": \"operators\", \"@default\": \"identifier\" } }]], comment: [[/[^\\|#]+/, \"comment\"], [/#\\|/, \"comment\", \"@push\"], [/\\|#/, \"comment\", \"@pop\"], [/[\\|#]/, \"comment\"]], whitespace: [[/[ \\t\\r\\n]+/, \"white\"], [/#\\|/, \"comment\", \"@comment\"], [/;.*$/, \"comment\"]], strings: [[/\"$/, \"string\", \"@popall\"], [/\"(?=.)/, \"string\", \"@multiLineString\"]], multiLineString: [[/[^\\\\\"]+$/, \"string\", \"@popall\"], [/[^\\\\\"]+/, \"string\"], [/\\\\./, \"string.escape\"], [/\"/, \"string\", \"@popall\"], [/\\\\$/, \"string\"]] } };\nexport {\n  e as conf,\n  o as language\n};\n"],"mappings":"uEAAG,IAACA,EAAI,CAAEC,SAAU,CAAEC,YAAa,IAAKC,aAAc,CAAC,KAAM,OAASC,SAAU,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,MAAOC,iBAAkB,CAAC,CAAEC,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,MAAQC,iBAAkB,CAAC,CAAEF,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,KAAO,CAAED,KAAM,IAAKC,MAAO,OAAUE,EAAI,CAAEC,aAAc,GAAIC,YAAa,EAAGC,aAAc,UAAWR,SAAU,CAAC,CAAEE,KAAM,IAAKC,MAAO,IAAKM,MAAO,yBAA2B,CAAEP,KAAM,IAAKC,MAAO,IAAKM,MAAO,mBAAqB,CAAEP,KAAM,IAAKC,MAAO,IAAKM,MAAO,qBAAuBC,SAAU,CAAC,OAAQ,KAAM,MAAO,OAAQ,KAAM,OAAQ,OAAQ,OAAQ,MAAO,MAAO,OAAQ,SAAU,UAAW,eAAgB,SAAU,OAAQ,QAAS,OAAQ,SAAU,OAAQ,QAAS,UAAW,QAASC,UAAW,CAAC,KAAM,MAAOC,UAAW,CAAC,MAAO,OAAQ,SAAU,MAAO,KAAM,MAAO,SAAUC,UAAW,CAAEC,KAAM,CAAC,CAAC,wBAAyB,cAAe,CAAC,2CAA4C,gBAAiB,CAAC,yEAA0E,CAAC,UAAW,QAAS,aAAc,CAAEC,QAAS,eAAiB,CAAEA,QAAS,YAAc,CAAC,kCAAmC,CAAEC,MAAO,CAAE,YAAa,UAAW,aAAc,WAAY,aAAc,YAAa,WAAY,iBAAoBC,QAAS,CAAC,CAAC,UAAW,WAAY,CAAC,MAAO,UAAW,SAAU,CAAC,MAAO,UAAW,QAAS,CAAC,QAAS,YAAaC,WAAY,CAAC,CAAC,aAAc,SAAU,CAAC,MAAO,UAAW,YAAa,CAAC,OAAQ,YAAaC,QAAS,CAAC,CAAC,KAAM,SAAU,WAAY,CAAC,SAAU,SAAU,qBAAsBC,gBAAiB,CAAC,CAAC,WAAY,SAAU,WAAY,CAAC,UAAW,UAAW,CAAC,MAAO,iBAAkB,CAAC,IAAK,SAAU,WAAY,CAAC,MAAO,aAAYC,EAAA,CAAAC,KAAA1B,EAAA2B,SAAAlB,G"}