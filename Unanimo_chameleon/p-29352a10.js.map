{"version":3,"names":["p","Object","defineProperty","d","getOwnPropertyDescriptor","g","getOwnPropertyNames","m","prototype","hasOwnProperty","i","n","e","l","r","t","call","get","enumerable","a","c","b","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","onEnterRules","beforeText","RegExp","action","indentAction","languages","IndentAction","Indent","folding","offSide","markers","start","end","f","defaultToken","tokenPostfix","keywords","token","tokenizer","root","include","cases","whitespace","endDocString","endDblDocString","numbers","strings","stringBody","dblStringBody"],"sources":["src/components/code-editor/monaco/output/python-D80ij6CN.js"],"sourcesContent":["import { m as c } from \"./monaco-BGD7mUXf.js\";\nvar s, o, p = Object.defineProperty, d = Object.getOwnPropertyDescriptor, g = Object.getOwnPropertyNames, m = Object.prototype.hasOwnProperty, i = (n, e, l, r) => {\n  if (e && typeof e == \"object\" || typeof e == \"function\")\n    for (let t of g(e))\n      m.call(n, t) || t === l || p(n, t, { get: () => e[t], enumerable: !(r = d(e, t)) || r.enumerable });\n  return n;\n}, a = {};\ni(a, s = c, \"default\"), o && i(o, s, \"default\");\nvar b = { comments: { lineComment: \"#\", blockComment: [\"'''\", \"'''\"] }, brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]], autoClosingPairs: [{ open: \"{\", close: \"}\" }, { open: \"[\", close: \"]\" }, { open: \"(\", close: \")\" }, { open: '\"', close: '\"', notIn: [\"string\"] }, { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] }], surroundingPairs: [{ open: \"{\", close: \"}\" }, { open: \"[\", close: \"]\" }, { open: \"(\", close: \")\" }, { open: '\"', close: '\"' }, { open: \"'\", close: \"'\" }], onEnterRules: [{ beforeText: new RegExp(\"^\\\\s*(?:def|class|for|if|elif|else|while|try|with|finally|except|async|match|case).*?:\\\\s*$\"), action: { indentAction: a.languages.IndentAction.Indent } }], folding: { offSide: !0, markers: { start: new RegExp(\"^\\\\s*#region\\\\b\"), end: new RegExp(\"^\\\\s*#endregion\\\\b\") } } }, f = { defaultToken: \"\", tokenPostfix: \".python\", keywords: [\"False\", \"None\", \"True\", \"_\", \"and\", \"as\", \"assert\", \"async\", \"await\", \"break\", \"case\", \"class\", \"continue\", \"def\", \"del\", \"elif\", \"else\", \"except\", \"exec\", \"finally\", \"for\", \"from\", \"global\", \"if\", \"import\", \"in\", \"is\", \"lambda\", \"match\", \"nonlocal\", \"not\", \"or\", \"pass\", \"print\", \"raise\", \"return\", \"try\", \"type\", \"while\", \"with\", \"yield\", \"int\", \"float\", \"long\", \"complex\", \"hex\", \"abs\", \"all\", \"any\", \"apply\", \"basestring\", \"bin\", \"bool\", \"buffer\", \"bytearray\", \"callable\", \"chr\", \"classmethod\", \"cmp\", \"coerce\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\", \"enumerate\", \"eval\", \"execfile\", \"file\", \"filter\", \"format\", \"frozenset\", \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"id\", \"input\", \"intern\", \"isinstance\", \"issubclass\", \"iter\", \"len\", \"locals\", \"list\", \"map\", \"max\", \"memoryview\", \"min\", \"next\", \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"print\", \"property\", \"reversed\", \"range\", \"raw_input\", \"reduce\", \"reload\", \"repr\", \"reversed\", \"round\", \"self\", \"set\", \"setattr\", \"slice\", \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\", \"type\", \"unichr\", \"unicode\", \"vars\", \"xrange\", \"zip\", \"__dict__\", \"__methods__\", \"__members__\", \"__class__\", \"__bases__\", \"__name__\", \"__mro__\", \"__subclasses__\", \"__init__\", \"__import__\"], brackets: [{ open: \"{\", close: \"}\", token: \"delimiter.curly\" }, { open: \"[\", close: \"]\", token: \"delimiter.bracket\" }, { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" }], tokenizer: { root: [{ include: \"@whitespace\" }, { include: \"@numbers\" }, { include: \"@strings\" }, [/[,:;]/, \"delimiter\"], [/[{}\\[\\]()]/, \"@brackets\"], [/@[a-zA-Z_]\\w*/, \"tag\"], [/[a-zA-Z_]\\w*/, { cases: { \"@keywords\": \"keyword\", \"@default\": \"identifier\" } }]], whitespace: [[/\\s+/, \"white\"], [/(^#.*$)/, \"comment\"], [/'''/, \"string\", \"@endDocString\"], [/\"\"\"/, \"string\", \"@endDblDocString\"]], endDocString: [[/[^']+/, \"string\"], [/\\\\'/, \"string\"], [/'''/, \"string\", \"@popall\"], [/'/, \"string\"]], endDblDocString: [[/[^\"]+/, \"string\"], [/\\\\\"/, \"string\"], [/\"\"\"/, \"string\", \"@popall\"], [/\"/, \"string\"]], numbers: [[/-?0x([abcdef]|[ABCDEF]|\\d)+[lL]?/, \"number.hex\"], [/-?(\\d*\\.)?\\d+([eE][+\\-]?\\d+)?[jJ]?[lL]?/, \"number\"]], strings: [[/'$/, \"string.escape\", \"@popall\"], [/'/, \"string.escape\", \"@stringBody\"], [/\"$/, \"string.escape\", \"@popall\"], [/\"/, \"string.escape\", \"@dblStringBody\"]], stringBody: [[/[^\\\\']+$/, \"string\", \"@popall\"], [/[^\\\\']+/, \"string\"], [/\\\\./, \"string\"], [/'/, \"string.escape\", \"@popall\"], [/\\\\$/, \"string\"]], dblStringBody: [[/[^\\\\\"]+$/, \"string\", \"@popall\"], [/[^\\\\\"]+/, \"string\"], [/\\\\./, \"string\"], [/\"/, \"string.escape\", \"@popall\"], [/\\\\$/, \"string\"]] } };\nexport {\n  b as conf,\n  f as language\n};\n"],"mappings":"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"}